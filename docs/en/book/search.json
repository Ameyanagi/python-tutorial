[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Tutorial",
    "section": "",
    "text": "Python Tutorial\nWelcome to the comprehensive Python tutorial! This book will take you from Python basics to advanced applications.",
    "crumbs": [
      "Python Tutorial"
    ]
  },
  {
    "objectID": "index.html#what-youll-learn",
    "href": "index.html#what-youll-learn",
    "title": "Python Tutorial",
    "section": "What You’ll Learn",
    "text": "What You’ll Learn\nThis tutorial is designed for mixed skill levels and covers:\n\nEnvironment Setup - uv, poetry, miniforge, Git/GitHub, VS Code\nPython Basics - Syntax, data types, control flow, functions\n\nObject-Oriented Programming - Classes, inheritance, advanced patterns\nAdvanced Topics - Type hints, async programming, multiprocessing\nReal Applications - Data science, automation, web development",
    "crumbs": [
      "Python Tutorial"
    ]
  },
  {
    "objectID": "index.html#tutorial-features",
    "href": "index.html#tutorial-features",
    "title": "Python Tutorial",
    "section": "Tutorial Features",
    "text": "Tutorial Features\n\n🖥️ Interactive Examples - Code with execution output\n📝 Exercises & Quizzes - Test your understanding\n🚀 Hands-on Projects - Build real applications\n🎯 Multiple Formats - Book, slides, PDF\n🌐 Bilingual - Available in English and Japanese\n\n\n\n\n\n\n\n⚡ NEW: Live Interactive Python + File Uploads\n\n\n\nThis tutorial now features Quarto Live and Quarto Drop - run and modify Python code directly in your browser AND upload your own data files! No installation required, perfect for immediate hands-on learning with real data.",
    "crumbs": [
      "Python Tutorial"
    ]
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "Python Tutorial",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nBasic computer literacy\nWillingness to learn and experiment\nPython 3.12+ (we’ll help you install it!)",
    "crumbs": [
      "Python Tutorial"
    ]
  },
  {
    "objectID": "index.html#how-to-use-this-tutorial",
    "href": "index.html#how-to-use-this-tutorial",
    "title": "Python Tutorial",
    "section": "How to Use This Tutorial",
    "text": "How to Use This Tutorial\n\nLinear Learning - Follow chapters in order for best results\nPractice Code - Run every example yourself\nComplete Exercises - Reinforce your learning\nBuild Projects - Apply knowledge to real problems",
    "crumbs": [
      "Python Tutorial"
    ]
  },
  {
    "objectID": "index.html#book-chapters",
    "href": "index.html#book-chapters",
    "title": "Python Tutorial",
    "section": "📚 Book Chapters",
    "text": "📚 Book Chapters\nReady to start your Python journey? Let’s begin with Environment Setup!",
    "crumbs": [
      "Python Tutorial"
    ]
  },
  {
    "objectID": "index.html#interactive-revealjs-slides",
    "href": "index.html#interactive-revealjs-slides",
    "title": "Python Tutorial",
    "section": "🎬 Interactive RevealJS Slides",
    "text": "🎬 Interactive RevealJS Slides\nProfessional presentation slides with full navigation controls and mobile optimization:\n🎯 View All Slides Collection →\n\nCore Python Concepts\n\n🚀 Introduction & Setup - Get started with Python and uv\n📊 Data Types & Collections - Lists, dictionaries, sets\n\n🔀 Control Flow - If/else statements, loops\n⚙️ Functions - Reusable code blocks\n🚨 Error Handling - Try/except patterns\n\n\n\nCode Organization\n\n📦 Modules & Packages - Code organization\n🏗️ Classes & Objects - Object-oriented programming\n🔗 Inheritance - Advanced OOP concepts\n🏷️ Type Hints - Modern Python typing\n\n\n\nAdvanced Applications\n\n📈 Data Science - NumPy, Pandas, Machine Learning\n🌐 IoT Connectivity - Serial, Modbus, InfluxDB\n\n\n\n🎮 RevealJS Features:\n\nNavigation: Arrow keys, mouse clicks, touch gestures (iPhone compatible)\nShortcuts: ESC (overview), F (fullscreen), S (speaker view)\n\nInteractive: Chalkboard (B key), Menu, Progress bar\nMobile: Optimized for all devices including smartphones",
    "crumbs": [
      "Python Tutorial"
    ]
  },
  {
    "objectID": "index.html#language-navigation",
    "href": "index.html#language-navigation",
    "title": "Python Tutorial",
    "section": "🌐 Language Navigation",
    "text": "🌐 Language Navigation\n\n🇺🇸 English (Current) - You’re viewing the English version\n🇯🇵 日本語版 - Switch to Japanese version\n🏠 Main Landing - Back to homepage\n\n\nReady to learn Python? Start with Environment Setup or explore the interactive slides above!",
    "crumbs": [
      "Python Tutorial"
    ]
  },
  {
    "objectID": "book/01-setup.html",
    "href": "book/01-setup.html",
    "title": "1  Environment Setup",
    "section": "",
    "text": "1.1 Python Installation\nIn this chapter, we’ll set up your Python development environment using modern tools. Setting up a proper development environment is crucial for Python programming because it ensures you have the right tools to write, test, and manage your code effectively. Think of it like setting up a workshop before starting a woodworking project - having the right tools makes everything much easier.\nWe recommend Python 3.12 or higher for the best type hinting support. Python 3.12 includes significant performance improvements and enhanced type hints that make your code more reliable and easier to debug. It’s like upgrading from a basic calculator to a scientific calculator - you get more features and better accuracy.",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Environment Setup</span>"
    ]
  },
  {
    "objectID": "book/01-setup.html#python-installation",
    "href": "book/01-setup.html#python-installation",
    "title": "1  Environment Setup",
    "section": "",
    "text": "1.1.1 Windows\n# Using winget (Windows Package Manager - like apt for Windows)\nwinget install Python.Python.3.12\n\n# Using Microsoft Store (easiest for beginners)\n# Search for \"Python 3.12\" in Microsoft Store\nWhat these commands do: winget is Windows’ modern package manager that automatically downloads and installs Python with proper PATH configuration. The Microsoft Store version is sandboxed and automatically updates, making it perfect for beginners who want a hassle-free installation.\n\n\n1.1.2 macOS\n# Using Homebrew (package manager for macOS)\nbrew install python@3.12\n\n# Using pyenv (Python version manager)\npyenv install 3.12.8\npyenv global 3.12.8\nWhat these commands do: Homebrew installs Python to /opt/homebrew/bin and manages dependencies automatically. pyenv is more advanced - it lets you install multiple Python versions and switch between them easily. Think of pyenv like having multiple toolboxes, where you can pick the right tools (Python version) for each project.\n\n\n1.1.3 Linux\n# Ubuntu/Debian (uses APT package manager)\nsudo apt update                      # Update package list\nsudo apt install python3.12 python3.12-venv  # Install Python + virtual env support\n\n# Fedora (uses DNF package manager)\nsudo dnf install python3.12\n\n# Arch Linux (uses Pacman package manager)\nsudo pacman -S python               # Always installs latest Python\nWhat these commands do: Each Linux distribution uses a different package manager, but they all do the same thing - download, install, and configure Python. The sudo command gives administrator privileges needed to install system-wide packages. We also install python3.12-venv on Ubuntu/Debian to enable virtual environments (isolated Python environments for each project).",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Environment Setup</span>"
    ]
  },
  {
    "objectID": "book/01-setup.html#environment-managers",
    "href": "book/01-setup.html#environment-managers",
    "title": "1  Environment Setup",
    "section": "1.2 Environment Managers",
    "text": "1.2 Environment Managers\nEnvironment managers solve a crucial problem: different Python projects need different packages and versions. Without proper management, you might install packages globally and create conflicts between projects. Environment managers create isolated “bubbles” for each project with its own dependencies.\n\n1.2.1 uv (Recommended)\nuv is the fastest Python package manager and environment tool, written in Rust for maximum performance. It’s like having a Ferrari instead of a bicycle for package management - dramatically faster installation and resolution of dependencies.\n\n1.2.1.1 Installation\n# Linux/macOS (downloads and runs installer script)\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows (PowerShell installer)\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\nWhat these commands do: These are one-liner installers that download and install uv automatically. The curl command downloads the installer script and | sh pipes it directly to the shell for execution. On Windows, irm (Invoke-RestMethod) downloads the PowerShell script and iex (Invoke-Expression) executes it.\n\n\n1.2.1.2 Usage\n# Create project (sets up directory structure with pyproject.toml)\nuv init my-project\ncd my-project\n\n# Create virtual environment (isolated Python environment)\nuv venv\n\n# Add packages (installs and records in pyproject.toml)\nuv add requests pandas\n\n# Run commands (automatically uses the virtual environment)\nuv run python script.py\nuv run pytest\nStep-by-step explanation: 1. uv init creates a new project directory with a pyproject.toml file (like a recipe for your project) 2. uv venv creates an isolated environment so packages don’t interfere with other projects 3. uv add installs packages AND records them in pyproject.toml for reproducibility 4. uv run automatically activates the virtual environment and runs your commands\n\n\n\n1.2.2 Poetry (Alternative)\nPoetry provides dependency management and packaging with a focus on deterministic builds. It’s like a master chef who not only cooks but also writes down exact recipes so anyone can recreate the same dish perfectly.\n\n1.2.2.1 Installation\n# Download and install Poetry (official installer)\ncurl -sSL https://install.python-poetry.org | python3 -\nWhat this does: Downloads Poetry’s official installer and runs it with Python. Poetry installs itself in an isolated environment to avoid conflicts with your projects.\n\n\n1.2.2.2 Usage\n# Create project (creates full package structure)\npoetry new my-project\ncd my-project\n\n# Add dependencies (automatically creates virtual environment)\npoetry add requests pandas\n\n# Install dependencies (from pyproject.toml)\npoetry install\n\n# Run commands (in isolated environment)\npoetry run python script.py\nKey difference from uv: Poetry focuses more on packaging and publishing libraries, while uv is optimized for speed and simplicity. Choose Poetry if you plan to publish packages to PyPI.\n\n\n\n1.2.3 Miniforge (For Data Science)\nMiniforge provides conda with conda-forge as default channel. It’s specifically designed for data science workflows where you need complex dependencies like NumPy, SciPy, and machine learning libraries that have C/C++ components.\n\n1.2.3.1 Installation\n# Download from https://github.com/conda-forge/miniforge\n# Run installer script (Linux example)\nbash Miniforge3-Linux-x86_64.sh\nWhy Miniforge: Unlike pip, conda can install non-Python dependencies (like CUDA for GPU computing). It’s essential for data science because many libraries depend on optimized C/Fortran code that pip can’t handle.\n\n\n1.2.3.2 Usage\n# Create environment (isolated conda environment)\nconda create -n myenv python=3.12\nconda activate myenv                    # Activate environment\n\n# Install packages (with optimized binaries)\nconda install pandas numpy matplotlib\nEnvironment workflow: Unlike pip environments, conda environments are completely isolated, including the Python interpreter itself. This prevents many compatibility issues with data science libraries.",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Environment Setup</span>"
    ]
  },
  {
    "objectID": "book/01-setup.html#exercises",
    "href": "book/01-setup.html#exercises",
    "title": "1  Environment Setup",
    "section": "1.3 Exercises",
    "text": "1.3 Exercises\n\nInstall Python 3.12 on your system - Verify with python --version\nInstall uv and create a test project - Practice the complete workflow\nCreate virtual environment and add pandas - Learn dependency isolation\nRun simple Python script using uv run - Experience the development workflow\n\nLearning goals: By completing these exercises, you’ll understand the foundation of modern Python development: isolated environments, dependency management, and reproducible project setup.",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Environment Setup</span>"
    ]
  },
  {
    "objectID": "book/01-setup.html#next-steps",
    "href": "book/01-setup.html#next-steps",
    "title": "1  Environment Setup",
    "section": "1.4 Next Steps",
    "text": "1.4 Next Steps\nNow that your environment is ready, let’s learn about Git and GitHub for version control.",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Environment Setup</span>"
    ]
  },
  {
    "objectID": "book/02-git-github.html",
    "href": "book/02-git-github.html",
    "title": "2  Git and GitHub",
    "section": "",
    "text": "2.1 What is Git?\nGit is essential for tracking code changes and collaborating with others. Think of Git as a sophisticated “undo” system that remembers every change you’ve ever made to your code, allowing you to travel back in time or collaborate with others without losing work. We’ll use Git throughout this tutorial.\nGit is a distributed version control system that acts like a time machine for your code: - Tracks changes - Every modification is recorded with who, what, and when - Allows reverting - Go back to any previous version instantly - Enables collaboration - Multiple people can work on the same project simultaneously - Keeps complete history - Never lose work, always see what changed\nReal-world analogy: Git is like Google Docs’ version history, but for code. You can see every change, who made it, and why.",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "book/02-git-github.html#installing-git",
    "href": "book/02-git-github.html#installing-git",
    "title": "2  Git and GitHub",
    "section": "2.2 Installing Git",
    "text": "2.2 Installing Git\n\n2.2.1 Windows\n# Using winget\nwinget install Git.Git\n\n# Using chocolatey\nchoco install git\n\n\n2.2.2 macOS\n# Using Homebrew\nbrew install git\n\n# Using Xcode Command Line Tools\nxcode-select --install\n\n\n2.2.3 Linux\n# Ubuntu/Debian\nsudo apt install git\n\n# Fedora\nsudo dnf install git\n\n# Arch Linux\nsudo pacman -S git",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "book/02-git-github.html#basic-git-configuration",
    "href": "book/02-git-github.html#basic-git-configuration",
    "title": "2  Git and GitHub",
    "section": "2.3 Basic Git Configuration",
    "text": "2.3 Basic Git Configuration\nSet up your identity so Git knows who makes each change:\n# Set your name (appears in commit history)\ngit config --global user.name \"Your Name\"\n# Set your email (links commits to your GitHub account)\ngit config --global user.email \"your.email@example.com\"\n# Set default branch name to 'main' (modern standard)\ngit config --global init.defaultBranch main\nWhy this matters: Every Git commit includes author information. This helps track who made what changes and enables proper attribution in team projects.",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "book/02-git-github.html#essential-git-commands",
    "href": "book/02-git-github.html#essential-git-commands",
    "title": "2  Git and GitHub",
    "section": "2.4 Essential Git Commands",
    "text": "2.4 Essential Git Commands\n\n2.4.1 Repository Initialization\n# Create new repository (turns current folder into Git repo)\ngit init\n\n# Clone existing repository (downloads entire project + history)\ngit clone https://github.com/user/repo.git\nWhat happens: git init creates a hidden .git folder that stores all version history. git clone downloads a complete copy of someone else’s repository, including all commits and branches.\n\n\n2.4.2 Basic Workflow\n# Check status (see what files changed)\ngit status\n\n# Add files to staging (prepare for commit)\ngit add filename.py           # Add specific file\ngit add .                     # Add all changed files\n\n# Commit changes (save snapshot with message)\ngit commit -m \"Add new feature\"\n\n# View history (see all previous commits)\ngit log --oneline\nThe Git workflow explained: 1. Working Directory - Where you edit files 2. Staging Area - Files prepared for commit (like a shopping cart) 3. Repository - Permanent storage of commits (like purchase history)\nThink of it as: edit → stage → commit → repeat\n\n\n2.4.3 Branching\n# Create new branch (alternative timeline)\ngit branch feature-name\ngit checkout feature-name     # Switch to new branch\n# Or in one command:\ngit checkout -b feature-name  # Create and switch simultaneously\n\n# Switch branches (change timeline)\ngit checkout main\n\n# Merge branch (combine timelines)\ngit checkout main             # Go to main branch\ngit merge feature-name        # Bring changes from feature branch\n\n# Delete branch (clean up)\ngit branch -d feature-name\nBranching explained: Branches are like parallel universes where you can experiment without affecting the main codebase. You can switch between branches instantly and merge successful experiments back to main.",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "book/02-git-github.html#github-essentials",
    "href": "book/02-git-github.html#github-essentials",
    "title": "2  Git and GitHub",
    "section": "2.5 GitHub Essentials",
    "text": "2.5 GitHub Essentials\nGitHub hosts Git repositories in the cloud and adds collaboration features. Think of GitHub as a social network for code - it stores your projects online and provides tools for collaboration, issue tracking, and project management.\n\n2.5.1 Creating a Repository\n\nGo to github.com\nClick “New repository”\nChoose repository name\nAdd description\nChoose public/private\nAdd README, .gitignore, license\n\n\n\n2.5.2 Connecting Local to Remote\n# Add remote origin\ngit remote add origin https://github.com/username/repo.git\n\n# Push to GitHub\ngit push -u origin main\n\n# Pull changes\ngit pull origin main\n\n\n2.5.3 GitHub Workflow\n# 1. Create feature branch\ngit checkout -b feature/new-functionality\n\n# 2. Make changes and commit\ngit add .\ngit commit -m \"feat: add new functionality\"\n\n# 3. Push branch\ngit push origin feature/new-functionality\n\n# 4. Create Pull Request on GitHub\n# 5. Review and merge\n# 6. Delete feature branch\ngit checkout main\ngit pull origin main\ngit branch -d feature/new-functionality",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "book/02-git-github.html#python-specific-git-practices",
    "href": "book/02-git-github.html#python-specific-git-practices",
    "title": "2  Git and GitHub",
    "section": "2.6 Python-Specific Git Practices",
    "text": "2.6 Python-Specific Git Practices\n\n2.6.1 .gitignore for Python\nCreate .gitignore file:\n# Python\n__pycache__/\n*.py[cod]\n*$py.class\n*.so\n.Python\nenv/\nvenv/\n.venv/\n.ENV/\n\n# IDEs\n.vscode/\n.idea/\n*.swp\n*.swo\n\n# OS\n.DS_Store\nThumbs.db\n\n# Project specific\ndocs/\n.pytest_cache/\n\n\n2.6.2 Commit Message Conventions\nUse clear, descriptive commit messages:\n# Good\ngit commit -m \"feat: add user authentication system\"\ngit commit -m \"fix: resolve login validation bug\"\ngit commit -m \"docs: update API documentation\"\n\n# Bad\ngit commit -m \"update stuff\"\ngit commit -m \"fix bug\"\ngit commit -m \"changes\"\n\n\n2.6.3 Common Prefixes:\n\nfeat: - New feature\nfix: - Bug fix\ndocs: - Documentation\nstyle: - Code formatting\nrefactor: - Code restructuring\ntest: - Adding tests\nchore: - Maintenance tasks",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "book/02-git-github.html#practical-exercise",
    "href": "book/02-git-github.html#practical-exercise",
    "title": "2  Git and GitHub",
    "section": "2.7 Practical Exercise",
    "text": "2.7 Practical Exercise\nLet’s practice with a real Python project:\n# Create a simple calculator\n# File: calculator.py\n\ndef add(a: float, b: float) -&gt; float:\n    \"\"\"Add two numbers.\"\"\"\n    return a + b\n\ndef subtract(a: float, b: float) -&gt; float:\n    \"\"\"Subtract b from a.\"\"\"\n    return a - b\n\ndef multiply(a: float, b: float) -&gt; float:\n    \"\"\"Multiply two numbers.\"\"\"\n    return a * b\n\ndef divide(a: float, b: float) -&gt; float:\n    \"\"\"Divide a by b.\"\"\"\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return a / b\n\nif __name__ == \"__main__\":\n    print(\"Calculator Demo\")\n    print(f\"5 + 3 = {add(5, 3)}\")\n    print(f\"5 - 3 = {subtract(5, 3)}\")\n    print(f\"5 * 3 = {multiply(5, 3)}\")\n    print(f\"5 / 3 = {divide(5, 3):.2f}\")\n\n2.7.1 Exercise Steps\n\nInitialize repository:\nmkdir python-calculator\ncd python-calculator\ngit init\nCreate calculator.py with the code above\nAdd and commit:\ngit add calculator.py\ngit commit -m \"feat: add basic calculator functions\"\nCreate GitHub repository and push:\ngit remote add origin https://github.com/yourusername/python-calculator.git\ngit push -u origin main\nAdd a feature (create new branch):\ngit checkout -b feature/power-function\nAdd power function to calculator.py:\ndef power(a: float, b: float) -&gt; float:\n    \"\"\"Raise a to the power of b.\"\"\"\n    return a ** b\nCommit and push:\ngit add calculator.py\ngit commit -m \"feat: add power function\"\ngit push origin feature/power-function\nCreate Pull Request on GitHub",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "book/02-git-github.html#git-best-practices",
    "href": "book/02-git-github.html#git-best-practices",
    "title": "2  Git and GitHub",
    "section": "2.8 Git Best Practices",
    "text": "2.8 Git Best Practices\n\nCommit often - Small, logical commits\nWrite clear messages - Explain what and why\nUse branches - Keep main branch stable\nReview before merging - Use pull requests\nKeep history clean - Avoid unnecessary merge commits\nBackup regularly - Push to remote frequently",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "book/02-git-github.html#troubleshooting-common-issues",
    "href": "book/02-git-github.html#troubleshooting-common-issues",
    "title": "2  Git and GitHub",
    "section": "2.9 Troubleshooting Common Issues",
    "text": "2.9 Troubleshooting Common Issues\n\n2.9.1 Undoing Changes\n# Undo unstaged changes\ngit checkout -- filename.py\n\n# Undo staged changes\ngit reset HEAD filename.py\n\n# Undo last commit (keep changes)\ngit reset --soft HEAD~1\n\n# Undo last commit (discard changes)\ngit reset --hard HEAD~1\n\n\n2.9.2 Resolving Conflicts\nWhen Git can’t automatically merge:\n\nOpen conflicted files\nLook for conflict markers: &lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;\nEdit to resolve conflicts\nRemove conflict markers\nAdd and commit resolved files",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "book/02-git-github.html#next-steps",
    "href": "book/02-git-github.html#next-steps",
    "title": "2  Git and GitHub",
    "section": "2.10 Next Steps",
    "text": "2.10 Next Steps\nNow that you understand Git and GitHub, let’s dive into Python Syntax and start coding!",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "book/02-git-github.html#resources",
    "href": "book/02-git-github.html#resources",
    "title": "2  Git and GitHub",
    "section": "2.11 Resources",
    "text": "2.11 Resources\n\nGit Documentation\nGitHub Guides\nInteractive Git Tutorial",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html",
    "href": "book/03-syntax.html",
    "title": "3  Python Syntax and Basics",
    "section": "",
    "text": "3.1 Your First Python Program\nPython’s clean, readable syntax makes it perfect for beginners while remaining powerful for experts. Unlike many programming languages that use curly braces {} and semicolons ;, Python uses indentation to structure code, making it look almost like plain English.\nprint(\"Hello, Python!\")\nprint(\"Welcome to interactive Python learning!\")\n\n# Try changing this message and run the code\nyour_name = \"Student\"  # Change this to your name!\nprint(f\"Hello, {your_name}! Ready to learn Python?\")\nThis simple example demonstrates Python’s philosophy: code should be readable and straightforward. Let’s break down what happens:\nTry editing the code above - change your_name to your actual name and run it again!",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#your-first-python-program",
    "href": "book/03-syntax.html#your-first-python-program",
    "title": "3  Python Syntax and Basics",
    "section": "",
    "text": "print() - A built-in function that displays text on screen\n\"Hello, Python!\" - A string (text) enclosed in quotes\nyour_name = \"Student\" - Variable assignment (storing data with a name)\nf\"Hello, {your_name}!\" - An f-string (formatted string) that inserts variables into text",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#test-file-upload",
    "href": "book/03-syntax.html#test-file-upload",
    "title": "3  Python Syntax and Basics",
    "section": "3.2 Test File Upload",
    "text": "3.2 Test File Upload\n\n\n\n\n\n\n📁 Test Drag and Drop\n\n\n\nTry dragging a small text file here to test the upload functionality:\n\n\n\n\n\ntest.txt\n\n# Drag and drop a text file here\nimport os\n\ntry:\n    if os.path.exists('test.txt'):\n        with open('test.txt', 'r') as f:\n            content = f.read()\n        print(f\"File uploaded successfully!\")\n        print(f\"Content length: {len(content)} characters\")\n        print(f\"First 100 characters: {content[:100]}\")\n    else:\n        print(\"No file uploaded yet. Drag a text file to this area!\")\nexcept Exception as e:\n    print(f\"Error reading file: {e}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#python-philosophy---the-zen-of-python",
    "href": "book/03-syntax.html#python-philosophy---the-zen-of-python",
    "title": "3  Python Syntax and Basics",
    "section": "3.3 Python Philosophy - The Zen of Python",
    "text": "3.3 Python Philosophy - The Zen of Python\n\nimport this",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#variables-and-assignment",
    "href": "book/03-syntax.html#variables-and-assignment",
    "title": "3  Python Syntax and Basics",
    "section": "3.4 Variables and Assignment",
    "text": "3.4 Variables and Assignment\nPython uses dynamic typing - you don’t need to declare variable types. Think of variables as labeled boxes where you can store different types of data. Python automatically figures out what type of data you’re storing.\n\n# Different data types - Python automatically determines the type\nname = \"Alice\"          # String (text data)\nage = 25               # Integer (whole numbers)\nheight = 5.6           # Float (decimal numbers)\nis_student = True      # Boolean (True/False values)\n\n# Display the values and their types\nprint(f\"Name: {name} (type: {type(name).__name__})\")\nprint(f\"Age: {age} (type: {type(age).__name__})\")\nprint(f\"Height: {height} (type: {type(height).__name__})\")\nprint(f\"Student: {is_student} (type: {type(is_student).__name__})\")\n\nWhat happens here: The = operator assigns values to variables. Python looks at the value and automatically determines its type - no need to explicitly declare “this is a string” like in other languages.\n\n3.4.1 Variable Naming Rules\n\n# Valid variable names\nfirst_name = \"John\"\nlast_name = \"Doe\"\nage_2024 = 30\n_private_var = \"hidden\"\n\n# Invalid names (would cause errors):\n# 2name = \"invalid\"     # Can't start with number\n# first-name = \"invalid\" # Can't use hyphens\n# class = \"invalid\"     # Can't use keywords\n\nprint(f\"Full name: {first_name} {last_name}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#comments",
    "href": "book/03-syntax.html#comments",
    "title": "3  Python Syntax and Basics",
    "section": "3.5 Comments",
    "text": "3.5 Comments\nComments make your code readable:\n\n# This is a single-line comment\nprint(\"Hello\")  # Comment at end of line\n\n\"\"\"\nThis is a multi-line comment\nor docstring. Use for longer\nexplanations.\n\"\"\"\n\ndef greet(name):\n    \"\"\"\n    This is a docstring for the function.\n    It explains what the function does.\n    \"\"\"\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Python\"))",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#basic-data-types",
    "href": "book/03-syntax.html#basic-data-types",
    "title": "3  Python Syntax and Basics",
    "section": "3.6 Basic Data Types",
    "text": "3.6 Basic Data Types\n\n3.6.1 Numbers\n\n# Integers\ncount = 42\nnegative = -17\n\n# Floats\nprice = 19.99\nscientific = 1.5e-4  # 0.00015\n\n# Complex numbers\ncomplex_num = 3 + 4j\n\nprint(f\"Integer: {count}\")\nprint(f\"Float: {price}\")\nprint(f\"Scientific: {scientific}\")\nprint(f\"Complex: {complex_num}\")\n\n\n\n3.6.2 Strings\n\n# Different ways to create strings\nsingle_quotes = 'Hello'\ndouble_quotes = \"World\"\ntriple_quotes = \"\"\"This is a\nmulti-line string\"\"\"\n\n# String concatenation\ngreeting = single_quotes + \" \" + double_quotes\nprint(greeting)\n\n# String formatting\nname = \"Python\"\nversion = 3.12\n\n# f-strings (recommended)\nmessage = f\"Welcome to {name} {version}!\"\nprint(message)\n\n# format() method\nmessage2 = \"Welcome to {} {}!\".format(name, version)\nprint(message2)\n\n# % formatting (older style)\nmessage3 = \"Welcome to %s %.1f!\" % (name, version)\nprint(message3)\n\n\n\n3.6.3 String Operations\n\ntext = \"Python Programming\"\n\n# Length\nprint(f\"Length: {len(text)}\")\n\n# Case methods\nprint(f\"Upper: {text.upper()}\")\nprint(f\"Lower: {text.lower()}\")\nprint(f\"Title: {text.title()}\")\n\n# String methods\nprint(f\"Starts with 'Python': {text.startswith('Python')}\")\nprint(f\"Contains 'gram': {'gram' in text}\")\nprint(f\"Replace: {text.replace('Python', 'Java')}\")\n\n# Slicing\nprint(f\"First 6 chars: {text[:6]}\")\nprint(f\"Last 11 chars: {text[7:]}\")\nprint(f\"Every 2nd char: {text[::2]}\")\n\n\n\n3.6.4 Booleans\n\n# Boolean values\nis_python_fun = True\nis_difficult = False\n\n# Boolean operations\nprint(f\"AND: {is_python_fun and is_difficult}\")\nprint(f\"OR: {is_python_fun or is_difficult}\")\nprint(f\"NOT: {not is_difficult}\")\n\n# Truthiness - what counts as True/False\nprint(f\"Empty string: {bool('')}\")        # False\nprint(f\"Non-empty string: {bool('hello')}\") # True\nprint(f\"Zero: {bool(0)}\")                  # False\nprint(f\"Non-zero: {bool(42)}\")             # True\nprint(f\"Empty list: {bool([])}\")           # False\nprint(f\"Non-empty list: {bool([1, 2])}\")   # True",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#operators",
    "href": "book/03-syntax.html#operators",
    "title": "3  Python Syntax and Basics",
    "section": "3.7 Operators",
    "text": "3.7 Operators\n\n3.7.1 Arithmetic Operators\n\na, b = 10, 3\n\nprint(f\"Addition: {a} + {b} = {a + b}\")\nprint(f\"Subtraction: {a} - {b} = {a - b}\")\nprint(f\"Multiplication: {a} * {b} = {a * b}\")\nprint(f\"Division: {a} / {b} = {a / b}\")\nprint(f\"Floor division: {a} // {b} = {a // b}\")\nprint(f\"Modulus: {a} % {b} = {a % b}\")\nprint(f\"Exponentiation: {a} ** {b} = {a ** b}\")\n\n\n\n3.7.2 Comparison Operators\n\nx, y = 5, 10\n\nprint(f\"{x} == {y}: {x == y}\")   # Equal\nprint(f\"{x} != {y}: {x != y}\")   # Not equal\nprint(f\"{x} &lt; {y}: {x &lt; y}\")     # Less than\nprint(f\"{x} &gt; {y}: {x &gt; y}\")     # Greater than\nprint(f\"{x} &lt;= {y}: {x &lt;= y}\")   # Less than or equal\nprint(f\"{x} &gt;= {y}: {x &gt;= y}\")   # Greater than or equal\n\n\n\n3.7.3 Assignment Operators\n\nnum = 10\nprint(f\"Initial: {num}\")\n\nnum += 5    # num = num + 5\nprint(f\"After +=5: {num}\")\n\nnum -= 3    # num = num - 3\nprint(f\"After -=3: {num}\")\n\nnum *= 2    # num = num * 2\nprint(f\"After *=2: {num}\")\n\nnum //= 3   # num = num // 3\nprint(f\"After //=3: {num}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#input-and-output",
    "href": "book/03-syntax.html#input-and-output",
    "title": "3  Python Syntax and Basics",
    "section": "3.8 Input and Output",
    "text": "3.8 Input and Output\n\n3.8.1 Getting User Input\n\n# Note: input() always returns a string\n# name = input(\"What's your name? \")\n# print(f\"Hello, {name}!\")\n\n# For numbers, convert the input\n# age_str = input(\"How old are you? \")\n# age = int(age_str)\n# print(f\"You are {age} years old\")\n\n# Or in one line:\n# age = int(input(\"How old are you? \"))\n\n# For demonstration, we'll simulate input:\nname = \"Alice\"  # Simulating user input\nage = 25       # Simulating user input\n\nprint(f\"Hello, {name}!\")\nprint(f\"You are {age} years old\")\n\n\n\n3.8.2 Output Formatting\n\nimport math\n\n# Basic print\nprint(\"Simple output\")\n\n# Multiple values\nprint(\"Multiple\", \"values\", \"in\", \"one\", \"print\")\n\n# Custom separator and end\nprint(\"A\", \"B\", \"C\", sep=\"-\")\nprint(\"No newline\", end=\" \")\nprint(\"continues here\")\n\n# Formatting numbers\npi = math.pi\nprint(f\"Pi: {pi}\")\nprint(f\"Pi (2 decimals): {pi:.2f}\")\nprint(f\"Pi (scientific): {pi:.2e}\")\n\n# Formatting with padding\nnumber = 42\nprint(f\"Right aligned: {number:&gt;10}\")\nprint(f\"Left aligned: {number:&lt;10}\")\nprint(f\"Center aligned: {number:^10}\")\nprint(f\"Zero padded: {number:05}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#indentation-and-code-structure",
    "href": "book/03-syntax.html#indentation-and-code-structure",
    "title": "3  Python Syntax and Basics",
    "section": "3.9 Indentation and Code Structure",
    "text": "3.9 Indentation and Code Structure\nPython uses indentation to define code blocks:\n\n# Correct indentation\nage = 18\nif age &gt;= 18:\n    print(\"You are an adult\")\n    print(\"You can vote\")\nelse:\n    print(\"You are a minor\")\n    print(\"You cannot vote yet\")\n\nprint(\"This is outside the if statement\")\n\n\n3.9.1 Common Indentation Mistakes\n# Wrong - inconsistent indentation (would cause IndentationError)\nif True:\n    print(\"This is indented with 4 spaces\")\n        print(\"This is indented with 8 spaces\")  # Error!\n\n# Wrong - missing indentation (would cause IndentationError)\nif True:\nprint(\"This should be indented\")  # Error!\n\n# Right - consistent indentation\nif True:\n    print(\"This is correctly indented\")\n    print(\"This too\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#exercises",
    "href": "book/03-syntax.html#exercises",
    "title": "3  Python Syntax and Basics",
    "section": "3.10 Exercises",
    "text": "3.10 Exercises\n\n3.10.1 Exercise 1: Variables and Strings\nCreate variables for your personal information and display them nicely:\n\n# Your solution here\nfirst_name = \"John\"\nlast_name = \"Doe\"\nage = 30\ncity = \"New York\"\nhobby = \"programming\"\n\n# Display information\nprint(\"=== Personal Information ===\")\nprint(f\"Name: {first_name} {last_name}\")\nprint(f\"Age: {age} years old\")\nprint(f\"City: {city}\")\nprint(f\"Hobby: {hobby}\")\nprint(\"=\"*30)\n\n\n\n3.10.2 Exercise 2: Calculator\nCreate a simple calculator:\n\n# Calculator exercise\nnum1 = 15\nnum2 = 4\n\nprint(f\"Number 1: {num1}\")\nprint(f\"Number 2: {num2}\")\nprint(\"-\" * 20)\nprint(f\"Addition: {num1} + {num2} = {num1 + num2}\")\nprint(f\"Subtraction: {num1} - {num2} = {num1 - num2}\")\nprint(f\"Multiplication: {num1} × {num2} = {num1 * num2}\")\nprint(f\"Division: {num1} ÷ {num2} = {num1 / num2:.2f}\")\nprint(f\"Power: {num1}^{num2} = {num1 ** num2}\")\n\n\n\n3.10.3 Exercise 3: String Manipulation\nWork with string methods:\n\n# String manipulation exercise\nsentence = \"python is an amazing programming language\"\n\nprint(f\"Original: {sentence}\")\nprint(f\"Length: {len(sentence)} characters\")\nprint(f\"Words: {sentence.count(' ') + 1}\")\nprint(f\"Title case: {sentence.title()}\")\nprint(f\"Upper case: {sentence.upper()}\")\nprint(f\"Capitalize: {sentence.capitalize()}\")\nprint(f\"Replace 'python' with 'Python': {sentence.replace('python', 'Python')}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#common-pitfalls",
    "href": "book/03-syntax.html#common-pitfalls",
    "title": "3  Python Syntax and Basics",
    "section": "3.11 Common Pitfalls",
    "text": "3.11 Common Pitfalls\n\nIndentation errors - Use consistent spaces (4 spaces recommended)\nVariable naming - Use descriptive names, follow conventions\nString vs numbers - Remember input() returns strings\nCase sensitivity - Name and name are different variables",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#best-practices",
    "href": "book/03-syntax.html#best-practices",
    "title": "3  Python Syntax and Basics",
    "section": "3.12 Best Practices",
    "text": "3.12 Best Practices\n\nUse descriptive variable names:\n# Bad\nx = 25\n\n# Good\nstudent_age = 25\nFollow PEP 8 naming conventions:\n# Variables and functions: snake_case\nuser_name = \"Alice\"\n\n# Constants: UPPER_CASE\nMAX_ATTEMPTS = 3\n\n# Classes: PascalCase (we'll learn later)\n# UserAccount\nUse f-strings for formatting (Python 3.6+)\nAdd comments for complex logic\nKeep lines under 80 characters when possible",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#quiz",
    "href": "book/03-syntax.html#quiz",
    "title": "3  Python Syntax and Basics",
    "section": "3.13 Quiz",
    "text": "3.13 Quiz\nTest your understanding:\n\nWhat will print(type(5)) output?\nWhat’s the difference between 'hello' and \"hello\"?\nWhat happens if you add a string and a number?\nHow do you create a multi-line string?\nWhat’s the result of 10 // 3?\n\n\n3.13.1 Answers\n\n&lt;class 'int'&gt;\nNo difference - both create strings\nTypeError - you need to convert one to match the other\nUse triple quotes: \"\"\" or '''\n3 (floor division)",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/03-syntax.html#next-steps",
    "href": "book/03-syntax.html#next-steps",
    "title": "3  Python Syntax and Basics",
    "section": "3.14 Next Steps",
    "text": "3.14 Next Steps\nGreat! You’ve learned Python basics. Next, we’ll explore Data Types and Collections to handle more complex data.",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Syntax and Basics</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html",
    "href": "book/04-data-types.html",
    "title": "4  Data Types and Collections",
    "section": "",
    "text": "4.1 Lists - Ordered Collections\nPython provides powerful built-in data structures to organize and manipulate data efficiently.\nLists are mutable sequences that can hold different data types:\n# Creating lists\nfruits = [\"apple\", \"banana\", \"cherry\"]\nnumbers = [1, 2, 3, 4, 5]\nmixed = [\"hello\", 42, 3.14, True]\n\nprint(\"Fruits:\", fruits)\nprint(\"Numbers:\", numbers)\nprint(\"Mixed types:\", mixed)\n\n# Interactive challenge: Add your favorite fruit to the list!\nfruits.append(\"mango\")  # Try changing this to your favorite fruit\nprint(\"Updated fruits:\", fruits)",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html#lists---ordered-collections",
    "href": "book/04-data-types.html#lists---ordered-collections",
    "title": "4  Data Types and Collections",
    "section": "",
    "text": "🎮 Try It Yourself\n\n\n\nThe code above is fully interactive! Try: 1. Add your favorite fruit to the fruits list 2. Add more numbers to the numbers list\n3. Create your own mixed list with different data types\n\n\n\n4.1.1 List Operations\n\ncolors = [\"red\", \"green\", \"blue\"]\n\n# Accessing elements (0-indexed)\nprint(f\"First color: {colors[0]}\")\nprint(f\"Last color: {colors[-1]}\")\n\n# Adding elements\ncolors.append(\"yellow\")           # Add to end\ncolors.insert(1, \"purple\")        # Insert at position\nprint(f\"After adding: {colors}\")\n\n# Removing elements\ncolors.remove(\"purple\")           # Remove by value\nlast_color = colors.pop()         # Remove and return last\nprint(f\"After removing: {colors}\")\nprint(f\"Removed color: {last_color}\")\n\n\n\n4.1.2 List Methods and Properties\n\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6]\n\nprint(f\"Original: {numbers}\")\nprint(f\"Length: {len(numbers)}\")\nprint(f\"Count of 1: {numbers.count(1)}\")\nprint(f\"Index of 4: {numbers.index(4)}\")\n\n# Sorting\nnumbers.sort()\nprint(f\"Sorted: {numbers}\")\n\n# Reversing\nnumbers.reverse()\nprint(f\"Reversed: {numbers}\")\n\n# List comprehension (preview)\nsquares = [x**2 for x in range(1, 6)]\nprint(f\"Squares: {squares}\")\n\n\n\n4.1.3 List Slicing\n\nletters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\nprint(f\"Original: {letters}\")\nprint(f\"First 3: {letters[:3]}\")\nprint(f\"Last 3: {letters[-3:]}\")\nprint(f\"Middle: {letters[2:5]}\")\nprint(f\"Every 2nd: {letters[::2]}\")\nprint(f\"Reverse: {letters[::-1]}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html#tuples---immutable-sequences",
    "href": "book/04-data-types.html#tuples---immutable-sequences",
    "title": "4  Data Types and Collections",
    "section": "4.2 Tuples - Immutable Sequences",
    "text": "4.2 Tuples - Immutable Sequences\nTuples are immutable sequences, perfect for fixed data:\n\n# Creating tuples\npoint = (10, 20)\nrgb_color = (255, 128, 0)\nperson = (\"Alice\", 25, \"Engineer\")\n\nprint(f\"Point coordinates: {point}\")\nprint(f\"RGB color: {rgb_color}\")\nprint(f\"Person info: {person}\")\n\n# Accessing elements\nprint(f\"X coordinate: {point[0]}\")\nprint(f\"Y coordinate: {point[1]}\")\n\n# Tuple unpacking\nname, age, job = person\nprint(f\"Name: {name}, Age: {age}, Job: {job}\")\n\n\n4.2.1 Tuple Methods\n\ngrades = (85, 92, 78, 92, 88, 92)\n\nprint(f\"Grades: {grades}\")\nprint(f\"Count of 92: {grades.count(92)}\")\nprint(f\"Index of 78: {grades.index(78)}\")\nprint(f\"Length: {len(grades)}\")\n\n# Converting between lists and tuples\ngrades_list = list(grades)\nprint(f\"As list: {grades_list}\")\n\nnew_tuple = tuple([1, 2, 3, 4])\nprint(f\"From list: {new_tuple}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html#dictionaries---key-value-pairs",
    "href": "book/04-data-types.html#dictionaries---key-value-pairs",
    "title": "4  Data Types and Collections",
    "section": "4.3 Dictionaries - Key-Value Pairs",
    "text": "4.3 Dictionaries - Key-Value Pairs\nDictionaries store data as key-value pairs:\n\n# Creating dictionaries\nstudent = {\n    \"name\": \"Alice\",\n    \"age\": 20,\n    \"major\": \"Computer Science\",\n    \"gpa\": 3.8\n}\n\nprint(\"Student info:\", student)\n\n# Accessing values\nprint(f\"Name: {student['name']}\")\nprint(f\"GPA: {student.get('gpa', 'Not found')}\")\n\n# Adding/updating values\nstudent[\"graduation_year\"] = 2025\nstudent[\"age\"] = 21\nprint(\"Updated:\", student)\n\n\n4.3.1 Dictionary Methods\n\ninventory = {\n    \"apples\": 50,\n    \"bananas\": 30,\n    \"oranges\": 25\n}\n\nprint(\"Inventory:\", inventory)\n\n# Dictionary methods\nprint(\"Keys:\", list(inventory.keys()))\nprint(\"Values:\", list(inventory.values()))\nprint(\"Items:\", list(inventory.items()))\n\n# Checking existence\nprint(\"Has apples:\", \"apples\" in inventory)\nprint(\"Has grapes:\", \"grapes\" in inventory)\n\n# Safe removal\nremoved = inventory.pop(\"bananas\", 0)\nprint(f\"Removed {removed} bananas\")\nprint(\"After removal:\", inventory)\n\n\n\n4.3.2 Dictionary Iteration\n\nscores = {\"Alice\": 95, \"Bob\": 87, \"Charlie\": 92}\n\n# Iterate over keys\nprint(\"Students:\")\nfor name in scores:\n    print(f\"  {name}\")\n\n# Iterate over values\nprint(\"Scores:\")\nfor score in scores.values():\n    print(f\"  {score}\")\n\n# Iterate over key-value pairs\nprint(\"Student scores:\")\nfor name, score in scores.items():\n    print(f\"  {name}: {score}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html#sets---unique-collections",
    "href": "book/04-data-types.html#sets---unique-collections",
    "title": "4  Data Types and Collections",
    "section": "4.4 Sets - Unique Collections",
    "text": "4.4 Sets - Unique Collections\nSets store unique elements and support mathematical operations:\n\n# Creating sets\nfruits = {\"apple\", \"banana\", \"cherry\"}\nnumbers = {1, 2, 3, 4, 5}\nmixed_set = {1, \"hello\", 3.14}\n\nprint(\"Fruits set:\", fruits)\nprint(\"Numbers set:\", numbers)\n\n# Adding elements\nfruits.add(\"orange\")\nprint(\"After adding orange:\", fruits)\n\n# Removing elements\nfruits.discard(\"banana\")  # Safe removal\nprint(\"After removing banana:\", fruits)\n\n\n4.4.1 Set Operations\n\nset_a = {1, 2, 3, 4, 5}\nset_b = {4, 5, 6, 7, 8}\n\nprint(f\"Set A: {set_a}\")\nprint(f\"Set B: {set_b}\")\n\n# Mathematical operations\nprint(f\"Union (A ∪ B): {set_a | set_b}\")\nprint(f\"Intersection (A ∩ B): {set_a & set_b}\")\nprint(f\"Difference (A - B): {set_a - set_b}\")\nprint(f\"Symmetric difference: {set_a ^ set_b}\")\n\n# Membership testing\nprint(f\"3 in A: {3 in set_a}\")\nprint(f\"Is A subset of B: {set_a.issubset(set_b)}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html#choosing-the-right-data-structure",
    "href": "book/04-data-types.html#choosing-the-right-data-structure",
    "title": "4  Data Types and Collections",
    "section": "4.5 Choosing the Right Data Structure",
    "text": "4.5 Choosing the Right Data Structure\n\n\n\nData Structure\nUse When\nExample\n\n\n\n\nList\nOrdered, mutable collection\nShopping list, scores\n\n\nTuple\nOrdered, immutable collection\nCoordinates, RGB values\n\n\nDictionary\nKey-value mapping\nStudent records, inventory\n\n\nSet\nUnique elements, fast lookup\nTags, unique IDs\n\n\n\n\n# Practical examples\nshopping_list = [\"milk\", \"bread\", \"eggs\"]        # List: can modify\ncoordinates = (40.7128, -74.0060)                # Tuple: fixed point\nstudent_grades = {\"math\": 95, \"science\": 87}     # Dict: lookup by subject\nunique_visitors = {\"alice\", \"bob\", \"charlie\"}     # Set: no duplicates",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html#common-patterns-and-operations",
    "href": "book/04-data-types.html#common-patterns-and-operations",
    "title": "4  Data Types and Collections",
    "section": "4.6 Common Patterns and Operations",
    "text": "4.6 Common Patterns and Operations\n\n4.6.1 List Comprehensions\nList comprehensions provide a concise way to create lists based on existing sequences. They’re more readable and often faster than traditional loops for simple transformations.\nBasic Syntax: [expression for item in iterable if condition]\nLet’s see how they work step by step:\n\n# Traditional way - using a loop and append\nsquares = []\nfor x in range(1, 6):\n    squares.append(x**2)\nprint(\"Traditional:\", squares)\n\n# List comprehension - all in one line\n# This reads as: \"create a list of x squared for each x in range 1 to 5\"\nsquares = [x**2 for x in range(1, 6)]\nprint(\"Comprehension:\", squares)\n\n# With condition - filter while transforming\n# This reads as: \"create a list of x squared for each x in range 1 to 10, \n# but only if x is even (x % 2 == 0 means remainder is 0)\"\neven_squares = [x**2 for x in range(1, 11) if x % 2 == 0]\nprint(\"Even squares:\", even_squares)\n\n# Working with strings - transforming each word\n# This reads as: \"create a list of word.upper() for each word in the words list\"\nwords = [\"hello\", \"world\", \"python\"]\nuppercase = [word.upper() for word in words]\nprint(\"Uppercase:\", uppercase)\n\nWhy use list comprehensions? - More readable: The intent is clear in one line - Faster: Python optimizes comprehensions internally - Pythonic: Considered the “Python way” to transform data\n\n\n4.6.2 Dictionary Comprehensions\n\n# Create dictionary from lists\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nages = [25, 30, 35]\npeople = {name: age for name, age in zip(names, ages)}\nprint(\"People:\", people)\n\n# Square numbers\nsquares_dict = {x: x**2 for x in range(1, 6)}\nprint(\"Squares dict:\", squares_dict)\n\n# Filter dictionary\nhigh_scores = {name: score for name, score in scores.items() if score &gt; 90}\nprint(\"High scores:\", high_scores)",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html#exercises",
    "href": "book/04-data-types.html#exercises",
    "title": "4  Data Types and Collections",
    "section": "4.7 Exercises",
    "text": "4.7 Exercises\n\n4.7.1 Exercise 1: Student Management System\n\n# Create a student management system\nstudents = []\n\n# Add students\ndef add_student(name, age, grades):\n    student = {\n        \"name\": name,\n        \"age\": age,\n        \"grades\": grades,\n        \"average\": sum(grades) / len(grades)\n    }\n    students.append(student)\n\n# Add some students\nadd_student(\"Alice\", 20, [95, 87, 92])\nadd_student(\"Bob\", 19, [78, 84, 88])\nadd_student(\"Charlie\", 21, [92, 96, 89])\n\n# Display students\nprint(\"=== Student Records ===\")\nfor student in students:\n    print(f\"Name: {student['name']}\")\n    print(f\"Age: {student['age']}\")\n    print(f\"Grades: {student['grades']}\")\n    print(f\"Average: {student['average']:.1f}\")\n    print(\"-\" * 20)\n\n\n\n4.7.2 Exercise 2: Word Frequency Counter\n\n# Count word frequency in a text\ntext = \"python is great python is powerful python is fun\"\nwords = text.split()\n\n# Method 1: Using dictionary\nword_count = {}\nfor word in words:\n    word_count[word] = word_count.get(word, 0) + 1\n\nprint(\"Word frequencies:\")\nfor word, count in word_count.items():\n    print(f\"{word}: {count}\")\n\n# Method 2: Using Counter (from collections)\nfrom collections import Counter\nword_count_2 = Counter(words)\nprint(\"\\nUsing Counter:\", dict(word_count_2))\n\n\n\n4.7.3 Exercise 3: Set Operations with Data\n\n# Student course enrollment\nmath_students = {\"Alice\", \"Bob\", \"Charlie\", \"David\"}\nscience_students = {\"Bob\", \"Charlie\", \"Eve\", \"Frank\"}\nenglish_students = {\"Alice\", \"Charlie\", \"Eve\", \"Grace\"}\n\nprint(\"Math students:\", math_students)\nprint(\"Science students:\", science_students)\nprint(\"English students:\", english_students)\n\n# Analysis\nboth_math_science = math_students & science_students\nprint(\"Taking both Math and Science:\", both_math_science)\n\nall_students = math_students | science_students | english_students\nprint(\"All students:\", all_students)\n\nonly_math = math_students - science_students - english_students\nprint(\"Only taking Math:\", only_math)",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html#self-review-questions",
    "href": "book/04-data-types.html#self-review-questions",
    "title": "4  Data Types and Collections",
    "section": "4.8 Self-Review Questions",
    "text": "4.8 Self-Review Questions\n\n4.8.1 Knowledge Check\n\nWhat’s the difference between a list and a tuple?\nWhen would you use a dictionary instead of a list?\nWhat happens if you try to add a duplicate to a set?\nHow do you access the last element of a list?\nWhat’s the difference between remove() and pop() for lists?\n\n\n\n4.8.2 Coding Challenges\n\nCreate a function that finds common elements between two lists\nWrite a program to merge two dictionaries\nUse list comprehension to filter even numbers from a list\nCreate a function that returns the most frequent element in a list\n\n\n\n4.8.3 Answers\n\nLists are mutable and ordered; tuples are immutable and ordered\nWhen you need key-value associations or fast lookups by key\nNothing - sets automatically handle duplicates\nmy_list[-1] or my_list[len(my_list)-1]\nremove() removes by value; pop() removes by index and returns the value",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html#best-practices",
    "href": "book/04-data-types.html#best-practices",
    "title": "4  Data Types and Collections",
    "section": "4.9 Best Practices",
    "text": "4.9 Best Practices\n\nChoose the right data structure for your use case\nUse list comprehensions for simple transformations\nUse get() method for safe dictionary access\nUse sets for membership testing and eliminating duplicates\nUse tuple unpacking for multiple assignments",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html#common-pitfalls",
    "href": "book/04-data-types.html#common-pitfalls",
    "title": "4  Data Types and Collections",
    "section": "4.10 Common Pitfalls",
    "text": "4.10 Common Pitfalls\n\nModifying lists while iterating - create a copy first\nUsing mutable defaults in function parameters\nConfusing is and == for comparisons\nForgetting that dictionaries maintain insertion order (Python 3.7+)",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html#performance-tips",
    "href": "book/04-data-types.html#performance-tips",
    "title": "4  Data Types and Collections",
    "section": "4.11 Performance Tips",
    "text": "4.11 Performance Tips\nUnderstanding the performance characteristics of different data types helps you choose the right tool for the job.\n\n4.11.1 Why Sets Are Faster for Membership Testing\nWhen you check if an item exists in a collection using the in operator, different data types use different algorithms:\n\nLists: Must check each element one by one (linear search) - O(n) complexity\nSets: Use hash tables for instant lookup - O(1) complexity\n\nLet’s see this difference in action:\n\nimport time\n\n# Create large collections with the same data\nlarge_list = list(range(10000))  # [0, 1, 2, ..., 9999]\nlarge_set = set(range(10000))    # {0, 1, 2, ..., 9999}\n\n# Time list lookup - Python checks each element until it finds 9999\nstart = time.time()\n9999 in large_list  # Has to check ~10,000 elements\nlist_time = time.time() - start\n\n# Time set lookup - Python calculates hash and checks directly\nstart = time.time()\n9999 in large_set   # Direct hash table lookup\nset_time = time.time() - start\n\nprint(f\"List lookup: {list_time:.6f} seconds\")\nprint(f\"Set lookup: {set_time:.6f} seconds\")\nprint(f\"Set is {list_time/set_time:.1f}x faster for membership testing\")\n\nKey Takeaway: Use sets when you need to frequently check if items exist in a collection. Use lists when you need ordered data or duplicate values.",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html#next-steps",
    "href": "book/04-data-types.html#next-steps",
    "title": "4  Data Types and Collections",
    "section": "4.12 Next Steps",
    "text": "4.12 Next Steps\nExcellent! You now understand Python’s core data structures. Next, we’ll learn about Control Flow to make decisions and repeat actions in your programs.",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/04-data-types.html#resources",
    "href": "book/04-data-types.html#resources",
    "title": "4  Data Types and Collections",
    "section": "4.13 Resources",
    "text": "4.13 Resources\n\nPython Data Structures Documentation\nReal Python: Python Data Structures\nCollections Module",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Types and Collections</span>"
    ]
  },
  {
    "objectID": "book/05-control-flow.html",
    "href": "book/05-control-flow.html",
    "title": "5  Control Flow - Making Decisions and Loops",
    "section": "",
    "text": "5.1 Conditional Statements - if, elif, else\nControl flow statements allow your programs to make decisions and repeat actions based on conditions.",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow - Making Decisions and Loops</span>"
    ]
  },
  {
    "objectID": "book/05-control-flow.html#conditional-statements---if-elif-else",
    "href": "book/05-control-flow.html#conditional-statements---if-elif-else",
    "title": "5  Control Flow - Making Decisions and Loops",
    "section": "",
    "text": "5.1.1 Basic if Statement\n\nage = 18\n\nif age &gt;= 18:\n    print(\"You are an adult\")\n    print(\"You can vote\")\n\nprint(\"This always runs\")\n\n\n\n5.1.2 if-else Statement\n\ntemperature = 25\n\nif temperature &gt; 30:\n    print(\"It's hot outside!\")\n    print(\"Stay hydrated\")\nelse:\n    print(\"It's not too hot\")\n    print(\"Perfect weather\")\n\nprint(f\"Current temperature: {temperature}°C\")\n\n\n\n5.1.3 if-elif-else Chain\n\nscore = 85\n\nif score &gt;= 90:\n    grade = \"A\"\n    message = \"Excellent!\"\nelif score &gt;= 80:\n    grade = \"B\"\n    message = \"Good job!\"\nelif score &gt;= 70:\n    grade = \"C\"\n    message = \"Keep working!\"\nelif score &gt;= 60:\n    grade = \"D\"\n    message = \"Need improvement\"\nelse:\n    grade = \"F\"\n    message = \"Must retake\"\n\nprint(f\"Score: {score}\")\nprint(f\"Grade: {grade}\")\nprint(f\"Message: {message}\")\n\n\n\n5.1.4 Nested Conditions\n\nweather = \"sunny\"\ntemperature = 22\n\nif weather == \"sunny\":\n    if temperature &gt; 25:\n        activity = \"Go to the beach\"\n    elif temperature &gt; 15:\n        activity = \"Go for a walk\"\n    else:\n        activity = \"Stay inside but open windows\"\nelse:\n    if temperature &gt; 20:\n        activity = \"Indoor sports\"\n    else:\n        activity = \"Read a book\"\n\nprint(f\"Weather: {weather}, Temperature: {temperature}°C\")\nprint(f\"Recommended activity: {activity}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow - Making Decisions and Loops</span>"
    ]
  },
  {
    "objectID": "book/05-control-flow.html#comparison-and-logical-operators",
    "href": "book/05-control-flow.html#comparison-and-logical-operators",
    "title": "5  Control Flow - Making Decisions and Loops",
    "section": "5.2 Comparison and Logical Operators",
    "text": "5.2 Comparison and Logical Operators\n\n5.2.1 Comparison Operators\n\na, b = 10, 5\n\nprint(f\"a = {a}, b = {b}\")\nprint(f\"a == b: {a == b}\")   # Equal\nprint(f\"a != b: {a != b}\")   # Not equal\nprint(f\"a &gt; b: {a &gt; b}\")     # Greater than\nprint(f\"a &lt; b: {a &lt; b}\")     # Less than\nprint(f\"a &gt;= b: {a &gt;= b}\")   # Greater than or equal\nprint(f\"a &lt;= b: {a &lt;= b}\")   # Less than or equal\n\n\n\n5.2.2 Logical Operators\n\nage = 25\nhas_license = True\nhas_car = False\n\n# AND operator\ncan_drive = age &gt;= 18 and has_license\nprint(f\"Can drive: {can_drive}\")\n\n# OR operator\ncan_travel = has_car or age &gt;= 18\nprint(f\"Can travel: {can_travel}\")\n\n# NOT operator\nneeds_license = not has_license\nprint(f\"Needs license: {needs_license}\")\n\n# Complex condition\ncan_rent_car = age &gt;= 21 and has_license and not has_car\nprint(f\"Can rent car: {can_rent_car}\")\n\n\n\n5.2.3 Membership and Identity Operators\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nmy_fruit = \"apple\"\nanother_fruit = \"grape\"\n\n# Membership operators\nprint(f\"'{my_fruit}' in fruits: {my_fruit in fruits}\")\nprint(f\"'{another_fruit}' not in fruits: {another_fruit not in fruits}\")\n\n# Identity operators\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]\nlist3 = list1\n\nprint(f\"list1 == list2: {list1 == list2}\")  # Same content\nprint(f\"list1 is list2: {list1 is list2}\")  # Same object\nprint(f\"list1 is list3: {list1 is list3}\")  # Same object",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow - Making Decisions and Loops</span>"
    ]
  },
  {
    "objectID": "book/05-control-flow.html#loops---repeating-actions",
    "href": "book/05-control-flow.html#loops---repeating-actions",
    "title": "5  Control Flow - Making Decisions and Loops",
    "section": "5.3 Loops - Repeating Actions",
    "text": "5.3 Loops - Repeating Actions\n\n5.3.1 for Loop - Iterating Over Sequences\n\n# Loop over a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nprint(\"My favorite fruits:\")\nfor fruit in fruits:\n    print(f\"- {fruit}\")\n\n# Loop over a string\nword = \"Python\"\nprint(f\"\\nLetters in '{word}':\")\nfor letter in word:\n    print(letter)\n\n# Loop with enumerate (get index and value)\nprint(\"\\nNumbered list:\")\nfor index, fruit in enumerate(fruits, 1):\n    print(f\"{index}. {fruit}\")\n\n\n\n5.3.2 range() Function\n\n# Basic range\nprint(\"Numbers 0 to 4:\")\nfor i in range(5):\n    print(i)\n\n# Range with start and stop\nprint(\"\\nNumbers 1 to 5:\")\nfor i in range(1, 6):\n    print(i)\n\n# Range with step\nprint(\"\\nEven numbers 0 to 10:\")\nfor i in range(0, 11, 2):\n    print(i)\n\n# Countdown\nprint(\"\\nCountdown:\")\nfor i in range(5, 0, -1):\n    print(i)\nprint(\"Blast off!\")\n\n\n\n5.3.3 Nested Loops\n\n# Multiplication table\nprint(\"Multiplication Table:\")\nfor i in range(1, 4):\n    for j in range(1, 4):\n        result = i * j\n        print(f\"{i} × {j} = {result}\")\n    print()  # Empty line after each row\n\n\n\n5.3.4 while Loop - Repeating Until Condition is False\n\n# Basic while loop\ncount = 0\nprint(\"Counting to 5:\")\nwhile count &lt; 5:\n    print(f\"Count: {count}\")\n    count += 1\nprint(\"Done!\")\n\n# User input simulation (using predetermined values)\nguesses = [7, 3, 5]  # Simulating user inputs\nsecret_number = 5\nattempts = 0\n\nprint(\"\\nGuessing game:\")\nwhile attempts &lt; len(guesses):\n    guess = guesses[attempts]\n    attempts += 1\n    \n    print(f\"Guess #{attempts}: {guess}\")\n    \n    if guess == secret_number:\n        print(f\"Correct! You guessed it in {attempts} attempts!\")\n        break\n    elif guess &lt; secret_number:\n        print(\"Too low!\")\n    else:\n        print(\"Too high!\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow - Making Decisions and Loops</span>"
    ]
  },
  {
    "objectID": "book/05-control-flow.html#loop-control---break-continue-pass",
    "href": "book/05-control-flow.html#loop-control---break-continue-pass",
    "title": "5  Control Flow - Making Decisions and Loops",
    "section": "5.4 Loop Control - break, continue, pass",
    "text": "5.4 Loop Control - break, continue, pass\n\n5.4.1 break Statement\n\n# Finding first even number\nnumbers = [1, 3, 7, 8, 9, 12, 15]\n\nprint(\"Looking for first even number:\")\nfor num in numbers:\n    if num % 2 == 0:\n        print(f\"Found first even number: {num}\")\n        break\n    print(f\"{num} is odd\")\n\n\n\n5.4.2 continue Statement\n\n# Skip negative numbers\nnumbers = [1, -2, 3, -4, 5, -6, 7]\n\nprint(\"Positive numbers only:\")\nfor num in numbers:\n    if num &lt; 0:\n        continue  # Skip the rest of this iteration\n    print(num)\n\n\n\n5.4.3 pass Statement\n\n# Placeholder for future implementation\ndef process_data(data):\n    if data is None:\n        pass  # TODO: Handle None case later\n    else:\n        print(f\"Processing: {data}\")\n\n# Using pass in loops\nfor i in range(5):\n    if i == 2:\n        pass  # Placeholder - do nothing for now\n    else:\n        print(f\"Processing item {i}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow - Making Decisions and Loops</span>"
    ]
  },
  {
    "objectID": "book/05-control-flow.html#practical-examples",
    "href": "book/05-control-flow.html#practical-examples",
    "title": "5  Control Flow - Making Decisions and Loops",
    "section": "5.5 Practical Examples",
    "text": "5.5 Practical Examples\n\n5.5.1 Example 1: Grade Calculator\n\ndef calculate_grade(scores):\n    \"\"\"Calculate letter grade from list of scores.\"\"\"\n    if not scores:\n        return \"No scores provided\"\n    \n    average = sum(scores) / len(scores)\n    \n    if average &gt;= 90:\n        letter = \"A\"\n    elif average &gt;= 80:\n        letter = \"B\"\n    elif average &gt;= 70:\n        letter = \"C\"\n    elif average &gt;= 60:\n        letter = \"D\"\n    else:\n        letter = \"F\"\n    \n    return f\"Average: {average:.1f}, Grade: {letter}\"\n\n# Test the function\nstudent_scores = [85, 92, 78, 96, 88]\nprint(\"Student scores:\", student_scores)\nprint(calculate_grade(student_scores))\n\n\n\n5.5.2 Example 2: Number Classifier\n\ndef classify_numbers(numbers):\n    \"\"\"Classify numbers as positive, negative, or zero.\"\"\"\n    positive = []\n    negative = []\n    zeros = []\n    \n    for num in numbers:\n        if num &gt; 0:\n            positive.append(num)\n        elif num &lt; 0:\n            negative.append(num)\n        else:\n            zeros.append(num)\n    \n    return positive, negative, zeros\n\n# Test the function\ntest_numbers = [5, -3, 0, 12, -7, 0, 8]\npos, neg, zero = classify_numbers(test_numbers)\n\nprint(f\"Original: {test_numbers}\")\nprint(f\"Positive: {pos}\")\nprint(f\"Negative: {neg}\")\nprint(f\"Zeros: {zero}\")\n\n\n\n5.5.3 Example 3: Password Validator\n\ndef validate_password(password):\n    \"\"\"Validate password strength.\"\"\"\n    if len(password) &lt; 8:\n        return False, \"Password must be at least 8 characters\"\n    \n    has_upper = False\n    has_lower = False\n    has_digit = False\n    has_special = False\n    special_chars = \"!@#$%^&*\"\n    \n    for char in password:\n        if char.isupper():\n            has_upper = True\n        elif char.islower():\n            has_lower = True\n        elif char.isdigit():\n            has_digit = True\n        elif char in special_chars:\n            has_special = True\n    \n    requirements = []\n    if not has_upper:\n        requirements.append(\"uppercase letter\")\n    if not has_lower:\n        requirements.append(\"lowercase letter\")\n    if not has_digit:\n        requirements.append(\"digit\")\n    if not has_special:\n        requirements.append(\"special character\")\n    \n    if requirements:\n        return False, f\"Missing: {', '.join(requirements)}\"\n    else:\n        return True, \"Strong password!\"\n\n# Test passwords\ntest_passwords = [\"weak\", \"StrongPass1!\", \"NoSpecial123\", \"short\"]\n\nfor pwd in test_passwords:\n    is_valid, message = validate_password(pwd)\n    status = \"✓\" if is_valid else \"✗\"\n    print(f\"{status} '{pwd}': {message}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow - Making Decisions and Loops</span>"
    ]
  },
  {
    "objectID": "book/05-control-flow.html#exercises",
    "href": "book/05-control-flow.html#exercises",
    "title": "5  Control Flow - Making Decisions and Loops",
    "section": "5.6 Exercises",
    "text": "5.6 Exercises\n\n5.6.1 Exercise 1: FizzBuzz\n\n# Classic FizzBuzz problem\nprint(\"FizzBuzz (1-30):\")\nfor i in range(1, 31):\n    if i % 15 == 0:  # Divisible by both 3 and 5\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)\n\n\n\n5.6.2 Exercise 2: Prime Number Checker\nA prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Let’s build an efficient algorithm to check if a number is prime.\nMathematical insight: If a number n has a divisor, at least one divisor must be ≤ √n. This is because if n = a × b and both a and b are &gt; √n, then a × b &gt; n, which is impossible.\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    # Handle edge cases: numbers less than 2 are not prime\n    if n &lt; 2:\n        return False\n    \n    # Check for divisors from 2 up to √n\n    # We only need to check up to the square root because:\n    # - If n has a divisor &gt; √n, it must also have one ≤ √n\n    # - This reduces our search space dramatically!\n    for i in range(2, int(n ** 0.5) + 1):\n        # If n is divisible by i, then n is not prime\n        if n % i == 0:  # % is the modulo operator (remainder)\n            return False\n    \n    # If we made it here, no divisors were found\n    return True\n\n# Find prime numbers up to 30\nprint(\"Prime numbers up to 30:\")\nprimes = []\nfor num in range(2, 31):  # Start from 2 (first prime number)\n    if is_prime(num):\n        primes.append(num)\n\nprint(primes)\n\nWhy this algorithm is efficient: - For n = 100, instead of checking 98 potential divisors (2 to 99), we only check 8 (2 to 10) - Time complexity: O(√n) instead of O(n) - For large numbers, this makes a huge difference!\n\n\n5.6.3 Exercise 3: Pattern Printing\n\n# Print a triangle pattern\ndef print_triangle(height):\n    \"\"\"Print a triangle of stars.\"\"\"\n    for i in range(1, height + 1):\n        # Print spaces for centering\n        spaces = \" \" * (height - i)\n        # Print stars\n        stars = \"*\" * (2 * i - 1)\n        print(spaces + stars)\n\nprint(\"Triangle pattern:\")\nprint_triangle(5)\n\n# Print a number pyramid\nprint(\"\\nNumber pyramid:\")\nfor i in range(1, 6):\n    # Print leading spaces\n    print(\" \" * (5 - i), end=\"\")\n    # Print ascending numbers\n    for j in range(1, i + 1):\n        print(j, end=\"\")\n    # Print descending numbers\n    for j in range(i - 1, 0, -1):\n        print(j, end=\"\")\n    print()  # New line",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow - Making Decisions and Loops</span>"
    ]
  },
  {
    "objectID": "book/05-control-flow.html#self-review-questions",
    "href": "book/05-control-flow.html#self-review-questions",
    "title": "5  Control Flow - Making Decisions and Loops",
    "section": "5.7 Self-Review Questions",
    "text": "5.7 Self-Review Questions\n\n5.7.1 Knowledge Check\n\nWhat’s the difference between if, elif, and else?\nWhen would you use a while loop instead of a for loop?\nWhat does the break statement do?\nWhat’s the difference between == and is?\nHow do you iterate over both index and value in a list?\n\n\n\n5.7.2 Coding Challenges\n\nWrite a function that finds the largest number in a list\nCreate a program that counts vowels in a string\nImplement a simple calculator using if-elif statements\nWrite a function that reverses a string using a loop\n\n\n\n5.7.3 Answers\n\nif checks first condition; elif checks additional conditions; else runs when no conditions are true\nWhen you don’t know how many iterations you need, or when repeating until a condition changes\nbreak exits the current loop immediately\n== compares values; is compares object identity\nUse enumerate(): for index, value in enumerate(my_list):",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow - Making Decisions and Loops</span>"
    ]
  },
  {
    "objectID": "book/05-control-flow.html#best-practices",
    "href": "book/05-control-flow.html#best-practices",
    "title": "5  Control Flow - Making Decisions and Loops",
    "section": "5.8 Best Practices",
    "text": "5.8 Best Practices\n\nUse clear, descriptive condition names\nAvoid deeply nested conditions - use early returns or helper functions\nUse elif instead of multiple if statements when conditions are mutually exclusive\nBe careful with infinite loops in while statements\nUse for loops for known iterations, while for conditional repetition",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow - Making Decisions and Loops</span>"
    ]
  },
  {
    "objectID": "book/05-control-flow.html#common-patterns",
    "href": "book/05-control-flow.html#common-patterns",
    "title": "5  Control Flow - Making Decisions and Loops",
    "section": "5.9 Common Patterns",
    "text": "5.9 Common Patterns\n\n5.9.1 Guard Clauses\n\ndef process_user(user):\n    # Early returns for invalid cases\n    if user is None:\n        return \"No user provided\"\n    \n    if not user.get(\"name\"):\n        return \"User must have a name\"\n    \n    if user.get(\"age\", 0) &lt; 0:\n        return \"Invalid age\"\n    \n    # Main processing logic\n    return f\"Processing user: {user['name']}\"\n\n# Test\ntest_user = {\"name\": \"Alice\", \"age\": 25}\nprint(process_user(test_user))\n\n\n\n5.9.2 Loop with else\nPython has a unique feature that often confuses beginners: loops can have an else clause! This else block runs only when the loop completes normally (without encountering a break).\nWhen does loop-else run? - ✅ Runs: When the loop finishes all iterations naturally - ❌ Doesn’t run: When the loop exits via break\nThis is perfect for “search and report if not found” patterns:\n\n# The else clause runs if the loop completes normally (no break)\ndef find_number(numbers, target):\n    for num in numbers:\n        if num == target:\n            print(f\"Found {target}!\")\n            break  # Exit loop early - else won't run\n    else:\n        # This runs ONLY if the loop completed without breaking\n        # Think of it as \"if we didn't find anything\"\n        print(f\"{target} not found in the list\")\n\nnumbers = [1, 2, 3, 4, 5]\nfind_number(numbers, 3)  # Found 3! (else doesn't run)\nfind_number(numbers, 7)  # 7 not found in the list (else runs)\n\nCommon misconception: The else doesn’t mean “if the loop didn’t run” - it means “if the loop wasn’t interrupted by break”.\nReal-world example: Checking if a password meets requirements:\n\ndef validate_password(password):\n    requirements = [\n        (len(password) &gt;= 8, \"at least 8 characters\"),\n        (any(c.isupper() for c in password), \"an uppercase letter\"),\n        (any(c.islower() for c in password), \"a lowercase letter\"),\n        (any(c.isdigit() for c in password), \"a number\")\n    ]\n    \n    for valid, message in requirements:\n        if not valid:\n            print(f\"Password must contain {message}\")\n            break\n    else:\n        print(\"Password is valid!\")\n\nvalidate_password(\"weakpass\")      # Fails - no uppercase/number\nvalidate_password(\"StrongPass123\") # Valid!",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow - Making Decisions and Loops</span>"
    ]
  },
  {
    "objectID": "book/05-control-flow.html#performance-tips",
    "href": "book/05-control-flow.html#performance-tips",
    "title": "5  Control Flow - Making Decisions and Loops",
    "section": "5.10 Performance Tips",
    "text": "5.10 Performance Tips\n\n# Use membership testing for large collections\nlarge_list = list(range(10000))\nlarge_set = set(range(10000))\n\n# Slow: checking membership in list\n# if 9999 in large_list:  # O(n) operation\n\n# Fast: checking membership in set\nif 9999 in large_set:  # O(1) operation\n    print(\"Found in set (much faster!)\")\n\n# Use list comprehensions for simple filtering\nnumbers = range(100)\n\n# Traditional loop\nevens = []\nfor num in numbers:\n    if num % 2 == 0:\n        evens.append(num)\n\n# List comprehension (faster and more readable)\nevens = [num for num in numbers if num % 2 == 0]\nprint(f\"First 10 evens: {evens[:10]}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow - Making Decisions and Loops</span>"
    ]
  },
  {
    "objectID": "book/05-control-flow.html#next-steps",
    "href": "book/05-control-flow.html#next-steps",
    "title": "5  Control Flow - Making Decisions and Loops",
    "section": "5.11 Next Steps",
    "text": "5.11 Next Steps\nGreat work! You now understand how to control program flow with conditions and loops. Next, we’ll learn about Functions to organize and reuse your code effectively.",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow - Making Decisions and Loops</span>"
    ]
  },
  {
    "objectID": "book/05-control-flow.html#resources",
    "href": "book/05-control-flow.html#resources",
    "title": "5  Control Flow - Making Decisions and Loops",
    "section": "5.12 Resources",
    "text": "5.12 Resources\n\nPython Control Flow Documentation\nReal Python: Python Conditional Statements\nReal Python: Python While Loops",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow - Making Decisions and Loops</span>"
    ]
  },
  {
    "objectID": "book/06-functions.html",
    "href": "book/06-functions.html",
    "title": "6  Functions - Organizing and Reusing Code",
    "section": "",
    "text": "6.1 Why Functions Matter\nFunctions are the building blocks of well-organized Python programs. They help you avoid repetition and make your code more readable and maintainable.\n# Without functions - repetitive code\nname1 = \"Alice\"\nprint(f\"Hello, {name1}!\")\nprint(f\"Welcome to Python, {name1}!\")\n\nname2 = \"Bob\"\nprint(f\"Hello, {name2}!\")\nprint(f\"Welcome to Python, {name2}!\")\n\n# With functions - clean and reusable\ndef greet_user(name):\n    print(f\"Hello, {name}!\")\n    print(f\"Welcome to Python, {name}!\")\n\ngreet_user(\"Alice\")\ngreet_user(\"Bob\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Functions - Organizing and Reusing Code</span>"
    ]
  },
  {
    "objectID": "book/06-functions.html#defining-functions",
    "href": "book/06-functions.html#defining-functions",
    "title": "6  Functions - Organizing and Reusing Code",
    "section": "6.2 Defining Functions",
    "text": "6.2 Defining Functions\n\n6.2.1 Basic Function Definition\n\ndef say_hello():\n    \"\"\"A simple function that prints a greeting.\"\"\"\n    print(\"Hello from Python!\")\n    print(\"Functions make code organized!\")\n\n# Call the function\nsay_hello()\n\n\n\n6.2.2 Functions with Parameters\n\ndef greet(name, language=\"English\"):\n    \"\"\"Greet someone in different languages.\"\"\"\n    if language == \"English\":\n        print(f\"Hello, {name}!\")\n    elif language == \"Spanish\":\n        print(f\"¡Hola, {name}!\")\n    elif language == \"French\":\n        print(f\"Bonjour, {name}!\")\n    elif language == \"Japanese\":\n        print(f\"こんにちは, {name}!\")\n    else:\n        print(f\"Hello, {name}! (default)\")\n\n# Call with different parameters\ngreet(\"Alice\")\ngreet(\"Carlos\", \"Spanish\")\ngreet(\"Marie\", \"French\")\ngreet(\"Hiroshi\", \"Japanese\")\n\n\n\n6.2.3 Functions with Return Values\n\ndef add_numbers(a, b):\n    \"\"\"Add two numbers and return the result.\"\"\"\n    return a + b\n\ndef multiply_numbers(a, b):\n    \"\"\"Multiply two numbers and return the result.\"\"\"\n    result = a * b\n    return result\n\ndef get_full_name(first, last):\n    \"\"\"Combine first and last name.\"\"\"\n    full_name = f\"{first} {last}\"\n    return full_name\n\n# Using return values\nsum_result = add_numbers(5, 3)\nprint(f\"5 + 3 = {sum_result}\")\n\nproduct = multiply_numbers(4, 7)\nprint(f\"4 × 7 = {product}\")\n\nname = get_full_name(\"John\", \"Doe\")\nprint(f\"Full name: {name}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Functions - Organizing and Reusing Code</span>"
    ]
  },
  {
    "objectID": "book/06-functions.html#function-parameters-and-arguments",
    "href": "book/06-functions.html#function-parameters-and-arguments",
    "title": "6  Functions - Organizing and Reusing Code",
    "section": "6.3 Function Parameters and Arguments",
    "text": "6.3 Function Parameters and Arguments\n\n6.3.1 Positional Arguments\n\ndef describe_pet(animal_type, pet_name, age):\n    \"\"\"Describe a pet with given information.\"\"\"\n    print(f\"I have a {animal_type} named {pet_name}\")\n    print(f\"{pet_name} is {age} years old\")\n\n# Positional arguments - order matters\ndescribe_pet(\"dog\", \"Buddy\", 3)\ndescribe_pet(\"cat\", \"Whiskers\", 2)\n\n\n\n6.3.2 Keyword Arguments\n\ndef create_profile(name, age, city, profession):\n    \"\"\"Create a user profile.\"\"\"\n    profile = {\n        \"name\": name,\n        \"age\": age,\n        \"city\": city,\n        \"profession\": profession\n    }\n    return profile\n\n# Keyword arguments - order doesn't matter\nprofile1 = create_profile(name=\"Alice\", profession=\"Engineer\", city=\"Seattle\", age=28)\nprofile2 = create_profile(age=35, name=\"Bob\", city=\"Portland\", profession=\"Teacher\")\n\nprint(\"Profile 1:\", profile1)\nprint(\"Profile 2:\", profile2)\n\n\n\n6.3.3 Default Parameters\n\ndef make_pizza(size, *toppings, crust=\"thin\", sauce=\"tomato\"):\n    \"\"\"Make a pizza with given specifications.\"\"\"\n    print(f\"Making a {size} pizza with {crust} crust and {sauce} sauce\")\n    \n    if toppings:\n        print(\"Toppings:\")\n        for topping in toppings:\n            print(f\"  - {topping}\")\n    else:\n        print(\"No toppings (plain pizza)\")\n    print()\n\n# Using default parameters\nmake_pizza(\"medium\")\nmake_pizza(\"large\", \"pepperoni\", \"mushrooms\")\nmake_pizza(\"small\", \"cheese\", crust=\"thick\")\nmake_pizza(\"large\", \"pepperoni\", \"sausage\", sauce=\"bbq\", crust=\"stuffed\")\n\n\n\n6.3.4 Variable-Length Arguments\n\ndef sum_all(*numbers):\n    \"\"\"Sum any number of arguments.\"\"\"\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\ndef print_info(**kwargs):\n    \"\"\"Print information from keyword arguments.\"\"\"\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\n# Variable positional arguments\nprint(f\"Sum of 1, 2, 3: {sum_all(1, 2, 3)}\")\nprint(f\"Sum of 1, 2, 3, 4, 5: {sum_all(1, 2, 3, 4, 5)}\")\n\n# Variable keyword arguments\nprint(\"\\nUser information:\")\nprint_info(name=\"Alice\", age=25, city=\"Boston\", job=\"Developer\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Functions - Organizing and Reusing Code</span>"
    ]
  },
  {
    "objectID": "book/06-functions.html#scope-and-local-vs-global-variables",
    "href": "book/06-functions.html#scope-and-local-vs-global-variables",
    "title": "6  Functions - Organizing and Reusing Code",
    "section": "6.4 Scope and Local vs Global Variables",
    "text": "6.4 Scope and Local vs Global Variables\n\n6.4.1 Local Scope\n\ndef calculate_area(length, width):\n    \"\"\"Calculate area - variables are local to function.\"\"\"\n    area = length * width  # Local variable\n    print(f\"Calculating area inside function: {area}\")\n    return area\n\n# area variable only exists inside the function\nresult = calculate_area(5, 3)\nprint(f\"Returned area: {result}\")\n\n# This would cause an error:\n# print(area)  # NameError: name 'area' is not defined\n\n\n\n6.4.2 Global Scope\n\n# Global variable\ntotal_calculations = 0\n\ndef add_numbers_with_count(a, b):\n    \"\"\"Add numbers and increment global counter.\"\"\"\n    global total_calculations\n    total_calculations += 1\n    result = a + b\n    print(f\"Calculation #{total_calculations}: {a} + {b} = {result}\")\n    return result\n\n# Functions can access and modify global variables\nadd_numbers_with_count(5, 3)\nadd_numbers_with_count(10, 7)\nprint(f\"Total calculations performed: {total_calculations}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Functions - Organizing and Reusing Code</span>"
    ]
  },
  {
    "objectID": "book/06-functions.html#advanced-function-concepts",
    "href": "book/06-functions.html#advanced-function-concepts",
    "title": "6  Functions - Organizing and Reusing Code",
    "section": "6.5 Advanced Function Concepts",
    "text": "6.5 Advanced Function Concepts\n\n6.5.1 Functions as First-Class Objects\n\ndef square(x):\n    return x ** 2\n\ndef cube(x):\n    return x ** 3\n\ndef apply_operation(func, number):\n    \"\"\"Apply a function to a number.\"\"\"\n    return func(number)\n\n# Functions can be passed as arguments\nresult1 = apply_operation(square, 5)\nresult2 = apply_operation(cube, 3)\n\nprint(f\"Square of 5: {result1}\")\nprint(f\"Cube of 3: {result2}\")\n\n# Functions can be stored in variables\noperations = [square, cube]\nfor op in operations:\n    print(f\"{op.__name__}(4) = {op(4)}\")\n\n\n\n6.5.2 Lambda Functions (Anonymous Functions)\n\n# Lambda functions for simple operations\nsquare = lambda x: x ** 2\nadd = lambda x, y: x + y\nis_even = lambda x: x % 2 == 0\n\nprint(f\"Square of 6: {square(6)}\")\nprint(f\"Add 3 + 7: {add(3, 7)}\")\nprint(f\"Is 8 even? {is_even(8)}\")\n\n# Using lambda with built-in functions\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Filter even numbers\nevens = list(filter(lambda x: x % 2 == 0, numbers))\nprint(f\"Even numbers: {evens}\")\n\n# Square all numbers\nsquares = list(map(lambda x: x ** 2, numbers))\nprint(f\"Squares: {squares}\")\n\n# Sort by custom criteria\nwords = [\"python\", \"java\", \"c\", \"javascript\", \"go\"]\nsorted_by_length = sorted(words, key=lambda word: len(word))\nprint(f\"Sorted by length: {sorted_by_length}\")\n\n\n\n6.5.3 Nested Functions and Closures\nA closure is a function that “captures” variables from its surrounding scope, even after the outer function has finished executing. This is a powerful concept for creating specialized functions.\nHow closures work: 1. An outer function defines variables 2. An inner function uses those variables 3. The outer function returns the inner function 4. The inner function “remembers” the outer variables\nLet’s see this in action:\n\ndef create_multiplier(factor):\n    \"\"\"Create a function that multiplies by a specific factor.\"\"\"\n    # 'factor' is captured by the inner function\n    def multiplier(number):\n        return number * factor  # Uses 'factor' from outer scope\n    \n    return multiplier  # Return the inner function\n\n# Create specific multiplier functions\n# Each function \"remembers\" its own factor value\ndouble = create_multiplier(2)  # factor = 2 is captured\ntriple = create_multiplier(3)  # factor = 3 is captured\n\nprint(f\"Double 5: {double(5)}\")  # Uses captured factor = 2\nprint(f\"Triple 4: {triple(4)}\")  # Uses captured factor = 3\n\nMore advanced closure with mutable state:\n\ndef create_counter(start=0):\n    \"\"\"Create a counter function with persistent state.\"\"\"\n    count = start  # This variable persists between calls\n    \n    def counter():\n        nonlocal count  # Allows modifying the captured variable\n        count += 1     # Modify the captured 'count'\n        return count\n    \n    return counter\n\n# Create independent counters - each has its own 'count' variable\ncounter1 = create_counter(0)    # Starts at 0\ncounter2 = create_counter(100)  # Starts at 100\n\n# Each counter maintains its own state\nprint(f\"Counter 1: {counter1()}, {counter1()}, {counter1()}\")  # 1, 2, 3\nprint(f\"Counter 2: {counter2()}, {counter2()}\")               # 101, 102\n\nWhy use closures? - Factory functions: Create specialized functions with different behaviors - State preservation: Maintain state between function calls without classes - Configuration: Capture configuration parameters for later use - Callbacks: Create customized callback functions\nKey concept - nonlocal: This keyword tells Python you want to modify a variable from the enclosing scope, not create a new local variable.",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Functions - Organizing and Reusing Code</span>"
    ]
  },
  {
    "objectID": "book/06-functions.html#practical-examples",
    "href": "book/06-functions.html#practical-examples",
    "title": "6  Functions - Organizing and Reusing Code",
    "section": "6.6 Practical Examples",
    "text": "6.6 Practical Examples\n\n6.6.1 Example 1: Text Processing Functions\n\ndef word_count(text):\n    \"\"\"Count words in text.\"\"\"\n    words = text.split()\n    return len(words)\n\ndef char_count(text, exclude_spaces=True):\n    \"\"\"Count characters in text.\"\"\"\n    if exclude_spaces:\n        return len(text.replace(\" \", \"\"))\n    return len(text)\n\ndef title_case(text):\n    \"\"\"Convert text to title case.\"\"\"\n    return \" \".join(word.capitalize() for word in text.split())\n\ndef analyze_text(text):\n    \"\"\"Comprehensive text analysis.\"\"\"\n    return {\n        \"original\": text,\n        \"word_count\": word_count(text),\n        \"char_count\": char_count(text),\n        \"char_count_with_spaces\": char_count(text, exclude_spaces=False),\n        \"title_case\": title_case(text)\n    }\n\n# Test the functions\nsample_text = \"python is an amazing programming language\"\nanalysis = analyze_text(sample_text)\n\nfor key, value in analysis.items():\n    print(f\"{key}: {value}\")\n\n\n\n6.6.2 Example 2: Mathematical Functions\n\ndef factorial(n):\n    \"\"\"Calculate factorial of n.\"\"\"\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\ndef fibonacci(n):\n    \"\"\"Generate first n fibonacci numbers.\"\"\"\n    if n &lt;= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    \n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        next_fib = fib_sequence[i-1] + fib_sequence[i-2]\n        fib_sequence.append(next_fib)\n    \n    return fib_sequence\n\ndef is_prime(n):\n    \"\"\"Check if number is prime.\"\"\"\n    if n &lt; 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_factors(n):\n    \"\"\"Find prime factors of n.\"\"\"\n    factors = []\n    d = 2\n    while d * d &lt;= n:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n &gt; 1:\n        factors.append(n)\n    return factors\n\n# Test mathematical functions\nprint(f\"Factorial of 5: {factorial(5)}\")\nprint(f\"First 10 Fibonacci numbers: {fibonacci(10)}\")\nprint(f\"Is 17 prime? {is_prime(17)}\")\nprint(f\"Prime factors of 60: {prime_factors(60)}\")\n\n\n\n6.6.3 Example 3: Data Processing Functions\n\ndef filter_students_by_grade(students, min_grade):\n    \"\"\"Filter students by minimum grade.\"\"\"\n    return [student for student in students if student['grade'] &gt;= min_grade]\n\ndef calculate_class_stats(students):\n    \"\"\"Calculate class statistics.\"\"\"\n    if not students:\n        return {}\n    \n    grades = [student['grade'] for student in students]\n    return {\n        \"count\": len(students),\n        \"average\": sum(grades) / len(grades),\n        \"highest\": max(grades),\n        \"lowest\": min(grades),\n        \"passing\": len([g for g in grades if g &gt;= 60])\n    }\n\ndef format_student_report(student):\n    \"\"\"Format a student report.\"\"\"\n    grade = student['grade']\n    status = \"Pass\" if grade &gt;= 60 else \"Fail\"\n    \n    return f\"\"\"\nStudent Report\n--------------\nName: {student['name']}\nGrade: {grade}\nStatus: {status}\n\"\"\"\n\n# Sample data\nstudents_data = [\n    {\"name\": \"Alice\", \"grade\": 85},\n    {\"name\": \"Bob\", \"grade\": 92},\n    {\"name\": \"Charlie\", \"grade\": 78},\n    {\"name\": \"Diana\", \"grade\": 55},\n    {\"name\": \"Eve\", \"grade\": 96}\n]\n\n# Use the functions\nhigh_performers = filter_students_by_grade(students_data, 80)\nprint(\"High performers (80+):\")\nfor student in high_performers:\n    print(f\"  {student['name']}: {student['grade']}\")\n\nstats = calculate_class_stats(students_data)\nprint(f\"\\nClass Statistics:\")\nfor key, value in stats.items():\n    if isinstance(value, float):\n        print(f\"  {key}: {value:.1f}\")\n    else:\n        print(f\"  {key}: {value}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Functions - Organizing and Reusing Code</span>"
    ]
  },
  {
    "objectID": "book/06-functions.html#exercises",
    "href": "book/06-functions.html#exercises",
    "title": "6  Functions - Organizing and Reusing Code",
    "section": "6.7 Exercises",
    "text": "6.7 Exercises\n\n6.7.1 Exercise 1: Temperature Converter\n\ndef celsius_to_fahrenheit(celsius):\n    \"\"\"Convert Celsius to Fahrenheit.\"\"\"\n    return (celsius * 9/5) + 32\n\ndef fahrenheit_to_celsius(fahrenheit):\n    \"\"\"Convert Fahrenheit to Celsius.\"\"\"\n    return (fahrenheit - 32) * 5/9\n\ndef kelvin_to_celsius(kelvin):\n    \"\"\"Convert Kelvin to Celsius.\"\"\"\n    return kelvin - 273.15\n\ndef celsius_to_kelvin(celsius):\n    \"\"\"Convert Celsius to Kelvin.\"\"\"\n    return celsius + 273.15\n\ndef temperature_converter(temp, from_unit, to_unit):\n    \"\"\"Universal temperature converter.\"\"\"\n    # First convert to Celsius\n    if from_unit.lower() == \"fahrenheit\":\n        temp_celsius = fahrenheit_to_celsius(temp)\n    elif from_unit.lower() == \"kelvin\":\n        temp_celsius = kelvin_to_celsius(temp)\n    else:  # Assume Celsius\n        temp_celsius = temp\n    \n    # Then convert to target unit\n    if to_unit.lower() == \"fahrenheit\":\n        return celsius_to_fahrenheit(temp_celsius)\n    elif to_unit.lower() == \"kelvin\":\n        return celsius_to_kelvin(temp_celsius)\n    else:  # Assume Celsius\n        return temp_celsius\n\n# Test the converter\nprint(\"Temperature Conversions:\")\nprint(f\"25°C = {celsius_to_fahrenheit(25):.1f}°F\")\nprint(f\"77°F = {fahrenheit_to_celsius(77):.1f}°C\")\nprint(f\"100°C = {temperature_converter(100, 'celsius', 'kelvin'):.1f}K\")\n\n\n\n6.7.2 Exercise 2: List Processing Functions\n\ndef find_max(numbers):\n    \"\"\"Find maximum number in list.\"\"\"\n    if not numbers:\n        return None\n    max_num = numbers[0]\n    for num in numbers:\n        if num &gt; max_num:\n            max_num = num\n    return max_num\n\ndef remove_duplicates(items):\n    \"\"\"Remove duplicates while preserving order.\"\"\"\n    seen = set()\n    result = []\n    for item in items:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result\n\ndef reverse_string(text):\n    \"\"\"Reverse a string using iteration.\"\"\"\n    reversed_text = \"\"\n    for char in text:\n        reversed_text = char + reversed_text\n    return reversed_text\n\ndef count_vowels(text):\n    \"\"\"Count vowels in text.\"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in text:\n        if char in vowels:\n            count += 1\n    return count\n\n# Test the functions\ntest_numbers = [3, 7, 2, 9, 1, 8, 4]\ntest_list = [1, 2, 2, 3, 3, 3, 4, 5, 5]\ntest_string = \"Hello World\"\n\nprint(f\"Max of {test_numbers}: {find_max(test_numbers)}\")\nprint(f\"Remove duplicates from {test_list}: {remove_duplicates(test_list)}\")\nprint(f\"Reverse '{test_string}': {reverse_string(test_string)}\")\nprint(f\"Vowels in '{test_string}': {count_vowels(test_string)}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Functions - Organizing and Reusing Code</span>"
    ]
  },
  {
    "objectID": "book/06-functions.html#self-review-questions",
    "href": "book/06-functions.html#self-review-questions",
    "title": "6  Functions - Organizing and Reusing Code",
    "section": "6.8 Self-Review Questions",
    "text": "6.8 Self-Review Questions\n\n6.8.1 Knowledge Check\n\nWhat’s the difference between parameters and arguments?\nWhat does a function return if there’s no explicit return statement?\nWhat’s the purpose of the global keyword?\nWhen would you use a lambda function instead of a regular function?\nWhat’s the difference between *args and **kwargs?\n\n\n\n6.8.2 Coding Challenges\n\nWrite a function that calculates compound interest\nCreate a function that validates email addresses\nImplement a function that sorts a list without using built-in sort\nWrite a recursive function to calculate fibonacci numbers\n\n\n\n6.8.3 Answers\n\nParameters are variables in function definition; arguments are actual values passed when calling\nNone\nTo modify global variables inside a function\nFor simple, one-line operations used with map, filter, or sort\n*args collects positional arguments; **kwargs collects keyword arguments",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Functions - Organizing and Reusing Code</span>"
    ]
  },
  {
    "objectID": "book/06-functions.html#best-practices",
    "href": "book/06-functions.html#best-practices",
    "title": "6  Functions - Organizing and Reusing Code",
    "section": "6.9 Best Practices",
    "text": "6.9 Best Practices\n\n6.9.1 Function Design Principles\n\nSingle Responsibility - Each function should do one thing well\nDescriptive Names - Function names should clearly indicate purpose\nAvoid Side Effects - Functions should be predictable\nUse Docstrings - Document what the function does\nKeep It Simple - Break complex functions into smaller ones\n\n\n# Good function design\ndef calculate_bmi(weight_kg, height_m):\n    \"\"\"\n    Calculate Body Mass Index.\n    \n    Args:\n        weight_kg (float): Weight in kilograms\n        height_m (float): Height in meters\n    \n    Returns:\n        float: BMI value\n    \"\"\"\n    if height_m &lt;= 0:\n        raise ValueError(\"Height must be positive\")\n    \n    return weight_kg / (height_m ** 2)\n\ndef get_bmi_category(bmi):\n    \"\"\"Get BMI category based on WHO standards.\"\"\"\n    if bmi &lt; 18.5:\n        return \"Underweight\"\n    elif bmi &lt; 25:\n        return \"Normal weight\"\n    elif bmi &lt; 30:\n        return \"Overweight\"\n    else:\n        return \"Obese\"\n\n# Usage\nweight = 70  # kg\nheight = 1.75  # m\nbmi = calculate_bmi(weight, height)\ncategory = get_bmi_category(bmi)\n\nprint(f\"BMI: {bmi:.1f} ({category})\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Functions - Organizing and Reusing Code</span>"
    ]
  },
  {
    "objectID": "book/06-functions.html#practical-example-file-processing-function",
    "href": "book/06-functions.html#practical-example-file-processing-function",
    "title": "6  Functions - Organizing and Reusing Code",
    "section": "6.10 Practical Example: File Processing Function",
    "text": "6.10 Practical Example: File Processing Function\n\n\n\n\n\n\n📁 Upload and Process Text Files\n\n\n\nTry uploading a text file (.txt) to see this file processing function in action!\n\n\n\n\n\ntextfile.txt\n\n# Upload a text file to process it\n\ndef analyze_text_file(filename):\n    \"\"\"\n    Analyze a text file and return statistics.\n    \n    Args:\n        filename (str): Path to the text file\n        \n    Returns:\n        dict: Dictionary containing file statistics\n    \"\"\"\n    try:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        \n        # Calculate statistics\n        stats = {\n            'characters': len(content),\n            'characters_no_spaces': len(content.replace(' ', '')),\n            'words': len(content.split()),\n            'lines': len(content.splitlines()),\n            'paragraphs': len([p for p in content.split('\\n\\n') if p.strip()]),\n            'average_word_length': sum(len(word.strip('.,!?;:\"()[]{}')) \n                                     for word in content.split()) / len(content.split()) if content.split() else 0\n        }\n        \n        return stats\n        \n    except FileNotFoundError:\n        return {'error': 'File not found. Please upload a text file.'}\n    except Exception as e:\n        return {'error': f'Error reading file: {e}'}\n\ndef display_text_statistics(stats):\n    \"\"\"Display text statistics in a formatted way.\"\"\"\n    if 'error' in stats:\n        print(f\"❌ {stats['error']}\")\n        return\n    \n    print(\"📄 Text File Analysis\")\n    print(\"=\" * 25)\n    print(f\"📝 Characters (total): {stats['characters']:,}\")\n    print(f\"🔤 Characters (no spaces): {stats['characters_no_spaces']:,}\")\n    print(f\"💬 Words: {stats['words']:,}\")\n    print(f\"📃 Lines: {stats['lines']:,}\")\n    print(f\"📄 Paragraphs: {stats['paragraphs']:,}\")\n    print(f\"📏 Average word length: {stats['average_word_length']:.1f} characters\")\n    \n    # Calculate reading time (average 200 words per minute)\n    reading_time = stats['words'] / 200\n    print(f\"⏱️ Estimated reading time: {reading_time:.1f} minutes\")\n\n# Try to analyze uploaded file\ntry:\n    import os\n    files = [f for f in os.listdir('.') if f.endswith('.txt')]\n    if files:\n        filename = files[0]  # Process the first text file found\n        print(f\"Processing file: {filename}\")\n        print()\n        \n        result = analyze_text_file(filename)\n        display_text_statistics(result)\n        \n    else:\n        print(\"📁 No text file uploaded yet.\")\n        print(\"Try uploading a .txt file to see the analysis!\")\n        print(\"\\n🎯 Example of what you'll see:\")\n        \n        # Demo with sample text\n        sample_stats = {\n            'characters': 150,\n            'characters_no_spaces': 125,\n            'words': 25,\n            'lines': 5,\n            'paragraphs': 2,\n            'average_word_length': 5.2\n        }\n        display_text_statistics(sample_stats)\n        \nexcept Exception as e:\n    print(\"📁 Upload a text file above to analyze it!\")\n\n\n\n\n\n\n\n\n🎯 Try This\n\n\n\n\nCreate a simple text file on your computer\nDrag and drop it into the code area above\nSee the function analyze your text in real-time!",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Functions - Organizing and Reusing Code</span>"
    ]
  },
  {
    "objectID": "book/06-functions.html#common-pitfalls",
    "href": "book/06-functions.html#common-pitfalls",
    "title": "6  Functions - Organizing and Reusing Code",
    "section": "6.11 Common Pitfalls",
    "text": "6.11 Common Pitfalls\n\nMutable Default Arguments\n\n# Wrong\ndef add_item(item, target_list=[]):\n    target_list.append(item)\n    return target_list\n\n# Right\ndef add_item(item, target_list=None):\n    if target_list is None:\n        target_list = []\n    target_list.append(item)\n    return target_list\n\nModifying Global State Unnecessarily\nFunctions That Are Too Long\nNot Handling Edge Cases",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Functions - Organizing and Reusing Code</span>"
    ]
  },
  {
    "objectID": "book/06-functions.html#next-steps",
    "href": "book/06-functions.html#next-steps",
    "title": "6  Functions - Organizing and Reusing Code",
    "section": "6.12 Next Steps",
    "text": "6.12 Next Steps\nExcellent! You now understand how to create and use functions effectively. Next, we’ll dive into Object-Oriented Programming to learn how to organize code with classes and objects.",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Functions - Organizing and Reusing Code</span>"
    ]
  },
  {
    "objectID": "book/06-functions.html#resources",
    "href": "book/06-functions.html#resources",
    "title": "6  Functions - Organizing and Reusing Code",
    "section": "6.13 Resources",
    "text": "6.13 Resources\n\nPython Functions Documentation\nReal Python: Python Functions\nPEP 257: Docstring Conventions",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Functions - Organizing and Reusing Code</span>"
    ]
  },
  {
    "objectID": "book/self-review-1.html",
    "href": "book/self-review-1.html",
    "title": "7  Self-Review: Python Fundamentals",
    "section": "",
    "text": "7.1 📝 Knowledge Assessment\nTest your understanding of Python basics with this comprehensive review section.",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Self-Review: Python Fundamentals</span>"
    ]
  },
  {
    "objectID": "book/self-review-1.html#knowledge-assessment",
    "href": "book/self-review-1.html#knowledge-assessment",
    "title": "7  Self-Review: Python Fundamentals",
    "section": "",
    "text": "7.1.1 Section 1: Variables and Data Types\nQuestion 1: What will be the output of the following code?\nx = 5\ny = \"5\"\nprint(x + y)\nAnswer: This will raise a TypeError because you cannot add an integer and a string directly.\nQuestion 2: Which of these variable names are valid in Python? - 2name ❌ - first_name ✅ - first-name ❌ - _private ✅ - class ❌ (reserved keyword)\nQuestion 3: What’s the difference between these string formatting methods?\nname = \"Alice\"\nage = 25\n\n# Method 1\nprint(\"Name: %s, Age: %d\" % (name, age))\n\n# Method 2\nprint(\"Name: {}, Age: {}\".format(name, age))\n\n# Method 3\nprint(f\"Name: {name}, Age: {age}\")\nAnswer: All produce the same output, but f-strings (Method 3) are the most modern and efficient approach.\n\n\n7.1.2 Section 2: Data Collections\nQuestion 4: What’s the output of this code?\nmy_list = [1, 2, 3]\nmy_tuple = (1, 2, 3)\nmy_set = {1, 2, 3, 2, 1}\n\nprint(len(my_list), len(my_tuple), len(my_set))\nAnswer: 3 3 3 - Sets automatically remove duplicates.\nQuestion 5: How do you safely access a dictionary key that might not exist?\nstudent = {\"name\": \"Alice\", \"age\": 20}\n\n# Option A (may cause KeyError)\ngrade = student[\"grade\"]\n\n# Option B (safe access)\ngrade = student.get(\"grade\", \"Not found\")\nAnswer: Option B is safer - get() returns a default value if the key doesn’t exist.\n\n\n7.1.3 Section 3: Control Flow\nQuestion 6: What does this FizzBuzz implementation output for n=15?\nn = 15\nif n % 15 == 0:\n    print(\"FizzBuzz\")\nelif n % 3 == 0:\n    print(\"Fizz\")\nelif n % 5 == 0:\n    print(\"Buzz\")\nelse:\n    print(n)\nAnswer: “FizzBuzz” - because 15 is divisible by both 3 and 5.\nQuestion 7: How many times will this loop execute?\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 2\nAnswer: 3 times, printing 0, 2, 4.\n\n\n7.1.4 Section 4: Functions\nQuestion 8: What will this function return?\ndef mystery_function(x, y=10):\n    if x &gt; y:\n        return x\n    return y\n\nresult = mystery_function(5)\nAnswer: 10 - because y defaults to 10, and 5 is not greater than 10.\nQuestion 9: What’s wrong with this function?\ndef add_to_list(item, my_list=[]):\n    my_list.append(item)\n    return my_list\nAnswer: Mutable default argument! The same list is reused across function calls, causing unexpected behavior.",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Self-Review: Python Fundamentals</span>"
    ]
  },
  {
    "objectID": "book/self-review-1.html#coding-challenges",
    "href": "book/self-review-1.html#coding-challenges",
    "title": "7  Self-Review: Python Fundamentals",
    "section": "7.2 💻 Coding Challenges",
    "text": "7.2 💻 Coding Challenges\n\n7.2.1 Challenge 1: Data Analysis\nWrite a program that analyzes a list of student grades:\n\ndef analyze_grades(grades):\n    \"\"\"\n    Analyze a list of student grades.\n    \n    Returns a dictionary with statistics.\n    \"\"\"\n    if not grades:\n        return {\"error\": \"No grades provided\"}\n    \n    total = sum(grades)\n    count = len(grades)\n    average = total / count\n    \n    passing_grades = [g for g in grades if g &gt;= 60]\n    passing_rate = len(passing_grades) / count * 100\n    \n    return {\n        \"total_students\": count,\n        \"average\": round(average, 2),\n        \"highest\": max(grades),\n        \"lowest\": min(grades),\n        \"passing_rate\": round(passing_rate, 2)\n    }\n\n# Test the function\ntest_grades = [85, 92, 78, 65, 88, 76, 95, 58, 82, 90]\nstats = analyze_grades(test_grades)\n\nprint(\"Grade Analysis:\")\nfor key, value in stats.items():\n    print(f\"  {key.replace('_', ' ').title()}: {value}\")\n\n\n\n7.2.2 Challenge 2: Text Processing\nCreate a word frequency analyzer:\n\ndef word_frequency(text):\n    \"\"\"\n    Count frequency of words in text.\n    \n    Returns dictionary with word counts.\n    \"\"\"\n    # Convert to lowercase and split into words\n    words = text.lower().replace(\",\", \"\").replace(\".\", \"\").split()\n    \n    frequency = {}\n    for word in words:\n        frequency[word] = frequency.get(word, 0) + 1\n    \n    return frequency\n\ndef most_common_words(text, n=3):\n    \"\"\"Find the n most common words.\"\"\"\n    freq = word_frequency(text)\n    \n    # Sort by frequency (descending)\n    sorted_words = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_words[:n]\n\n# Test the functions\nsample_text = \"Python is great. Python is powerful. Python is fun and Python is easy to learn.\"\n\nprint(\"Word Frequencies:\")\nfrequencies = word_frequency(sample_text)\nfor word, count in frequencies.items():\n    print(f\"  {word}: {count}\")\n\nprint(f\"\\nTop 3 most common words:\")\ntop_words = most_common_words(sample_text, 3)\nfor word, count in top_words:\n    print(f\"  {word}: {count} times\")\n\n\n\n7.2.3 Challenge 3: Number Games\nImplement a guessing game:\n\nimport random\n\ndef number_guessing_game(secret_number=None, max_attempts=6):\n    \"\"\"\n    Number guessing game simulation.\n    \"\"\"\n    if secret_number is None:\n        secret_number = random.randint(1, 100)\n    \n    print(\"Welcome to the Number Guessing Game!\")\n    print(\"I'm thinking of a number between 1 and 100.\")\n    print(f\"You have {max_attempts} attempts.\")\n    \n    # Simulate some guesses for demonstration\n    demo_guesses = [50, 25, 75, secret_number]\n    \n    for attempt in range(1, max_attempts + 1):\n        if attempt &lt;= len(demo_guesses):\n            guess = demo_guesses[attempt - 1]\n        else:\n            guess = secret_number  # Auto-win if demo runs out\n        \n        print(f\"\\nAttempt {attempt}: Guess = {guess}\")\n        \n        if guess == secret_number:\n            print(f\"🎉 Congratulations! You guessed it in {attempt} attempts!\")\n            return True\n        elif guess &lt; secret_number:\n            print(\"Too low! Try a higher number.\")\n        else:\n            print(\"Too high! Try a lower number.\")\n    \n    print(f\"\\n😞 Game over! The number was {secret_number}\")\n    return False\n\n# Play the game\nnumber_guessing_game(secret_number=67)\n\n\n\n7.2.4 Challenge 4: Data Structures Practice\nBuild a simple contact book:\n\nclass ContactBook:\n    \"\"\"Simple contact book implementation.\"\"\"\n    \n    def __init__(self):\n        self.contacts = {}\n    \n    def add_contact(self, name, phone, email=None):\n        \"\"\"Add a new contact.\"\"\"\n        self.contacts[name] = {\n            \"phone\": phone,\n            \"email\": email\n        }\n        print(f\"Added contact: {name}\")\n    \n    def find_contact(self, name):\n        \"\"\"Find a contact by name.\"\"\"\n        if name in self.contacts:\n            return self.contacts[name]\n        return None\n    \n    def list_contacts(self):\n        \"\"\"List all contacts.\"\"\"\n        if not self.contacts:\n            print(\"No contacts found.\")\n            return\n        \n        print(\"Contact List:\")\n        for name, info in self.contacts.items():\n            phone = info[\"phone\"]\n            email = info.get(\"email\", \"No email\")\n            print(f\"  {name}: {phone} | {email}\")\n    \n    def remove_contact(self, name):\n        \"\"\"Remove a contact.\"\"\"\n        if name in self.contacts:\n            del self.contacts[name]\n            print(f\"Removed contact: {name}\")\n        else:\n            print(f\"Contact '{name}' not found.\")\n\n# Demonstrate the contact book\nbook = ContactBook()\n\n# Add some contacts\nbook.add_contact(\"Alice Johnson\", \"555-0123\", \"alice@email.com\")\nbook.add_contact(\"Bob Smith\", \"555-0456\")\nbook.add_contact(\"Charlie Brown\", \"555-0789\", \"charlie@email.com\")\n\n# List all contacts\nbook.list_contacts()\n\n# Find a specific contact\ncontact = book.find_contact(\"Alice Johnson\")\nif contact:\n    print(f\"\\nFound Alice: {contact}\")\n\n# Remove a contact\nbook.remove_contact(\"Bob Smith\")\nprint(\"\\nAfter removal:\")\nbook.list_contacts()",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Self-Review: Python Fundamentals</span>"
    ]
  },
  {
    "objectID": "book/self-review-1.html#logic-puzzles",
    "href": "book/self-review-1.html#logic-puzzles",
    "title": "7  Self-Review: Python Fundamentals",
    "section": "7.3 🧩 Logic Puzzles",
    "text": "7.3 🧩 Logic Puzzles\n\n7.3.1 Puzzle 1: Pattern Recognition\nWhat comes next in this sequence?\nsequence = [1, 1, 2, 3, 5, 8, 13, ?, ?]\nAnswer: 21, 34 (Fibonacci sequence)\n\n\n7.3.2 Puzzle 2: String Manipulation\nWrite a function to check if a string is a palindrome:\n\ndef is_palindrome(text):\n    \"\"\"Check if text reads the same forwards and backwards.\"\"\"\n    # Remove spaces and convert to lowercase\n    cleaned = text.replace(\" \", \"\").lower()\n    \n    # Compare with its reverse\n    return cleaned == cleaned[::-1]\n\n# Test cases\ntest_cases = [\"racecar\", \"A man a plan a canal Panama\", \"hello\", \"Madam\"]\n\nfor test in test_cases:\n    result = is_palindrome(test)\n    print(f\"'{test}' is palindrome: {result}\")\n\n\n\n7.3.3 Puzzle 3: Mathematical Challenge\nFind all perfect numbers up to 1000:\n\ndef is_perfect_number(n):\n    \"\"\"Check if n is a perfect number (equals sum of its proper divisors).\"\"\"\n    if n &lt;= 1:\n        return False\n    \n    divisor_sum = 1  # 1 is always a proper divisor\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisor_sum += i\n            if i != n // i:  # Avoid counting the square root twice\n                divisor_sum += n // i\n    \n    return divisor_sum == n\n\ndef find_perfect_numbers(limit):\n    \"\"\"Find all perfect numbers up to limit.\"\"\"\n    perfect_numbers = []\n    for num in range(1, limit + 1):\n        if is_perfect_number(num):\n            perfect_numbers.append(num)\n    return perfect_numbers\n\n# Find perfect numbers\nperfect_nums = find_perfect_numbers(1000)\nprint(f\"Perfect numbers up to 1000: {perfect_nums}\")\n\n# Show why 6 is perfect\nif 6 in perfect_nums:\n    divisors = [1, 2, 3]  # Proper divisors of 6\n    print(f\"6 is perfect because: {' + '.join(map(str, divisors))} = {sum(divisors)}\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Self-Review: Python Fundamentals</span>"
    ]
  },
  {
    "objectID": "book/self-review-1.html#performance-challenges",
    "href": "book/self-review-1.html#performance-challenges",
    "title": "7  Self-Review: Python Fundamentals",
    "section": "7.4 📊 Performance Challenges",
    "text": "7.4 📊 Performance Challenges\n\n7.4.1 Time Complexity Practice\nCompare different approaches to find duplicates in a list:\n\nimport time\n\ndef find_duplicates_nested(lst):\n    \"\"\"O(n²) approach using nested loops.\"\"\"\n    duplicates = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j] and lst[i] not in duplicates:\n                duplicates.append(lst[i])\n    return duplicates\n\ndef find_duplicates_set(lst):\n    \"\"\"O(n) approach using set.\"\"\"\n    seen = set()\n    duplicates = set()\n    \n    for item in lst:\n        if item in seen:\n            duplicates.add(item)\n        else:\n            seen.add(item)\n    \n    return list(duplicates)\n\n# Test with a larger dataset\ntest_data = [1, 2, 3, 4, 5, 2, 6, 7, 8, 9, 3, 10] * 100\n\n# Time the nested approach\nstart = time.time()\ndups1 = find_duplicates_nested(test_data[:50])  # Smaller dataset for nested\ntime_nested = time.time() - start\n\n# Time the set approach\nstart = time.time()\ndups2 = find_duplicates_set(test_data)\ntime_set = time.time() - start\n\nprint(f\"Nested loops (50 items): {time_nested:.6f} seconds\")\nprint(f\"Set approach (1200 items): {time_set:.6f} seconds\")\nprint(f\"Set approach is much faster for large datasets!\")",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Self-Review: Python Fundamentals</span>"
    ]
  },
  {
    "objectID": "book/self-review-1.html#final-assessment",
    "href": "book/self-review-1.html#final-assessment",
    "title": "7  Self-Review: Python Fundamentals",
    "section": "7.5 🏆 Final Assessment",
    "text": "7.5 🏆 Final Assessment\n\n7.5.1 Comprehensive Project: Student Grade Manager\n\nclass Student:\n    \"\"\"Represent a student with grades.\"\"\"\n    \n    def __init__(self, name, student_id):\n        self.name = name\n        self.student_id = student_id\n        self.grades = []\n    \n    def add_grade(self, grade):\n        \"\"\"Add a grade (0-100).\"\"\"\n        if 0 &lt;= grade &lt;= 100:\n            self.grades.append(grade)\n        else:\n            print(f\"Invalid grade: {grade}. Must be 0-100.\")\n    \n    def get_average(self):\n        \"\"\"Calculate average grade.\"\"\"\n        if not self.grades:\n            return 0\n        return sum(self.grades) / len(self.grades)\n    \n    def get_letter_grade(self):\n        \"\"\"Get letter grade based on average.\"\"\"\n        avg = self.get_average()\n        if avg &gt;= 90:\n            return \"A\"\n        elif avg &gt;= 80:\n            return \"B\"\n        elif avg &gt;= 70:\n            return \"C\"\n        elif avg &gt;= 60:\n            return \"D\"\n        else:\n            return \"F\"\n    \n    def __str__(self):\n        avg = self.get_average()\n        letter = self.get_letter_grade()\n        return f\"{self.name} (ID: {self.student_id}): {avg:.1f} ({letter})\"\n\nclass GradeBook:\n    \"\"\"Manage multiple students and their grades.\"\"\"\n    \n    def __init__(self):\n        self.students = {}\n    \n    def add_student(self, name, student_id):\n        \"\"\"Add a new student.\"\"\"\n        if student_id not in self.students:\n            self.students[student_id] = Student(name, student_id)\n            print(f\"Added student: {name}\")\n        else:\n            print(f\"Student ID {student_id} already exists.\")\n    \n    def add_grade(self, student_id, grade):\n        \"\"\"Add grade to a student.\"\"\"\n        if student_id in self.students:\n            self.students[student_id].add_grade(grade)\n        else:\n            print(f\"Student ID {student_id} not found.\")\n    \n    def get_class_average(self):\n        \"\"\"Calculate class average.\"\"\"\n        if not self.students:\n            return 0\n        \n        total_avg = sum(student.get_average() for student in self.students.values())\n        return total_avg / len(self.students)\n    \n    def get_honor_roll(self, min_average=85):\n        \"\"\"Get students on honor roll.\"\"\"\n        return [student for student in self.students.values() \n                if student.get_average() &gt;= min_average]\n    \n    def print_report(self):\n        \"\"\"Print comprehensive class report.\"\"\"\n        print(\"=\" * 50)\n        print(\"GRADE BOOK REPORT\")\n        print(\"=\" * 50)\n        \n        for student in self.students.values():\n            print(student)\n        \n        print(f\"\\nClass Average: {self.get_class_average():.1f}\")\n        \n        honor_students = self.get_honor_roll()\n        if honor_students:\n            print(f\"\\nHonor Roll ({len(honor_students)} students):\")\n            for student in honor_students:\n                print(f\"  {student.name}: {student.get_average():.1f}\")\n\n# Demonstrate the grade book system\ngradebook = GradeBook()\n\n# Add students\ngradebook.add_student(\"Alice Johnson\", \"001\")\ngradebook.add_student(\"Bob Smith\", \"002\")\ngradebook.add_student(\"Charlie Brown\", \"003\")\n\n# Add grades\ngradebook.add_grade(\"001\", 95)\ngradebook.add_grade(\"001\", 87)\ngradebook.add_grade(\"001\", 92)\n\ngradebook.add_grade(\"002\", 78)\ngradebook.add_grade(\"002\", 82)\ngradebook.add_grade(\"002\", 85)\n\ngradebook.add_grade(\"003\", 88)\ngradebook.add_grade(\"003\", 91)\ngradebook.add_grade(\"003\", 89)\n\n# Generate report\ngradebook.print_report()",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Self-Review: Python Fundamentals</span>"
    ]
  },
  {
    "objectID": "book/self-review-1.html#review-summary",
    "href": "book/self-review-1.html#review-summary",
    "title": "7  Self-Review: Python Fundamentals",
    "section": "7.6 🎯 Review Summary",
    "text": "7.6 🎯 Review Summary\n\n7.6.1 Key Concepts Mastered\n\n✅ Variables and data types\n✅ Data structures (lists, tuples, dictionaries, sets)\n✅ Control flow (if/else, loops)\n✅ Functions and scope\n✅ Error handling basics\n✅ Code organization and best practices\n\n\n\n7.6.2 Areas for Continued Practice\n\nAlgorithm efficiency - Understanding time/space complexity\nError handling - More robust exception handling\nFile I/O - Reading and writing files\nObject-oriented programming - Classes and inheritance\nExternal libraries - Using pip packages\n\n\n\n7.6.3 Next Learning Path\nReady to advance? Here’s your roadmap: 1. Object-Oriented Programming - Classes, inheritance, polymorphism 2. File Handling - Working with files and data persistence 3. Error Handling - Exception handling and debugging 4. Libraries and Modules - Using and creating Python packages 5. Real-world Projects - Building complete applications\nCongratulations on completing the Python fundamentals! You now have a solid foundation to build upon. Keep practicing and experimenting with code - that’s the best way to become a proficient programmer! 🐍✨",
    "crumbs": [
      "Python Basics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Self-Review: Python Fundamentals</span>"
    ]
  },
  {
    "objectID": "book/07-classes.html",
    "href": "book/07-classes.html",
    "title": "8  Classes and Objects - Introduction to OOP",
    "section": "",
    "text": "8.1 Why Object-Oriented Programming?\nObject-Oriented Programming (OOP) is a programming paradigm that organizes code into classes and objects, making it easier to build complex, maintainable applications.\n# Without OOP - procedural approach\ndef create_student(name, age, grades):\n    return {\"name\": name, \"age\": age, \"grades\": grades}\n\ndef add_grade(student, grade):\n    student[\"grades\"].append(grade)\n\ndef get_average(student):\n    return sum(student[\"grades\"]) / len(student[\"grades\"])\n\n# Using the functions\nstudent1 = create_student(\"Alice\", 20, [85, 90, 78])\nadd_grade(student1, 92)\nprint(f\"Average: {get_average(student1):.1f}\")\n\n# With OOP - cleaner and more organized\nclass Student:\n    def __init__(self, name, age, grades=None):\n        self.name = name\n        self.age = age\n        self.grades = grades or []\n    \n    def add_grade(self, grade):\n        self.grades.append(grade)\n    \n    def get_average(self):\n        if not self.grades:\n            return 0\n        return sum(self.grades) / len(self.grades)\n\n# Using the class\nstudent2 = Student(\"Bob\", 19, [88, 92, 85])\nstudent2.add_grade(90)\nprint(f\"Average: {student2.get_average():.1f}\")",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Classes and Objects - Introduction to OOP</span>"
    ]
  },
  {
    "objectID": "book/07-classes.html#creating-classes",
    "href": "book/07-classes.html#creating-classes",
    "title": "8  Classes and Objects - Introduction to OOP",
    "section": "8.2 Creating Classes",
    "text": "8.2 Creating Classes\n\n8.2.1 Basic Class Definition\n\nclass Car:\n    \"\"\"A simple car class.\"\"\"\n    \n    def __init__(self, make, model, year):\n        \"\"\"Initialize a new car.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = 0\n    \n    def drive(self, miles):\n        \"\"\"Drive the car and update mileage.\"\"\"\n        self.mileage += miles\n        print(f\"Drove {miles} miles. Total mileage: {self.mileage}\")\n    \n    def get_info(self):\n        \"\"\"Return car information.\"\"\"\n        return f\"{self.year} {self.make} {self.model} - {self.mileage} miles\"\n\n# Creating instances (objects)\nmy_car = Car(\"Toyota\", \"Camry\", 2022)\nprint(my_car.get_info())\n\nmy_car.drive(150)\nmy_car.drive(75)\nprint(my_car.get_info())\n\n\n\n8.2.2 Class vs Instance Attributes\n\nclass BankAccount:\n    \"\"\"Bank account with class and instance attributes.\"\"\"\n    \n    # Class attribute - shared by all instances\n    bank_name = \"Python Bank\"\n    interest_rate = 0.02\n    \n    def __init__(self, account_holder, initial_balance=0):\n        \"\"\"Initialize account with instance attributes.\"\"\"\n        # Instance attributes - unique to each object\n        self.account_holder = account_holder\n        self.balance = initial_balance\n        self.transaction_count = 0\n    \n    def deposit(self, amount):\n        \"\"\"Deposit money to account.\"\"\"\n        if amount &gt; 0:\n            self.balance += amount\n            self.transaction_count += 1\n            print(f\"Deposited ${amount:.2f}. New balance: ${self.balance:.2f}\")\n        else:\n            print(\"Deposit amount must be positive\")\n    \n    def withdraw(self, amount):\n        \"\"\"Withdraw money from account.\"\"\"\n        if amount &gt; 0 and amount &lt;= self.balance:\n            self.balance -= amount\n            self.transaction_count += 1\n            print(f\"Withdrew ${amount:.2f}. New balance: ${self.balance:.2f}\")\n        else:\n            print(\"Insufficient funds or invalid amount\")\n    \n    def apply_interest(self):\n        \"\"\"Apply interest to account.\"\"\"\n        interest = self.balance * self.interest_rate\n        self.balance += interest\n        print(f\"Interest applied: ${interest:.2f}\")\n\n# Create accounts\naccount1 = BankAccount(\"Alice Johnson\", 1000)\naccount2 = BankAccount(\"Bob Smith\", 500)\n\nprint(f\"Bank: {BankAccount.bank_name}\")\nprint(f\"Interest rate: {BankAccount.interest_rate * 100}%\")\n\naccount1.deposit(200)\naccount1.withdraw(150)\naccount1.apply_interest()\n\nprint(f\"Alice's transactions: {account1.transaction_count}\")\nprint(f\"Bob's balance: ${account2.balance:.2f}\")",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Classes and Objects - Introduction to OOP</span>"
    ]
  },
  {
    "objectID": "book/07-classes.html#methods-and-properties",
    "href": "book/07-classes.html#methods-and-properties",
    "title": "8  Classes and Objects - Introduction to OOP",
    "section": "8.3 Methods and Properties",
    "text": "8.3 Methods and Properties\n\n8.3.1 Instance Methods\n\nclass Rectangle:\n    \"\"\"Rectangle class with various methods.\"\"\"\n    \n    def __init__(self, width, height):\n        \"\"\"Initialize rectangle with width and height.\"\"\"\n        self.width = width\n        self.height = height\n    \n    def area(self):\n        \"\"\"Calculate area of rectangle.\"\"\"\n        return self.width * self.height\n    \n    def perimeter(self):\n        \"\"\"Calculate perimeter of rectangle.\"\"\"\n        return 2 * (self.width + self.height)\n    \n    def is_square(self):\n        \"\"\"Check if rectangle is a square.\"\"\"\n        return self.width == self.height\n    \n    def scale(self, factor):\n        \"\"\"Scale rectangle by a factor.\"\"\"\n        self.width *= factor\n        self.height *= factor\n    \n    def __str__(self):\n        \"\"\"String representation of rectangle.\"\"\"\n        return f\"Rectangle({self.width}x{self.height})\"\n\n# Test the Rectangle class\nrect = Rectangle(5, 3)\nprint(rect)\nprint(f\"Area: {rect.area()}\")\nprint(f\"Perimeter: {rect.perimeter()}\")\nprint(f\"Is square: {rect.is_square()}\")\n\nrect.scale(2)\nprint(f\"After scaling: {rect}\")\nprint(f\"New area: {rect.area()}\")\n\n\n\n8.3.2 Class Methods and Static Methods\nPython offers three types of methods in classes, each serving different purposes:\n\nInstance methods (regular methods): Work with instance data\nClass methods (@classmethod): Work with class data, receive class as first parameter\nStatic methods (@staticmethod): Independent utilities, don’t need class or instance\n\nWhen to use each: - Instance method: When you need access to instance attributes (self.name, self.age) - Class method: When you need access to class attributes or want alternative constructors - Static method: When the function is related to the class but doesn’t need class/instance data\n\nclass MathUtils:\n    \"\"\"Utility class demonstrating different method types.\"\"\"\n    \n    pi = 3.14159  # Class attribute - shared by all instances\n    \n    def __init__(self, name):\n        self.name = name  # Instance attribute - unique to each instance\n    \n    @classmethod\n    def circle_area(cls, radius):\n        \"\"\"Class method - has access to class attributes via 'cls'.\"\"\"\n        # 'cls' refers to the class itself (MathUtils)\n        # We can access class attributes like cls.pi\n        return cls.pi * radius ** 2\n    \n    @staticmethod\n    def is_even(number):\n        \"\"\"Static method - completely independent utility function.\"\"\"\n        # No access to class or instance data\n        # Could be a regular function, but logically belongs with this class\n        return number % 2 == 0\n    \n    @staticmethod\n    def factorial(n):\n        \"\"\"Another static method - pure calculation, no class data needed.\"\"\"\n        if n &lt;= 1:\n            return 1\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n    \n    def instance_method_example(self):\n        \"\"\"Instance method - has access to instance data via 'self'.\"\"\"\n        return f\"This is {self.name} speaking!\"\n\n# Using class methods - call directly on the class\nprint(f\"Circle area (radius 5): {MathUtils.circle_area(5):.2f}\")\n\n# Using static methods - call directly on the class\nprint(f\"Is 8 even? {MathUtils.is_even(8)}\")\nprint(f\"Factorial of 5: {MathUtils.factorial(5)}\")\n\n# Can also call static/class methods on instances (but not common)\nmath_helper = MathUtils(\"Helper\")\nprint(f\"Is 7 even? {math_helper.is_even(7)}\")\nprint(f\"Instance method: {math_helper.instance_method_example()}\")\n\nMemory tip: - Instance methods: “I need self to work with MY data” - Class methods: “I need the cls to work with OUR shared data”\n- Static methods: “I don’t need any special data, I’m just a utility function”\n\n\n8.3.3 Properties with @property\n\nclass Temperature:\n    \"\"\"Temperature class with property decorators.\"\"\"\n    \n    def __init__(self, celsius=0):\n        \"\"\"Initialize with Celsius temperature.\"\"\"\n        self._celsius = celsius\n    \n    @property\n    def celsius(self):\n        \"\"\"Get temperature in Celsius.\"\"\"\n        return self._celsius\n    \n    @celsius.setter\n    def celsius(self, value):\n        \"\"\"Set temperature in Celsius with validation.\"\"\"\n        if value &lt; -273.15:\n            raise ValueError(\"Temperature cannot be below absolute zero\")\n        self._celsius = value\n    \n    @property\n    def fahrenheit(self):\n        \"\"\"Get temperature in Fahrenheit.\"\"\"\n        return (self._celsius * 9/5) + 32\n    \n    @fahrenheit.setter\n    def fahrenheit(self, value):\n        \"\"\"Set temperature using Fahrenheit.\"\"\"\n        self.celsius = (value - 32) * 5/9\n    \n    @property\n    def kelvin(self):\n        \"\"\"Get temperature in Kelvin.\"\"\"\n        return self._celsius + 273.15\n    \n    def __str__(self):\n        return f\"{self._celsius:.1f}°C ({self.fahrenheit:.1f}°F, {self.kelvin:.1f}K)\"\n\n# Using properties\ntemp = Temperature(25)\nprint(f\"Initial: {temp}\")\n\ntemp.fahrenheit = 86  # Set using Fahrenheit\nprint(f\"After setting 86°F: {temp}\")\n\ntemp.celsius = 0  # Set using Celsius\nprint(f\"Freezing point: {temp}\")\n\ntry:\n    temp.celsius = -300  # This will raise an error\nexcept ValueError as e:\n    print(f\"Error: {e}\")",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Classes and Objects - Introduction to OOP</span>"
    ]
  },
  {
    "objectID": "book/07-classes.html#special-methods-magic-methods",
    "href": "book/07-classes.html#special-methods-magic-methods",
    "title": "8  Classes and Objects - Introduction to OOP",
    "section": "8.4 Special Methods (Magic Methods)",
    "text": "8.4 Special Methods (Magic Methods)\n\n8.4.1 String Representation and Comparison\n\nclass Person:\n    \"\"\"Person class with magic methods.\"\"\"\n    \n    def __init__(self, name, age, height):\n        self.name = name\n        self.age = age\n        self.height = height  # in cm\n    \n    def __str__(self):\n        \"\"\"Human-readable string representation.\"\"\"\n        return f\"{self.name}, {self.age} years old\"\n    \n    def __repr__(self):\n        \"\"\"Developer-friendly representation.\"\"\"\n        return f\"Person('{self.name}', {self.age}, {self.height})\"\n    \n    def __eq__(self, other):\n        \"\"\"Check equality based on name and age.\"\"\"\n        if isinstance(other, Person):\n            return self.name == other.name and self.age == other.age\n        return False\n    \n    def __lt__(self, other):\n        \"\"\"Compare based on age for sorting.\"\"\"\n        if isinstance(other, Person):\n            return self.age &lt; other.age\n        return NotImplemented\n    \n    def __len__(self):\n        \"\"\"Return height as 'length' of person.\"\"\"\n        return self.height\n\n# Test magic methods\nperson1 = Person(\"Alice\", 25, 165)\nperson2 = Person(\"Bob\", 30, 180)\nperson3 = Person(\"Alice\", 25, 170)\n\nprint(f\"str(person1): {str(person1)}\")\nprint(f\"repr(person1): {repr(person1)}\")\n\nprint(f\"person1 == person3: {person1 == person3}\")\nprint(f\"person1 &lt; person2: {person1 &lt; person2}\")\nprint(f\"len(person1): {len(person1)} cm\")\n\n# Sorting people by age\npeople = [person2, person1, Person(\"Charlie\", 20, 175)]\nsorted_people = sorted(people)\nprint(\"Sorted by age:\")\nfor person in sorted_people:\n    print(f\"  {person}\")\n\n\n\n8.4.2 Arithmetic Operations\n\nclass Vector2D:\n    \"\"\"2D vector with arithmetic operations.\"\"\"\n    \n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __str__(self):\n        return f\"Vector2D({self.x}, {self.y})\"\n    \n    def __add__(self, other):\n        \"\"\"Add two vectors.\"\"\"\n        if isinstance(other, Vector2D):\n            return Vector2D(self.x + other.x, self.y + other.y)\n        return NotImplemented\n    \n    def __sub__(self, other):\n        \"\"\"Subtract two vectors.\"\"\"\n        if isinstance(other, Vector2D):\n            return Vector2D(self.x - other.x, self.y - other.y)\n        return NotImplemented\n    \n    def __mul__(self, scalar):\n        \"\"\"Multiply vector by scalar.\"\"\"\n        if isinstance(scalar, (int, float)):\n            return Vector2D(self.x * scalar, self.y * scalar)\n        return NotImplemented\n    \n    def __rmul__(self, scalar):\n        \"\"\"Right multiplication (scalar * vector).\"\"\"\n        return self.__mul__(scalar)\n    \n    def magnitude(self):\n        \"\"\"Calculate vector magnitude.\"\"\"\n        return (self.x ** 2 + self.y ** 2) ** 0.5\n    \n    def normalize(self):\n        \"\"\"Return normalized vector.\"\"\"\n        mag = self.magnitude()\n        if mag == 0:\n            return Vector2D(0, 0)\n        return Vector2D(self.x / mag, self.y / mag)\n\n# Test vector operations\nv1 = Vector2D(3, 4)\nv2 = Vector2D(1, 2)\n\nprint(f\"v1: {v1}\")\nprint(f\"v2: {v2}\")\nprint(f\"v1 + v2: {v1 + v2}\")\nprint(f\"v1 - v2: {v1 - v2}\")\nprint(f\"v1 * 2: {v1 * 2}\")\nprint(f\"3 * v2: {3 * v2}\")\nprint(f\"Magnitude of v1: {v1.magnitude():.2f}\")\nprint(f\"Normalized v1: {v1.normalize()}\")",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Classes and Objects - Introduction to OOP</span>"
    ]
  },
  {
    "objectID": "book/07-classes.html#real-world-examples",
    "href": "book/07-classes.html#real-world-examples",
    "title": "8  Classes and Objects - Introduction to OOP",
    "section": "8.5 Real-World Examples",
    "text": "8.5 Real-World Examples\n\n8.5.1 Example 1: Library Management System\n\nfrom datetime import datetime, timedelta\n\nclass Book:\n    \"\"\"Represents a book in the library.\"\"\"\n    \n    def __init__(self, title, author, isbn, copies=1):\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n        self.total_copies = copies\n        self.available_copies = copies\n        self.borrowed_by = []\n    \n    def is_available(self):\n        \"\"\"Check if book is available for borrowing.\"\"\"\n        return self.available_copies &gt; 0\n    \n    def borrow(self, member_id):\n        \"\"\"Borrow the book.\"\"\"\n        if self.is_available():\n            self.available_copies -= 1\n            due_date = datetime.now() + timedelta(days=14)\n            self.borrowed_by.append({\n                'member_id': member_id,\n                'borrowed_date': datetime.now(),\n                'due_date': due_date\n            })\n            return due_date\n        return None\n    \n    def return_book(self, member_id):\n        \"\"\"Return the book.\"\"\"\n        for i, record in enumerate(self.borrowed_by):\n            if record['member_id'] == member_id:\n                self.borrowed_by.pop(i)\n                self.available_copies += 1\n                return True\n        return False\n    \n    def __str__(self):\n        return f\"'{self.title}' by {self.author} ({self.available_copies}/{self.total_copies} available)\"\n\nclass LibraryMember:\n    \"\"\"Represents a library member.\"\"\"\n    \n    def __init__(self, name, member_id):\n        self.name = name\n        self.member_id = member_id\n        self.borrowed_books = []\n    \n    def borrow_book(self, book):\n        \"\"\"Borrow a book from the library.\"\"\"\n        due_date = book.borrow(self.member_id)\n        if due_date:\n            self.borrowed_books.append({\n                'book': book,\n                'due_date': due_date\n            })\n            print(f\"{self.name} borrowed '{book.title}' (due: {due_date.strftime('%Y-%m-%d')})\")\n            return True\n        else:\n            print(f\"Sorry, '{book.title}' is not available\")\n            return False\n    \n    def return_book(self, book):\n        \"\"\"Return a borrowed book.\"\"\"\n        for i, record in enumerate(self.borrowed_books):\n            if record['book'] == book:\n                if book.return_book(self.member_id):\n                    self.borrowed_books.pop(i)\n                    print(f\"{self.name} returned '{book.title}'\")\n                    return True\n        print(f\"{self.name} hasn't borrowed '{book.title}'\")\n        return False\n    \n    def list_borrowed_books(self):\n        \"\"\"List all borrowed books.\"\"\"\n        if not self.borrowed_books:\n            print(f\"{self.name} has no borrowed books\")\n        else:\n            print(f\"{self.name}'s borrowed books:\")\n            for record in self.borrowed_books:\n                book = record['book']\n                due_date = record['due_date']\n                print(f\"  - '{book.title}' (due: {due_date.strftime('%Y-%m-%d')})\")\n\n# Demonstrate the library system\nbook1 = Book(\"Python Programming\", \"John Doe\", \"978-0123456789\", 2)\nbook2 = Book(\"Web Development\", \"Jane Smith\", \"978-0987654321\", 1)\n\nmember1 = LibraryMember(\"Alice Johnson\", \"M001\")\nmember2 = LibraryMember(\"Bob Wilson\", \"M002\")\n\nprint(\"=== Library Management System Demo ===\")\nprint(f\"Available books:\")\nprint(f\"  {book1}\")\nprint(f\"  {book2}\")\n\n# Borrowing books\nmember1.borrow_book(book1)\nmember2.borrow_book(book1)\nmember2.borrow_book(book2)\n\nprint(f\"\\nAfter borrowing:\")\nprint(f\"  {book1}\")\nprint(f\"  {book2}\")\n\n# List borrowed books\nmember1.list_borrowed_books()\nmember2.list_borrowed_books()\n\n# Return a book\nmember1.return_book(book1)\nprint(f\"\\nAfter Alice returns the book:\")\nprint(f\"  {book1}\")\n\n\n\n8.5.2 Example 2: Game Character System\n\nimport random\n\nclass GameCharacter:\n    \"\"\"Base class for game characters.\"\"\"\n    \n    def __init__(self, name, health=100, attack_power=20, defense=10):\n        self.name = name\n        self.max_health = health\n        self.health = health\n        self.attack_power = attack_power\n        self.defense = defense\n        self.level = 1\n        self.experience = 0\n    \n    def is_alive(self):\n        \"\"\"Check if character is still alive.\"\"\"\n        return self.health &gt; 0\n    \n    def take_damage(self, damage):\n        \"\"\"Take damage with defense calculation.\"\"\"\n        actual_damage = max(1, damage - self.defense)\n        self.health = max(0, self.health - actual_damage)\n        print(f\"{self.name} takes {actual_damage} damage! Health: {self.health}/{self.max_health}\")\n        \n        if not self.is_alive():\n            print(f\"{self.name} has been defeated!\")\n    \n    def heal(self, amount):\n        \"\"\"Heal the character.\"\"\"\n        old_health = self.health\n        self.health = min(self.max_health, self.health + amount)\n        healed = self.health - old_health\n        print(f\"{self.name} heals for {healed} HP! Health: {self.health}/{self.max_health}\")\n    \n    def attack(self, target):\n        \"\"\"Attack another character.\"\"\"\n        if not self.is_alive():\n            print(f\"{self.name} cannot attack - defeated!\")\n            return\n        \n        # Add some randomness to attacks\n        damage = random.randint(int(self.attack_power * 0.8), int(self.attack_power * 1.2))\n        print(f\"{self.name} attacks {target.name} for {damage} damage!\")\n        target.take_damage(damage)\n        \n        # Gain experience\n        if not target.is_alive():\n            exp_gained = target.level * 20\n            self.gain_experience(exp_gained)\n    \n    def gain_experience(self, exp):\n        \"\"\"Gain experience and possibly level up.\"\"\"\n        self.experience += exp\n        print(f\"{self.name} gains {exp} experience!\")\n        \n        # Check for level up\n        exp_needed = self.level * 100\n        if self.experience &gt;= exp_needed:\n            self.level_up()\n    \n    def level_up(self):\n        \"\"\"Level up the character.\"\"\"\n        self.level += 1\n        self.experience = 0\n        \n        # Stat increases\n        health_increase = 20\n        attack_increase = 5\n        defense_increase = 3\n        \n        self.max_health += health_increase\n        self.health += health_increase\n        self.attack_power += attack_increase\n        self.defense += defense_increase\n        \n        print(f\"🎉 {self.name} leveled up to level {self.level}!\")\n        print(f\"   Health: +{health_increase}, Attack: +{attack_increase}, Defense: +{defense_increase}\")\n    \n    def get_stats(self):\n        \"\"\"Get character statistics.\"\"\"\n        return {\n            'name': self.name,\n            'level': self.level,\n            'health': f\"{self.health}/{self.max_health}\",\n            'attack': self.attack_power,\n            'defense': self.defense,\n            'experience': self.experience\n        }\n    \n    def __str__(self):\n        stats = self.get_stats()\n        return f\"{stats['name']} (Lv.{stats['level']}) - HP: {stats['health']}, ATK: {stats['attack']}, DEF: {stats['defense']}\"\n\nclass Warrior(GameCharacter):\n    \"\"\"Warrior class with special abilities.\"\"\"\n    \n    def __init__(self, name):\n        super().__init__(name, health=120, attack_power=25, defense=15)\n        self.shield_active = False\n    \n    def shield_bash(self, target):\n        \"\"\"Special attack that stuns and damages.\"\"\"\n        if not self.is_alive():\n            return\n        \n        damage = int(self.attack_power * 1.5)\n        print(f\"{self.name} performs Shield Bash!\")\n        print(f\"💥 Critical hit for {damage} damage!\")\n        target.take_damage(damage)\n    \n    def defensive_stance(self):\n        \"\"\"Activate defensive stance.\"\"\"\n        self.shield_active = True\n        temp_defense = self.defense * 2\n        print(f\"{self.name} enters defensive stance! Defense doubled temporarily.\")\n        return temp_defense\n\nclass Mage(GameCharacter):\n    \"\"\"Mage class with magic abilities.\"\"\"\n    \n    def __init__(self, name):\n        super().__init__(name, health=80, attack_power=30, defense=5)\n        self.mana = 100\n        self.max_mana = 100\n    \n    def fireball(self, target):\n        \"\"\"Cast fireball spell.\"\"\"\n        if not self.is_alive():\n            return\n        \n        mana_cost = 20\n        if self.mana &lt; mana_cost:\n            print(f\"{self.name} doesn't have enough mana!\")\n            return\n        \n        self.mana -= mana_cost\n        damage = int(self.attack_power * 1.8)\n        print(f\"{self.name} casts Fireball! 🔥\")\n        print(f\"Magical damage: {damage}!\")\n        target.take_damage(damage)\n        print(f\"Mana: {self.mana}/{self.max_mana}\")\n    \n    def heal_spell(self, target=None):\n        \"\"\"Cast healing spell.\"\"\"\n        mana_cost = 15\n        if self.mana &lt; mana_cost:\n            print(f\"{self.name} doesn't have enough mana!\")\n            return\n        \n        if target is None:\n            target = self\n        \n        self.mana -= mana_cost\n        heal_amount = 30\n        print(f\"{self.name} casts Heal on {target.name}! ✨\")\n        target.heal(heal_amount)\n        print(f\"Mana: {self.mana}/{self.max_mana}\")\n\n# Game demonstration\nprint(\"=== RPG Combat System Demo ===\")\n\n# Create characters\nhero = Warrior(\"Sir Galahad\")\nmage = Mage(\"Merlin\")\nenemy = GameCharacter(\"Goblin Warrior\", health=60, attack_power=15, defense=5)\n\nprint(\"Characters created:\")\nprint(f\"  {hero}\")\nprint(f\"  {mage}\")\nprint(f\"  {enemy}\")\n\nprint(\"\\n=== Combat Begins! ===\")\n\n# Combat simulation\nround_num = 1\nwhile hero.is_alive() and mage.is_alive() and enemy.is_alive():\n    print(f\"\\n--- Round {round_num} ---\")\n    \n    # Hero attacks\n    if random.choice([True, False]):\n        hero.attack(enemy)\n    else:\n        hero.shield_bash(enemy)\n    \n    if not enemy.is_alive():\n        break\n    \n    # Mage's turn\n    if mage.health &lt; 50:\n        mage.heal_spell()  # Heal self\n    else:\n        mage.fireball(enemy)\n    \n    if not enemy.is_alive():\n        break\n    \n    # Enemy attacks\n    target = random.choice([hero, mage])\n    enemy.attack(target)\n    \n    round_num += 1\n    \n    # Prevent infinite combat\n    if round_num &gt; 10:\n        print(\"Combat ended due to time limit!\")\n        break\n\nprint(\"\\n=== Combat Results ===\")\nprint(f\"Final stats:\")\nprint(f\"  {hero}\")\nprint(f\"  {mage}\")\nprint(f\"  {enemy}\")",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Classes and Objects - Introduction to OOP</span>"
    ]
  },
  {
    "objectID": "book/07-classes.html#exercises",
    "href": "book/07-classes.html#exercises",
    "title": "8  Classes and Objects - Introduction to OOP",
    "section": "8.6 Exercises",
    "text": "8.6 Exercises\n\n8.6.1 Exercise 1: Shopping Cart System\n\nclass Product:\n    \"\"\"Represents a product in the store.\"\"\"\n    \n    def __init__(self, name, price, category, stock=0):\n        self.name = name\n        self.price = price\n        self.category = category\n        self.stock = stock\n    \n    def is_in_stock(self, quantity=1):\n        \"\"\"Check if product has enough stock.\"\"\"\n        return self.stock &gt;= quantity\n    \n    def reduce_stock(self, quantity):\n        \"\"\"Reduce stock after purchase.\"\"\"\n        if self.is_in_stock(quantity):\n            self.stock -= quantity\n            return True\n        return False\n    \n    def __str__(self):\n        return f\"{self.name} - ${self.price:.2f} ({self.stock} in stock)\"\n\nclass CartItem:\n    \"\"\"Represents an item in the shopping cart.\"\"\"\n    \n    def __init__(self, product, quantity):\n        self.product = product\n        self.quantity = quantity\n    \n    def get_total_price(self):\n        \"\"\"Get total price for this cart item.\"\"\"\n        return self.product.price * self.quantity\n    \n    def __str__(self):\n        total = self.get_total_price()\n        return f\"{self.product.name} x{self.quantity} = ${total:.2f}\"\n\nclass ShoppingCart:\n    \"\"\"Shopping cart that holds products.\"\"\"\n    \n    def __init__(self):\n        self.items = []\n    \n    def add_item(self, product, quantity=1):\n        \"\"\"Add item to cart.\"\"\"\n        if not product.is_in_stock(quantity):\n            print(f\"Sorry, only {product.stock} {product.name}(s) available\")\n            return False\n        \n        # Check if product already in cart\n        for item in self.items:\n            if item.product == product:\n                item.quantity += quantity\n                print(f\"Updated {product.name} quantity to {item.quantity}\")\n                return True\n        \n        # Add new item\n        self.items.append(CartItem(product, quantity))\n        print(f\"Added {quantity} {product.name}(s) to cart\")\n        return True\n    \n    def remove_item(self, product):\n        \"\"\"Remove item from cart.\"\"\"\n        for i, item in enumerate(self.items):\n            if item.product == product:\n                removed_item = self.items.pop(i)\n                print(f\"Removed {removed_item.product.name} from cart\")\n                return True\n        print(f\"{product.name} not found in cart\")\n        return False\n    \n    def get_total(self):\n        \"\"\"Calculate total cart value.\"\"\"\n        return sum(item.get_total_price() for item in self.items)\n    \n    def checkout(self):\n        \"\"\"Process checkout.\"\"\"\n        if not self.items:\n            print(\"Cart is empty!\")\n            return False\n        \n        total = self.get_total()\n        print(\"=== CHECKOUT ===\")\n        for item in self.items:\n            print(f\"  {item}\")\n            # Reduce stock\n            item.product.reduce_stock(item.quantity)\n        \n        print(f\"Total: ${total:.2f}\")\n        print(\"Thank you for your purchase!\")\n        \n        # Clear cart\n        self.items = []\n        return True\n    \n    def show_cart(self):\n        \"\"\"Display cart contents.\"\"\"\n        if not self.items:\n            print(\"Cart is empty\")\n            return\n        \n        print(\"Shopping Cart:\")\n        for item in self.items:\n            print(f\"  {item}\")\n        print(f\"Total: ${self.get_total():.2f}\")\n\n# Test the shopping system\nprint(\"=== Online Store Demo ===\")\n\n# Create products\nlaptop = Product(\"Gaming Laptop\", 1299.99, \"Electronics\", 5)\nmouse = Product(\"Wireless Mouse\", 29.99, \"Electronics\", 20)\nkeyboard = Product(\"Mechanical Keyboard\", 89.99, \"Electronics\", 15)\n\n# Create shopping cart\ncart = ShoppingCart()\n\n# Shopping simulation\nprint(\"\\nAvailable products:\")\nfor product in [laptop, mouse, keyboard]:\n    print(f\"  {product}\")\n\nprint(\"\\n--- Shopping Session ---\")\ncart.add_item(laptop, 1)\ncart.add_item(mouse, 2)\ncart.add_item(keyboard, 1)\n\ncart.show_cart()\n\n# Try to add out-of-stock item\ncart.add_item(laptop, 10)  # Should fail\n\n# Checkout\ncart.checkout()\n\n# Show updated stock\nprint(\"\\nUpdated inventory:\")\nfor product in [laptop, mouse, keyboard]:\n    print(f\"  {product}\")\n\n\n\n8.6.2 Exercise 2: Simple Banking System\n\nfrom datetime import datetime\n\nclass Transaction:\n    \"\"\"Represents a bank transaction.\"\"\"\n    \n    def __init__(self, transaction_type, amount, description=\"\"):\n        self.timestamp = datetime.now()\n        self.type = transaction_type  # 'deposit', 'withdrawal', 'transfer'\n        self.amount = amount\n        self.description = description\n    \n    def __str__(self):\n        date_str = self.timestamp.strftime(\"%Y-%m-%d %H:%M\")\n        return f\"{date_str} | {self.type.title()}: ${self.amount:.2f} - {self.description}\"\n\nclass BankAccount:\n    \"\"\"Enhanced bank account with transaction history.\"\"\"\n    \n    def __init__(self, account_number, account_holder, initial_balance=0):\n        self.account_number = account_number\n        self.account_holder = account_holder\n        self.balance = initial_balance\n        self.transactions = []\n        \n        if initial_balance &gt; 0:\n            self.transactions.append(\n                Transaction(\"deposit\", initial_balance, \"Initial deposit\")\n            )\n    \n    def deposit(self, amount, description=\"Deposit\"):\n        \"\"\"Deposit money to account.\"\"\"\n        if amount &lt;= 0:\n            print(\"Deposit amount must be positive\")\n            return False\n        \n        self.balance += amount\n        transaction = Transaction(\"deposit\", amount, description)\n        self.transactions.append(transaction)\n        \n        print(f\"Deposited ${amount:.2f}. New balance: ${self.balance:.2f}\")\n        return True\n    \n    def withdraw(self, amount, description=\"Withdrawal\"):\n        \"\"\"Withdraw money from account.\"\"\"\n        if amount &lt;= 0:\n            print(\"Withdrawal amount must be positive\")\n            return False\n        \n        if amount &gt; self.balance:\n            print(\"Insufficient funds\")\n            return False\n        \n        self.balance -= amount\n        transaction = Transaction(\"withdrawal\", amount, description)\n        self.transactions.append(transaction)\n        \n        print(f\"Withdrew ${amount:.2f}. New balance: ${self.balance:.2f}\")\n        return True\n    \n    def transfer_to(self, target_account, amount, description=\"Transfer\"):\n        \"\"\"Transfer money to another account.\"\"\"\n        if self.withdraw(amount, f\"Transfer to {target_account.account_number}\"):\n            target_account.deposit(amount, f\"Transfer from {self.account_number}\")\n            print(f\"Transfer completed: ${amount:.2f} to account {target_account.account_number}\")\n            return True\n        return False\n    \n    def get_statement(self, num_transactions=10):\n        \"\"\"Get account statement.\"\"\"\n        print(f\"\\n=== Account Statement ===\")\n        print(f\"Account: {self.account_number}\")\n        print(f\"Holder: {self.account_holder}\")\n        print(f\"Current Balance: ${self.balance:.2f}\")\n        print(f\"\\nRecent Transactions:\")\n        \n        recent_transactions = self.transactions[-num_transactions:]\n        for transaction in reversed(recent_transactions):\n            print(f\"  {transaction}\")\n    \n    def __str__(self):\n        return f\"Account {self.account_number} ({self.account_holder}): ${self.balance:.2f}\"\n\n# Test the banking system\nprint(\"=== Banking System Demo ===\")\n\n# Create accounts\nalice_account = BankAccount(\"ACC001\", \"Alice Johnson\", 1000)\nbob_account = BankAccount(\"ACC002\", \"Bob Wilson\", 500)\n\nprint(\"Initial accounts:\")\nprint(f\"  {alice_account}\")\nprint(f\"  {bob_account}\")\n\n# Perform transactions\nprint(\"\\n--- Transaction Activity ---\")\nalice_account.deposit(200, \"Salary deposit\")\nalice_account.withdraw(50, \"ATM withdrawal\")\nbob_account.deposit(100, \"Gift money\")\n\n# Transfer money\nalice_account.transfer_to(bob_account, 150, \"Loan payment\")\n\n# Show final balances\nprint(f\"\\nFinal balances:\")\nprint(f\"  {alice_account}\")\nprint(f\"  {bob_account}\")\n\n# Show statements\nalice_account.get_statement()\nbob_account.get_statement()",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Classes and Objects - Introduction to OOP</span>"
    ]
  },
  {
    "objectID": "book/07-classes.html#self-review-questions",
    "href": "book/07-classes.html#self-review-questions",
    "title": "8  Classes and Objects - Introduction to OOP",
    "section": "8.7 Self-Review Questions",
    "text": "8.7 Self-Review Questions\n\n8.7.1 Knowledge Check\n\nWhat’s the difference between a class and an object?\nWhat is the purpose of the __init__ method?\nWhat’s the difference between instance and class attributes?\nWhen would you use a static method vs a class method?\nWhat’s the purpose of the self parameter?\n\n\n\n8.7.2 Coding Challenges\n\nCreate a Calculator class with basic arithmetic operations\nImplement a Playlist class for managing songs\nDesign a Student class with grade management\nBuild a simple Inventory management system\n\n\n\n8.7.3 Answers\n\nA class is a blueprint/template; an object is an instance of a class\n__init__ initializes new instances with their starting state\nInstance attributes are unique per object; class attributes are shared\nStatic methods are utilities; class methods work with class itself\nself refers to the current instance of the class",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Classes and Objects - Introduction to OOP</span>"
    ]
  },
  {
    "objectID": "book/07-classes.html#best-practices",
    "href": "book/07-classes.html#best-practices",
    "title": "8  Classes and Objects - Introduction to OOP",
    "section": "8.8 Best Practices",
    "text": "8.8 Best Practices\n\nUse descriptive class and method names\nKeep classes focused - Single Responsibility Principle\nUse properties for computed attributes or validation\nImplement __str__ and __repr__ for better debugging\nValidate inputs in methods that change state\nUse private attributes (leading underscore) for internal data",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Classes and Objects - Introduction to OOP</span>"
    ]
  },
  {
    "objectID": "book/07-classes.html#common-mistakes",
    "href": "book/07-classes.html#common-mistakes",
    "title": "8  Classes and Objects - Introduction to OOP",
    "section": "8.9 Common Mistakes",
    "text": "8.9 Common Mistakes\n\nForgetting self parameter in method definitions\nUsing mutable default arguments in __init__\nNot calling parent __init__ in inheritance\nMaking everything public instead of encapsulating data\nCreating God classes that do too many things",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Classes and Objects - Introduction to OOP</span>"
    ]
  },
  {
    "objectID": "book/07-classes.html#next-steps",
    "href": "book/07-classes.html#next-steps",
    "title": "8  Classes and Objects - Introduction to OOP",
    "section": "8.10 Next Steps",
    "text": "8.10 Next Steps\nExcellent! You now understand the fundamentals of classes and objects. Next, we’ll explore Inheritance and Polymorphism to learn how to build more complex class hierarchies and reuse code effectively.",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Classes and Objects - Introduction to OOP</span>"
    ]
  },
  {
    "objectID": "book/07-classes.html#resources",
    "href": "book/07-classes.html#resources",
    "title": "8  Classes and Objects - Introduction to OOP",
    "section": "8.11 Resources",
    "text": "8.11 Resources\n\nPython Classes Documentation\nReal Python: Object-Oriented Programming\nMagic Methods Guide",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Classes and Objects - Introduction to OOP</span>"
    ]
  },
  {
    "objectID": "book/08-inheritance.html",
    "href": "book/08-inheritance.html",
    "title": "9  Inheritance and Polymorphism",
    "section": "",
    "text": "9.1 Understanding Inheritance\nInheritance allows you to create new classes based on existing classes, promoting code reuse and creating logical hierarchies. Think of inheritance like a family tree - children inherit traits from parents but can also have their own unique characteristics. Polymorphism enables objects of different types to be treated uniformly - like how both cars and bicycles can “move” but in different ways.",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Inheritance and Polymorphism</span>"
    ]
  },
  {
    "objectID": "book/08-inheritance.html#understanding-inheritance",
    "href": "book/08-inheritance.html#understanding-inheritance",
    "title": "9  Inheritance and Polymorphism",
    "section": "",
    "text": "9.1.1 Basic Inheritance\n\n# Base class (Parent/Superclass)\nclass Animal:\n    \"\"\"Base class representing a generic animal.\"\"\"\n    \n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n        self.energy = 100\n    \n    def eat(self, food):\n        \"\"\"Generic eating behavior.\"\"\"\n        self.energy += 10\n        print(f\"{self.name} eats {food} and gains energy. Energy: {self.energy}\")\n    \n    def sleep(self):\n        \"\"\"Generic sleeping behavior.\"\"\"\n        self.energy += 20\n        print(f\"{self.name} sleeps and recovers energy. Energy: {self.energy}\")\n    \n    def make_sound(self):\n        \"\"\"Generic sound - to be overridden by subclasses.\"\"\"\n        print(f\"{self.name} makes a sound\")\n    \n    def __str__(self):\n        return f\"{self.name} the {self.species}\"\n\n# Derived class (Child/Subclass)\nclass Dog(Animal):\n    \"\"\"Dog class inheriting from Animal.\"\"\"\n    \n    def __init__(self, name, breed):\n        # Call parent constructor\n        super().__init__(name, \"Dog\")\n        self.breed = breed\n        self.tricks = []\n    \n    def make_sound(self):\n        \"\"\"Override parent method.\"\"\"\n        print(f\"{self.name} barks: Woof! Woof!\")\n    \n    def learn_trick(self, trick):\n        \"\"\"Dog-specific behavior.\"\"\"\n        self.tricks.append(trick)\n        print(f\"{self.name} learned a new trick: {trick}\")\n    \n    def perform_trick(self):\n        \"\"\"Perform a random trick.\"\"\"\n        if self.tricks:\n            import random\n            trick = random.choice(self.tricks)\n            print(f\"{self.name} performs: {trick}\")\n        else:\n            print(f\"{self.name} doesn't know any tricks yet\")\n\nclass Cat(Animal):\n    \"\"\"Cat class inheriting from Animal.\"\"\"\n    \n    def __init__(self, name, color):\n        super().__init__(name, \"Cat\")\n        self.color = color\n        self.lives = 9\n    \n    def make_sound(self):\n        \"\"\"Override parent method.\"\"\"\n        print(f\"{self.name} meows: Meow!\")\n    \n    def climb(self):\n        \"\"\"Cat-specific behavior.\"\"\"\n        print(f\"{self.name} climbs gracefully\")\n    \n    def use_life(self):\n        \"\"\"Cat-specific behavior.\"\"\"\n        if self.lives &gt; 0:\n            self.lives -= 1\n            print(f\"{self.name} used a life. Lives remaining: {self.lives}\")\n        else:\n            print(f\"{self.name} has no more lives!\")\n\n# Test inheritance\nprint(\"=== Inheritance Demo ===\")\n\n# Create instances\ndog = Dog(\"Buddy\", \"Golden Retriever\")\ncat = Cat(\"Whiskers\", \"Orange\")\n\nprint(f\"Created: {dog}\")\nprint(f\"Created: {cat}\")\n\n# Use inherited methods\ndog.eat(\"dog food\")\ncat.eat(\"fish\")\n\n# Use overridden methods\ndog.make_sound()\ncat.make_sound()\n\n# Use specific methods\ndog.learn_trick(\"sit\")\ndog.learn_trick(\"roll over\")\ndog.perform_trick()\n\ncat.climb()\ncat.use_life()\n\n\n\n9.1.2 Multiple Inheritance\n\n# Multiple base classes\nclass Flyable:\n    \"\"\"Mixin for flying behavior.\"\"\"\n    \n    def __init__(self):\n        self.altitude = 0\n    \n    def fly(self, height):\n        \"\"\"Flying behavior.\"\"\"\n        self.altitude = height\n        print(f\"Flying at {self.altitude} feet\")\n    \n    def land(self):\n        \"\"\"Landing behavior.\"\"\"\n        self.altitude = 0\n        print(\"Landed safely\")\n\nclass Swimmable:\n    \"\"\"Mixin for swimming behavior.\"\"\"\n    \n    def __init__(self):\n        self.depth = 0\n    \n    def swim(self, depth):\n        \"\"\"Swimming behavior.\"\"\"\n        self.depth = depth\n        print(f\"Swimming at {self.depth} feet depth\")\n    \n    def surface(self):\n        \"\"\"Surface behavior.\"\"\"\n        self.depth = 0\n        print(\"Surfaced to water level\")\n\n# Class with multiple inheritance\nclass Duck(Animal, Flyable, Swimmable):\n    \"\"\"Duck that can fly and swim.\"\"\"\n    \n    def __init__(self, name):\n        # Initialize all parent classes\n        Animal.__init__(self, name, \"Duck\")\n        Flyable.__init__(self)\n        Swimmable.__init__(self)\n    \n    def make_sound(self):\n        \"\"\"Duck-specific sound.\"\"\"\n        print(f\"{self.name} quacks: Quack! Quack!\")\n    \n    def migrate(self):\n        \"\"\"Duck-specific behavior using multiple inheritance.\"\"\"\n        print(f\"{self.name} is migrating...\")\n        self.fly(1000)\n        self.land()\n        self.swim(5)\n        self.surface()\n\n# Test multiple inheritance\nprint(\"\\n=== Multiple Inheritance Demo ===\")\n\nduck = Duck(\"Donald\")\nprint(f\"Created: {duck}\")\n\nduck.make_sound()\nduck.eat(\"bread crumbs\")\nduck.migrate()\n\n# Check Method Resolution Order\nprint(f\"\\nMethod Resolution Order for Duck: {Duck.__mro__}\")",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Inheritance and Polymorphism</span>"
    ]
  },
  {
    "objectID": "book/08-inheritance.html#polymorphism",
    "href": "book/08-inheritance.html#polymorphism",
    "title": "9  Inheritance and Polymorphism",
    "section": "9.2 Polymorphism",
    "text": "9.2 Polymorphism\n\n9.2.1 Method Overriding and Polymorphism\n\nclass Shape:\n    \"\"\"Base class for geometric shapes.\"\"\"\n    \n    def __init__(self, name):\n        self.name = name\n    \n    def area(self):\n        \"\"\"Calculate area - to be implemented by subclasses.\"\"\"\n        raise NotImplementedError(\"Subclasses must implement area()\")\n    \n    def perimeter(self):\n        \"\"\"Calculate perimeter - to be implemented by subclasses.\"\"\"\n        raise NotImplementedError(\"Subclasses must implement perimeter()\")\n    \n    def describe(self):\n        \"\"\"Describe the shape.\"\"\"\n        return f\"This is a {self.name} with area {self.area():.2f} and perimeter {self.perimeter():.2f}\"\n\nclass Rectangle(Shape):\n    \"\"\"Rectangle implementation.\"\"\"\n    \n    def __init__(self, width, height):\n        super().__init__(\"Rectangle\")\n        self.width = width\n        self.height = height\n    \n    def area(self):\n        \"\"\"Calculate rectangle area.\"\"\"\n        return self.width * self.height\n    \n    def perimeter(self):\n        \"\"\"Calculate rectangle perimeter.\"\"\"\n        return 2 * (self.width + self.height)\n\nclass Circle(Shape):\n    \"\"\"Circle implementation.\"\"\"\n    \n    def __init__(self, radius):\n        super().__init__(\"Circle\")\n        self.radius = radius\n    \n    def area(self):\n        \"\"\"Calculate circle area.\"\"\"\n        import math\n        return math.pi * self.radius ** 2\n    \n    def perimeter(self):\n        \"\"\"Calculate circle circumference.\"\"\"\n        import math\n        return 2 * math.pi * self.radius\n\nclass Triangle(Shape):\n    \"\"\"Triangle implementation.\"\"\"\n    \n    def __init__(self, base, height, side1, side2):\n        super().__init__(\"Triangle\")\n        self.base = base\n        self.height = height\n        self.side1 = side1\n        self.side2 = side2\n    \n    def area(self):\n        \"\"\"Calculate triangle area.\"\"\"\n        return 0.5 * self.base * self.height\n    \n    def perimeter(self):\n        \"\"\"Calculate triangle perimeter.\"\"\"\n        return self.base + self.side1 + self.side2\n\n# Polymorphism in action\ndef calculate_total_area(shapes):\n    \"\"\"Calculate total area of multiple shapes.\"\"\"\n    total = 0\n    for shape in shapes:\n        # Polymorphism: same method call works for all shape types\n        total += shape.area()\n        print(f\"{shape.name}: {shape.area():.2f}\")\n    return total\n\ndef print_shape_info(shapes):\n    \"\"\"Print information about shapes using polymorphism.\"\"\"\n    for shape in shapes:\n        # Polymorphism: describe() calls different area() methods\n        print(shape.describe())\n\n# Test polymorphism\nprint(\"\\n=== Polymorphism Demo ===\")\n\nshapes = [\n    Rectangle(5, 3),\n    Circle(4),\n    Triangle(6, 4, 5, 5),\n    Rectangle(2, 8)\n]\n\nprint(\"Shape areas:\")\ntotal_area = calculate_total_area(shapes)\nprint(f\"Total area: {total_area:.2f}\")\n\nprint(\"\\nShape descriptions:\")\nprint_shape_info(shapes)\n\n\n\n9.2.2 Duck Typing\n\n# Duck typing: \"If it walks like a duck and quacks like a duck, it's a duck\"\n\nclass RealDuck:\n    \"\"\"A real duck.\"\"\"\n    \n    def quack(self):\n        return \"Quack!\"\n    \n    def fly(self):\n        return \"Flap flap!\"\n\nclass RubberDuck:\n    \"\"\"A toy duck.\"\"\"\n    \n    def quack(self):\n        return \"Squeak!\"\n    \n    # Note: No fly method\n\nclass Robot:\n    \"\"\"A robot that can mimic duck behavior.\"\"\"\n    \n    def quack(self):\n        return \"BEEP QUACK BEEP!\"\n    \n    def fly(self):\n        return \"ROCKET THRUSTERS ENGAGED!\"\n\ndef make_it_quack(duck_like_object):\n    \"\"\"Function that works with any object that can quack.\"\"\"\n    try:\n        return duck_like_object.quack()\n    except AttributeError:\n        return \"This object can't quack!\"\n\ndef make_it_fly(duck_like_object):\n    \"\"\"Function that works with any object that can fly.\"\"\"\n    try:\n        return duck_like_object.fly()\n    except AttributeError:\n        return \"This object can't fly!\"\n\n# Test duck typing\nprint(\"\\n=== Duck Typing Demo ===\")\n\nduck_like_objects = [RealDuck(), RubberDuck(), Robot(), \"Not a duck\"]\n\nfor obj in duck_like_objects:\n    obj_name = obj.__class__.__name__ if hasattr(obj, '__class__') else str(obj)\n    print(f\"{obj_name}:\")\n    print(f\"  Quack: {make_it_quack(obj)}\")\n    print(f\"  Fly: {make_it_fly(obj)}\")",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Inheritance and Polymorphism</span>"
    ]
  },
  {
    "objectID": "book/08-inheritance.html#advanced-inheritance-concepts",
    "href": "book/08-inheritance.html#advanced-inheritance-concepts",
    "title": "9  Inheritance and Polymorphism",
    "section": "9.3 Advanced Inheritance Concepts",
    "text": "9.3 Advanced Inheritance Concepts\n\n9.3.1 Abstract Base Classes\n\nfrom abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    \"\"\"Abstract base class for vehicles.\"\"\"\n    \n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.fuel_level = 100\n    \n    @abstractmethod\n    def start_engine(self):\n        \"\"\"Abstract method - must be implemented by subclasses.\"\"\"\n        pass\n    \n    @abstractmethod\n    def stop_engine(self):\n        \"\"\"Abstract method - must be implemented by subclasses.\"\"\"\n        pass\n    \n    @abstractmethod\n    def accelerate(self):\n        \"\"\"Abstract method - must be implemented by subclasses.\"\"\"\n        pass\n    \n    def honk(self):\n        \"\"\"Concrete method - can be used by all vehicles.\"\"\"\n        print(\"HONK! HONK!\")\n    \n    def refuel(self):\n        \"\"\"Concrete method - can be used by all vehicles.\"\"\"\n        self.fuel_level = 100\n        print(\"Vehicle refueled\")\n\nclass Car(Vehicle):\n    \"\"\"Car implementation of Vehicle.\"\"\"\n    \n    def __init__(self, make, model, year, doors):\n        super().__init__(make, model, year)\n        self.doors = doors\n        self.engine_running = False\n    \n    def start_engine(self):\n        \"\"\"Start car engine.\"\"\"\n        if not self.engine_running:\n            self.engine_running = True\n            print(f\"Car engine started: Vroom!\")\n        else:\n            print(\"Engine is already running\")\n    \n    def stop_engine(self):\n        \"\"\"Stop car engine.\"\"\"\n        if self.engine_running:\n            self.engine_running = False\n            print(\"Car engine stopped\")\n        else:\n            print(\"Engine is already off\")\n    \n    def accelerate(self):\n        \"\"\"Accelerate the car.\"\"\"\n        if self.engine_running and self.fuel_level &gt; 0:\n            self.fuel_level -= 5\n            print(f\"Car accelerating... Fuel: {self.fuel_level}%\")\n        else:\n            print(\"Cannot accelerate: engine off or no fuel\")\n\nclass Motorcycle(Vehicle):\n    \"\"\"Motorcycle implementation of Vehicle.\"\"\"\n    \n    def __init__(self, make, model, year, engine_size):\n        super().__init__(make, model, year)\n        self.engine_size = engine_size\n        self.engine_running = False\n    \n    def start_engine(self):\n        \"\"\"Start motorcycle engine.\"\"\"\n        if not self.engine_running:\n            self.engine_running = True\n            print(f\"Motorcycle engine started: BRAAAP!\")\n        else:\n            print(\"Engine is already running\")\n    \n    def stop_engine(self):\n        \"\"\"Stop motorcycle engine.\"\"\"\n        if self.engine_running:\n            self.engine_running = False\n            print(\"Motorcycle engine stopped\")\n        else:\n            print(\"Engine is already off\")\n    \n    def accelerate(self):\n        \"\"\"Accelerate the motorcycle.\"\"\"\n        if self.engine_running and self.fuel_level &gt; 0:\n            self.fuel_level -= 8  # Uses more fuel\n            print(f\"Motorcycle accelerating fast! Fuel: {self.fuel_level}%\")\n        else:\n            print(\"Cannot accelerate: engine off or no fuel\")\n    \n    def wheelie(self):\n        \"\"\"Motorcycle-specific method.\"\"\"\n        if self.engine_running:\n            print(\"Doing a wheelie! 🏍️\")\n        else:\n            print(\"Need to start engine first\")\n\n# Test abstract base class\nprint(\"\\n=== Abstract Base Class Demo ===\")\n\n# This would raise an error:\n# vehicle = Vehicle(\"Generic\", \"Car\", 2023)  # TypeError!\n\ncar = Car(\"Toyota\", \"Camry\", 2023, 4)\nmotorcycle = Motorcycle(\"Harley\", \"Sportster\", 2022, 883)\n\nvehicles = [car, motorcycle]\n\nfor vehicle in vehicles:\n    print(f\"\\n{vehicle.make} {vehicle.model}:\")\n    vehicle.start_engine()\n    vehicle.accelerate()\n    vehicle.honk()\n    \n    # Motorcycle-specific behavior\n    if isinstance(vehicle, Motorcycle):\n        vehicle.wheelie()\n\n\n\n9.3.2 Method Resolution Order (MRO)\n\nclass A:\n    def method(self):\n        print(\"A.method\")\n\nclass B(A):\n    def method(self):\n        print(\"B.method\")\n        super().method()\n\nclass C(A):\n    def method(self):\n        print(\"C.method\")\n        super().method()\n\nclass D(B, C):\n    def method(self):\n        print(\"D.method\")\n        super().method()\n\n# Demonstrate MRO\nprint(\"\\n=== Method Resolution Order Demo ===\")\n\nd = D()\nprint(\"Calling d.method():\")\nd.method()\n\nprint(f\"\\nMRO for class D: {[cls.__name__ for cls in D.__mro__]}\")\n\n# Understanding super() in multiple inheritance\nclass Base:\n    def __init__(self, value):\n        self.value = value\n        print(f\"Base.__init__({value})\")\n\nclass Mixin1:\n    def __init__(self, **kwargs):\n        print(\"Mixin1.__init__\")\n        super().__init__(**kwargs)\n\nclass Mixin2:\n    def __init__(self, **kwargs):\n        print(\"Mixin2.__init__\")\n        super().__init__(**kwargs)\n\nclass Combined(Mixin1, Mixin2, Base):\n    def __init__(self, value, extra=None):\n        print(f\"Combined.__init__({value}, {extra})\")\n        super().__init__(value=value)\n\nprint(\"\\nMultiple inheritance with super():\")\nobj = Combined(\"test\", extra=\"data\")\nprint(f\"Final value: {obj.value}\")",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Inheritance and Polymorphism</span>"
    ]
  },
  {
    "objectID": "book/08-inheritance.html#real-world-examples",
    "href": "book/08-inheritance.html#real-world-examples",
    "title": "9  Inheritance and Polymorphism",
    "section": "9.4 Real-World Examples",
    "text": "9.4 Real-World Examples\n\n9.4.1 Example 1: Employee Management System\n\nfrom datetime import datetime, date\n\nclass Employee:\n    \"\"\"Base employee class.\"\"\"\n    \n    def __init__(self, employee_id, name, hire_date, base_salary):\n        self.employee_id = employee_id\n        self.name = name\n        self.hire_date = hire_date\n        self.base_salary = base_salary\n        self.benefits = []\n    \n    def add_benefit(self, benefit):\n        \"\"\"Add a benefit to the employee.\"\"\"\n        self.benefits.append(benefit)\n        print(f\"Added benefit '{benefit}' to {self.name}\")\n    \n    def calculate_salary(self):\n        \"\"\"Calculate salary - to be overridden by subclasses.\"\"\"\n        return self.base_salary\n    \n    def years_of_service(self):\n        \"\"\"Calculate years of service.\"\"\"\n        today = date.today()\n        return today.year - self.hire_date.year\n    \n    def get_info(self):\n        \"\"\"Get employee information.\"\"\"\n        return {\n            'id': self.employee_id,\n            'name': self.name,\n            'hire_date': self.hire_date,\n            'years_of_service': self.years_of_service(),\n            'salary': self.calculate_salary(),\n            'benefits': self.benefits\n        }\n    \n    def __str__(self):\n        return f\"Employee {self.employee_id}: {self.name}\"\n\nclass FullTimeEmployee(Employee):\n    \"\"\"Full-time employee with benefits.\"\"\"\n    \n    def __init__(self, employee_id, name, hire_date, base_salary, department):\n        super().__init__(employee_id, name, hire_date, base_salary)\n        self.department = department\n        self.vacation_days = 20\n    \n    def calculate_salary(self):\n        \"\"\"Full-time employees get yearly bonus.\"\"\"\n        years = self.years_of_service()\n        bonus = min(years * 0.05, 0.20)  # Max 20% bonus\n        return self.base_salary * (1 + bonus)\n    \n    def take_vacation(self, days):\n        \"\"\"Take vacation days.\"\"\"\n        if days &lt;= self.vacation_days:\n            self.vacation_days -= days\n            print(f\"{self.name} took {days} vacation days. Remaining: {self.vacation_days}\")\n        else:\n            print(f\"Insufficient vacation days. Available: {self.vacation_days}\")\n\nclass PartTimeEmployee(Employee):\n    \"\"\"Part-time employee with hourly wage.\"\"\"\n    \n    def __init__(self, employee_id, name, hire_date, hourly_rate, hours_per_week):\n        # Calculate annual salary from hourly rate\n        annual_salary = hourly_rate * hours_per_week * 52\n        super().__init__(employee_id, name, hire_date, annual_salary)\n        self.hourly_rate = hourly_rate\n        self.hours_per_week = hours_per_week\n    \n    def calculate_salary(self):\n        \"\"\"Part-time salary calculation.\"\"\"\n        return self.hourly_rate * self.hours_per_week * 52\n\nclass Manager(FullTimeEmployee):\n    \"\"\"Manager with additional responsibilities.\"\"\"\n    \n    def __init__(self, employee_id, name, hire_date, base_salary, department, team_size):\n        super().__init__(employee_id, name, hire_date, base_salary, department)\n        self.team_size = team_size\n        self.direct_reports = []\n    \n    def calculate_salary(self):\n        \"\"\"Managers get base salary plus management bonus.\"\"\"\n        base_with_years = super().calculate_salary()\n        management_bonus = self.team_size * 2000  # $2000 per team member\n        return base_with_years + management_bonus\n    \n    def add_direct_report(self, employee):\n        \"\"\"Add employee to team.\"\"\"\n        self.direct_reports.append(employee)\n        self.team_size = len(self.direct_reports)\n        print(f\"Added {employee.name} to {self.name}'s team\")\n    \n    def conduct_review(self, employee):\n        \"\"\"Conduct employee review.\"\"\"\n        if employee in self.direct_reports:\n            print(f\"{self.name} conducting review for {employee.name}\")\n        else:\n            print(f\"{employee.name} is not in {self.name}'s team\")\n\n# Company class to manage employees\nclass Company:\n    \"\"\"Company that manages employees.\"\"\"\n    \n    def __init__(self, name):\n        self.name = name\n        self.employees = {}\n    \n    def hire_employee(self, employee):\n        \"\"\"Hire a new employee.\"\"\"\n        self.employees[employee.employee_id] = employee\n        print(f\"Hired {employee.name} at {self.name}\")\n    \n    def get_employee(self, employee_id):\n        \"\"\"Get employee by ID.\"\"\"\n        return self.employees.get(employee_id)\n    \n    def calculate_payroll(self):\n        \"\"\"Calculate total payroll.\"\"\"\n        total = 0\n        print(f\"\\n=== {self.name} Payroll ===\")\n        for employee in self.employees.values():\n            salary = employee.calculate_salary()\n            total += salary\n            emp_type = employee.__class__.__name__\n            print(f\"{employee.name} ({emp_type}): ${salary:,.2f}\")\n        \n        print(f\"Total Payroll: ${total:,.2f}\")\n        return total\n    \n    def list_employees_by_type(self):\n        \"\"\"List employees grouped by type.\"\"\"\n        from collections import defaultdict\n        groups = defaultdict(list)\n        \n        for employee in self.employees.values():\n            emp_type = employee.__class__.__name__\n            groups[emp_type].append(employee)\n        \n        print(f\"\\n=== {self.name} Employee Roster ===\")\n        for emp_type, employees in groups.items():\n            print(f\"{emp_type}s ({len(employees)}):\")\n            for emp in employees:\n                print(f\"  - {emp.name}\")\n\n# Demonstrate the employee system\nprint(\"=== Employee Management System Demo ===\")\n\n# Create company\ncompany = Company(\"TechCorp Inc.\")\n\n# Create employees\nfull_time = FullTimeEmployee(\"FT001\", \"Alice Johnson\", date(2020, 1, 15), 75000, \"Engineering\")\npart_time = PartTimeEmployee(\"PT001\", \"Bob Wilson\", date(2022, 6, 1), 25, 20)\nmanager = Manager(\"MG001\", \"Carol Smith\", date(2018, 3, 10), 95000, \"Engineering\", 0)\n\n# Hire employees\ncompany.hire_employee(full_time)\ncompany.hire_employee(part_time)\ncompany.hire_employee(manager)\n\n# Add team structure\nmanager.add_direct_report(full_time)\n\n# Add benefits\nfull_time.add_benefit(\"Health Insurance\")\nfull_time.add_benefit(\"401k\")\nmanager.add_benefit(\"Health Insurance\")\nmanager.add_benefit(\"Stock Options\")\n\n# Show polymorphism in action\ncompany.calculate_payroll()\ncompany.list_employees_by_type()\n\n# Manager-specific actions\nmanager.conduct_review(full_time)\nfull_time.take_vacation(5)\n\n\n\n9.4.2 Example 2: Media Player System\n\nimport os\nfrom abc import ABC, abstractmethod\n\nclass MediaFile(ABC):\n    \"\"\"Abstract base class for media files.\"\"\"\n    \n    def __init__(self, filename, duration):\n        self.filename = filename\n        self.duration = duration  # in seconds\n        self.position = 0\n        self.is_playing = False\n    \n    @abstractmethod\n    def play(self):\n        \"\"\"Start playing the media.\"\"\"\n        pass\n    \n    @abstractmethod\n    def get_file_info(self):\n        \"\"\"Get specific file information.\"\"\"\n        pass\n    \n    def pause(self):\n        \"\"\"Pause playback.\"\"\"\n        if self.is_playing:\n            self.is_playing = False\n            print(f\"Paused {self.filename} at {self.position}s\")\n        else:\n            print(f\"{self.filename} is not playing\")\n    \n    def stop(self):\n        \"\"\"Stop playback.\"\"\"\n        self.is_playing = False\n        self.position = 0\n        print(f\"Stopped {self.filename}\")\n    \n    def seek(self, position):\n        \"\"\"Seek to specific position.\"\"\"\n        if 0 &lt;= position &lt;= self.duration:\n            self.position = position\n            print(f\"Seeked to {position}s in {self.filename}\")\n        else:\n            print(f\"Invalid position: {position}s (duration: {self.duration}s)\")\n    \n    def get_progress(self):\n        \"\"\"Get playback progress as percentage.\"\"\"\n        return (self.position / self.duration) * 100 if self.duration &gt; 0 else 0\n    \n    def __str__(self):\n        return f\"{self.filename} ({self.duration}s)\"\n\nclass AudioFile(MediaFile):\n    \"\"\"Audio file implementation.\"\"\"\n    \n    def __init__(self, filename, duration, bitrate, sample_rate):\n        super().__init__(filename, duration)\n        self.bitrate = bitrate\n        self.sample_rate = sample_rate\n    \n    def play(self):\n        \"\"\"Play audio file.\"\"\"\n        self.is_playing = True\n        print(f\"🎵 Playing audio: {self.filename}\")\n        print(f\"   Quality: {self.bitrate}kbps, {self.sample_rate}Hz\")\n    \n    def get_file_info(self):\n        \"\"\"Get audio file information.\"\"\"\n        return {\n            'type': 'Audio',\n            'filename': self.filename,\n            'duration': self.duration,\n            'bitrate': f\"{self.bitrate}kbps\",\n            'sample_rate': f\"{self.sample_rate}Hz\",\n            'file_size': f\"{(self.bitrate * self.duration) // 8}KB (estimated)\"\n        }\n\nclass VideoFile(MediaFile):\n    \"\"\"Video file implementation.\"\"\"\n    \n    def __init__(self, filename, duration, resolution, fps, codec):\n        super().__init__(filename, duration)\n        self.resolution = resolution  # tuple (width, height)\n        self.fps = fps\n        self.codec = codec\n    \n    def play(self):\n        \"\"\"Play video file.\"\"\"\n        self.is_playing = True\n        print(f\"🎬 Playing video: {self.filename}\")\n        print(f\"   Resolution: {self.resolution[0]}x{self.resolution[1]}\")\n        print(f\"   FPS: {self.fps}, Codec: {self.codec}\")\n    \n    def get_file_info(self):\n        \"\"\"Get video file information.\"\"\"\n        return {\n            'type': 'Video',\n            'filename': self.filename,\n            'duration': self.duration,\n            'resolution': f\"{self.resolution[0]}x{self.resolution[1]}\",\n            'fps': self.fps,\n            'codec': self.codec,\n            'total_frames': self.fps * self.duration\n        }\n    \n    def take_screenshot(self):\n        \"\"\"Take screenshot at current position.\"\"\"\n        if self.is_playing:\n            frame_number = int(self.position * self.fps)\n            screenshot_name = f\"{self.filename}_frame_{frame_number}.jpg\"\n            print(f\"📸 Screenshot saved: {screenshot_name}\")\n            return screenshot_name\n        else:\n            print(\"Cannot take screenshot: video not playing\")\n            return None\n\nclass StreamingFile(MediaFile):\n    \"\"\"Streaming media file.\"\"\"\n    \n    def __init__(self, url, title, duration, quality):\n        super().__init__(title, duration)\n        self.url = url\n        self.quality = quality\n        self.buffer_health = 100  # Percentage\n    \n    def play(self):\n        \"\"\"Play streaming content.\"\"\"\n        print(f\"🌐 Streaming: {self.filename}\")\n        print(f\"   URL: {self.url}\")\n        print(f\"   Quality: {self.quality}\")\n        print(f\"   Buffer: {self.buffer_health}%\")\n        self.is_playing = True\n    \n    def get_file_info(self):\n        \"\"\"Get streaming file information.\"\"\"\n        return {\n            'type': 'Stream',\n            'title': self.filename,\n            'url': self.url,\n            'duration': self.duration,\n            'quality': self.quality,\n            'buffer_health': f\"{self.buffer_health}%\"\n        }\n    \n    def check_connection(self):\n        \"\"\"Check streaming connection.\"\"\"\n        import random\n        self.buffer_health = random.randint(70, 100)\n        if self.buffer_health &lt; 80:\n            print(f\"⚠️ Low buffer: {self.buffer_health}%\")\n        else:\n            print(f\"✅ Good connection: {self.buffer_health}%\")\n\nclass MediaPlayer:\n    \"\"\"Media player that can handle different file types.\"\"\"\n    \n    def __init__(self, name):\n        self.name = name\n        self.playlist = []\n        self.current_index = 0\n        self.volume = 50\n        self.shuffle = False\n    \n    def add_media(self, media_file):\n        \"\"\"Add media file to playlist.\"\"\"\n        self.playlist.append(media_file)\n        print(f\"Added '{media_file.filename}' to playlist\")\n    \n    def play_current(self):\n        \"\"\"Play current media file.\"\"\"\n        if self.playlist and 0 &lt;= self.current_index &lt; len(self.playlist):\n            current_media = self.playlist[self.current_index]\n            print(f\"\\n[{self.name}] Playing #{self.current_index + 1}\")\n            current_media.play()\n            return current_media\n        else:\n            print(\"No media to play\")\n            return None\n    \n    def next_track(self):\n        \"\"\"Skip to next track.\"\"\"\n        if self.playlist:\n            self.current_index = (self.current_index + 1) % len(self.playlist)\n            print(f\"⏭️ Next track\")\n            return self.play_current()\n        return None\n    \n    def previous_track(self):\n        \"\"\"Go to previous track.\"\"\"\n        if self.playlist:\n            self.current_index = (self.current_index - 1) % len(self.playlist)\n            print(f\"⏮️ Previous track\")\n            return self.play_current()\n        return None\n    \n    def show_playlist(self):\n        \"\"\"Show current playlist.\"\"\"\n        print(f\"\\n=== {self.name} Playlist ===\")\n        if not self.playlist:\n            print(\"Playlist is empty\")\n            return\n        \n        for i, media in enumerate(self.playlist):\n            marker = \"▶️\" if i == self.current_index else \"  \"\n            media_type = media.__class__.__name__\n            print(f\"{marker} {i+1}. {media.filename} ({media_type}, {media.duration}s)\")\n    \n    def show_media_info(self, index=None):\n        \"\"\"Show detailed information about media file.\"\"\"\n        if index is None:\n            index = self.current_index\n        \n        if 0 &lt;= index &lt; len(self.playlist):\n            media = self.playlist[index]\n            info = media.get_file_info()\n            \n            print(f\"\\n=== Media Information ===\")\n            for key, value in info.items():\n                print(f\"{key.title()}: {value}\")\n        else:\n            print(\"Invalid media index\")\n    \n    def set_volume(self, volume):\n        \"\"\"Set player volume.\"\"\"\n        self.volume = max(0, min(100, volume))\n        print(f\"🔊 Volume: {self.volume}%\")\n\n# Demonstrate the media player system\nprint(\"=== Media Player System Demo ===\")\n\n# Create media files\naudio1 = AudioFile(\"song1.mp3\", 180, 320, 44100)\naudio2 = AudioFile(\"song2.flac\", 240, 1411, 96000)\nvideo1 = VideoFile(\"movie.mp4\", 7200, (1920, 1080), 24, \"H.264\")\nvideo2 = VideoFile(\"clip.avi\", 30, (640, 480), 30, \"XVID\")\nstream1 = StreamingFile(\"https://stream.com/live\", \"Live Concert\", 0, \"1080p\")\n\n# Create media player\nplayer = MediaPlayer(\"MyPlayer Pro\")\n\n# Add media to playlist\nmedia_files = [audio1, audio2, video1, video2, stream1]\nfor media in media_files:\n    player.add_media(media)\n\n# Show playlist\nplayer.show_playlist()\n\n# Play media and demonstrate polymorphism\nprint(\"\\n=== Playback Demo ===\")\ncurrent = player.play_current()\n\n# Show media info\nplayer.show_media_info()\n\n# Control playback\ncurrent.seek(30)\nprint(f\"Progress: {current.get_progress():.1f}%\")\n\n# Try video-specific functionality\nif isinstance(current, VideoFile):\n    current.take_screenshot()\n\n# Navigation\nplayer.next_track()\nplayer.set_volume(75)\n\n# Check streaming\ncurrent = player.playlist[4]  # Stream\nif isinstance(current, StreamingFile):\n    current.check_connection()",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Inheritance and Polymorphism</span>"
    ]
  },
  {
    "objectID": "book/08-inheritance.html#exercises",
    "href": "book/08-inheritance.html#exercises",
    "title": "9  Inheritance and Polymorphism",
    "section": "9.5 Exercises",
    "text": "9.5 Exercises\n\n9.5.1 Exercise 1: Shape Hierarchy with Areas\n\nimport math\n\nclass Shape:\n    \"\"\"Base shape class.\"\"\"\n    \n    def __init__(self, name, color=\"white\"):\n        self.name = name\n        self.color = color\n    \n    def area(self):\n        \"\"\"Calculate area - abstract method.\"\"\"\n        raise NotImplementedError(\"Subclasses must implement area()\")\n    \n    def perimeter(self):\n        \"\"\"Calculate perimeter - abstract method.\"\"\"\n        raise NotImplementedError(\"Subclasses must implement perimeter()\")\n    \n    def describe(self):\n        \"\"\"Describe the shape.\"\"\"\n        return f\"A {self.color} {self.name} with area {self.area():.2f}\"\n\nclass Square(Shape):\n    def __init__(self, side, color=\"white\"):\n        super().__init__(\"square\", color)\n        self.side = side\n    \n    def area(self):\n        return self.side ** 2\n    \n    def perimeter(self):\n        return 4 * self.side\n\nclass Circle(Shape):\n    def __init__(self, radius, color=\"white\"):\n        super().__init__(\"circle\", color)\n        self.radius = radius\n    \n    def area(self):\n        return math.pi * self.radius ** 2\n    \n    def perimeter(self):\n        return 2 * math.pi * self.radius\n\n# Test the shape hierarchy\nshapes = [\n    Square(5, \"red\"),\n    Circle(3, \"blue\"),\n    Square(2, \"green\")\n]\n\ntotal_area = 0\nfor shape in shapes:\n    print(shape.describe())\n    total_area += shape.area()\n\nprint(f\"Total area: {total_area:.2f}\")\n\n\n\n9.5.2 Exercise 2: Vehicle Fleet Management\n\nclass Vehicle:\n    \"\"\"Base vehicle class.\"\"\"\n    \n    def __init__(self, make, model, year, fuel_capacity):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.fuel_capacity = fuel_capacity\n        self.fuel_level = fuel_capacity\n        self.mileage = 0\n    \n    def drive(self, distance):\n        \"\"\"Drive the vehicle.\"\"\"\n        fuel_needed = self.calculate_fuel_consumption(distance)\n        if fuel_needed &lt;= self.fuel_level:\n            self.fuel_level -= fuel_needed\n            self.mileage += distance\n            print(f\"Drove {distance} miles. Fuel: {self.fuel_level:.1f}/{self.fuel_capacity}\")\n        else:\n            print(\"Not enough fuel!\")\n    \n    def refuel(self):\n        \"\"\"Refuel to full capacity.\"\"\"\n        self.fuel_level = self.fuel_capacity\n        print(\"Refueled to full capacity\")\n    \n    def calculate_fuel_consumption(self, distance):\n        \"\"\"Calculate fuel consumption - to be overridden.\"\"\"\n        return distance / 25  # Default: 25 MPG\n\nclass Car(Vehicle):\n    def __init__(self, make, model, year, doors):\n        super().__init__(make, model, year, 15)  # 15-gallon tank\n        self.doors = doors\n    \n    def calculate_fuel_consumption(self, distance):\n        \"\"\"Cars are fuel efficient.\"\"\"\n        return distance / 30  # 30 MPG\n\nclass Truck(Vehicle):\n    def __init__(self, make, model, year, cargo_capacity):\n        super().__init__(make, model, year, 25)  # 25-gallon tank\n        self.cargo_capacity = cargo_capacity\n        self.cargo_weight = 0\n    \n    def calculate_fuel_consumption(self, distance):\n        \"\"\"Trucks consume more fuel, especially when loaded.\"\"\"\n        base_mpg = 15\n        # Reduce efficiency based on cargo weight\n        efficiency_factor = 1 - (self.cargo_weight / self.cargo_capacity) * 0.3\n        effective_mpg = base_mpg * efficiency_factor\n        return distance / effective_mpg\n    \n    def load_cargo(self, weight):\n        \"\"\"Load cargo onto truck.\"\"\"\n        if self.cargo_weight + weight &lt;= self.cargo_capacity:\n            self.cargo_weight += weight\n            print(f\"Loaded {weight} lbs. Total cargo: {self.cargo_weight}/{self.cargo_capacity} lbs\")\n        else:\n            print(\"Cannot load: exceeds capacity\")\n\n# Fleet management\nclass Fleet:\n    def __init__(self):\n        self.vehicles = []\n    \n    def add_vehicle(self, vehicle):\n        self.vehicles.append(vehicle)\n        print(f\"Added {vehicle.make} {vehicle.model} to fleet\")\n    \n    def total_mileage(self):\n        return sum(v.mileage for v in self.vehicles)\n    \n    def vehicles_needing_fuel(self, threshold=0.25):\n        \"\"\"Find vehicles that need fuel.\"\"\"\n        needy_vehicles = []\n        for vehicle in self.vehicles:\n            fuel_percentage = vehicle.fuel_level / vehicle.fuel_capacity\n            if fuel_percentage &lt; threshold:\n                needy_vehicles.append(vehicle)\n        return needy_vehicles\n\n# Test the fleet\nfleet = Fleet()\nfleet.add_vehicle(Car(\"Toyota\", \"Camry\", 2022, 4))\nfleet.add_vehicle(Truck(\"Ford\", \"F-150\", 2021, 2000))\n\n# Test driving\ncar = fleet.vehicles[0]\ntruck = fleet.vehicles[1]\n\ncar.drive(100)\ntruck.load_cargo(1000)\ntruck.drive(100)\n\nprint(f\"Fleet total mileage: {fleet.total_mileage()}\")\n\n# Check fuel levels\nneedy = fleet.vehicles_needing_fuel()\nfor vehicle in needy:\n    print(f\"{vehicle.make} {vehicle.model} needs fuel\")",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Inheritance and Polymorphism</span>"
    ]
  },
  {
    "objectID": "book/08-inheritance.html#self-review-questions",
    "href": "book/08-inheritance.html#self-review-questions",
    "title": "9  Inheritance and Polymorphism",
    "section": "9.6 Self-Review Questions",
    "text": "9.6 Self-Review Questions\n\n9.6.1 Knowledge Check\n\nWhat is inheritance and why is it useful?\nWhat’s the difference between method overriding and method overloading?\nWhat is polymorphism and how does it work in Python?\nWhen would you use an abstract base class?\nWhat is the Method Resolution Order (MRO)?\n\n\n\n9.6.2 Coding Challenges\n\nCreate an animal hierarchy with different sound behaviors\nImplement a drawing application with different shape tools\nDesign a game character system with different classes\nBuild a file system hierarchy (files, directories, links)\n\n\n\n9.6.3 Answers\n\nInheritance allows code reuse by creating new classes based on existing ones\nOverriding replaces parent methods; Python doesn’t have built-in overloading\nPolymorphism allows different objects to respond to the same interface\nWhen you want to define a common interface but prevent direct instantiation\nMRO determines the order in which methods are searched in inheritance chains",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Inheritance and Polymorphism</span>"
    ]
  },
  {
    "objectID": "book/08-inheritance.html#best-practices",
    "href": "book/08-inheritance.html#best-practices",
    "title": "9  Inheritance and Polymorphism",
    "section": "9.7 Best Practices",
    "text": "9.7 Best Practices\n\nFavor composition over inheritance when possible\nUse abstract base classes to define clear interfaces\nFollow the Liskov Substitution Principle - subclasses should be substitutable\nKeep inheritance hierarchies shallow - avoid deep nesting\nUse super() correctly in multiple inheritance scenarios\nOverride __str__ and __repr__ for better debugging",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Inheritance and Polymorphism</span>"
    ]
  },
  {
    "objectID": "book/08-inheritance.html#common-mistakes",
    "href": "book/08-inheritance.html#common-mistakes",
    "title": "9  Inheritance and Polymorphism",
    "section": "9.8 Common Mistakes",
    "text": "9.8 Common Mistakes\n\nToo deep inheritance hierarchies - makes code hard to understand\nViolating the IS-A relationship - inheritance should model real relationships\nNot calling super() in __init__ - missing parent initialization\nDiamond problem confusion - misunderstanding MRO in multiple inheritance\nOverusing inheritance instead of composition",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Inheritance and Polymorphism</span>"
    ]
  },
  {
    "objectID": "book/08-inheritance.html#next-steps",
    "href": "book/08-inheritance.html#next-steps",
    "title": "9  Inheritance and Polymorphism",
    "section": "9.9 Next Steps",
    "text": "9.9 Next Steps\nExcellent! You now understand inheritance and polymorphism. Next, we’ll explore Advanced OOP Concepts including decorators, metaclasses, and design patterns.",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Inheritance and Polymorphism</span>"
    ]
  },
  {
    "objectID": "book/08-inheritance.html#resources",
    "href": "book/08-inheritance.html#resources",
    "title": "9  Inheritance and Polymorphism",
    "section": "9.10 Resources",
    "text": "9.10 Resources\n\nPython Inheritance Documentation\nReal Python: Inheritance and Composition\nMethod Resolution Order",
    "crumbs": [
      "Object-Oriented Programming",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Inheritance and Polymorphism</span>"
    ]
  },
  {
    "objectID": "book/09-type-hints.html",
    "href": "book/09-type-hints.html",
    "title": "10  Type Hints and Static Typing",
    "section": "",
    "text": "10.1 Why Type Hints Matter\nType hints make Python code more readable, maintainable, and help catch errors before runtime. They’re especially valuable in larger codebases and team environments.\n# Without type hints - unclear what types are expected\ndef calculate_discount(price, discount_rate, is_member):\n    if is_member:\n        discount_rate += 0.05\n    return price * (1 - discount_rate)\n\n# With type hints - crystal clear\ndef calculate_discount_typed(price: float, discount_rate: float, is_member: bool) -&gt; float:\n    \"\"\"Calculate discounted price with member bonus.\"\"\"\n    if is_member:\n        discount_rate += 0.05\n    return price * (1 - discount_rate)\n\n# Usage is now self-documenting\nregular_price = calculate_discount_typed(100.0, 0.1, True)\nprint(f\"Discounted price: ${regular_price:.2f}\")",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Type Hints and Static Typing</span>"
    ]
  },
  {
    "objectID": "book/09-type-hints.html#basic-type-hints",
    "href": "book/09-type-hints.html#basic-type-hints",
    "title": "10  Type Hints and Static Typing",
    "section": "10.2 Basic Type Hints",
    "text": "10.2 Basic Type Hints\n\n10.2.1 Built-in Types\n\n# Basic type annotations\ndef greet_user(name: str, age: int, height: float) -&gt; str:\n    \"\"\"Greet a user with their details.\"\"\"\n    return f\"Hello {name}! You are {age} years old and {height} feet tall.\"\n\ndef is_adult(age: int) -&gt; bool:\n    \"\"\"Check if person is an adult.\"\"\"\n    return age &gt;= 18\n\ndef calculate_area(width: float, height: float) -&gt; float:\n    \"\"\"Calculate rectangular area.\"\"\"\n    return width * height\n\n# Variable annotations\nname: str = \"Alice\"\nage: int = 25\nheight: float = 5.6\nis_student: bool = True\n\nprint(greet_user(name, age, height))\nprint(f\"Is adult: {is_adult(age)}\")\nprint(f\"Area: {calculate_area(10.0, 5.0)}\")\n\n\n\n10.2.2 Collection Types\n\nfrom typing import List, Dict, Tuple, Set, Optional, Union\n\ndef process_scores(scores: List[int]) -&gt; Dict[str, float]:\n    \"\"\"Process a list of scores and return statistics.\"\"\"\n    return {\n        \"average\": sum(scores) / len(scores),\n        \"highest\": float(max(scores)),\n        \"lowest\": float(min(scores))\n    }\n\ndef get_student_info(name: str, grades: List[int]) -&gt; Tuple[str, float, str]:\n    \"\"\"Get student information with calculated grade.\"\"\"\n    average = sum(grades) / len(grades)\n    \n    if average &gt;= 90:\n        letter_grade = \"A\"\n    elif average &gt;= 80:\n        letter_grade = \"B\"\n    elif average &gt;= 70:\n        letter_grade = \"C\"\n    else:\n        letter_grade = \"F\"\n    \n    return name, average, letter_grade\n\ndef find_common_interests(person1: Set[str], person2: Set[str]) -&gt; Set[str]:\n    \"\"\"Find common interests between two people.\"\"\"\n    return person1 & person2\n\n# Test the functions\ntest_scores = [85, 92, 78, 96, 88]\nstats = process_scores(test_scores)\nprint(f\"Score statistics: {stats}\")\n\nstudent_name, avg, grade = get_student_info(\"Alice\", test_scores)\nprint(f\"{student_name}: {avg:.1f} ({grade})\")\n\ninterests1 = {\"python\", \"music\", \"hiking\"}\ninterests2 = {\"python\", \"photography\", \"hiking\"}\ncommon = find_common_interests(interests1, interests2)\nprint(f\"Common interests: {common}\")\n\n\n\n10.2.3 Optional and Union Types\n\nfrom typing import Optional, Union\n\ndef find_user_by_id(user_id: int, users: List[Dict[str, Union[str, int]]]) -&gt; Optional[Dict[str, Union[str, int]]]:\n    \"\"\"Find user by ID, return None if not found.\"\"\"\n    for user in users:\n        if user[\"id\"] == user_id:\n            return user\n    return None\n\ndef format_phone(phone: Union[str, int]) -&gt; str:\n    \"\"\"Format phone number from string or integer.\"\"\"\n    if isinstance(phone, int):\n        phone_str = str(phone)\n    else:\n        phone_str = phone\n    \n    # Remove non-digits\n    digits = ''.join(c for c in phone_str if c.isdigit())\n    \n    if len(digits) == 10:\n        return f\"({digits[:3]}) {digits[3:6]}-{digits[6:]}\"\n    else:\n        return digits\n\ndef safe_divide(a: float, b: float) -&gt; Optional[float]:\n    \"\"\"Safely divide two numbers, return None if division by zero.\"\"\"\n    if b == 0:\n        return None\n    return a / b\n\n# Test optional and union types\nusers_db = [\n    {\"id\": 1, \"name\": \"Alice\", \"age\": 25},\n    {\"id\": 2, \"name\": \"Bob\", \"age\": 30},\n]\n\nfound_user = find_user_by_id(1, users_db)\nif found_user:\n    print(f\"Found user: {found_user['name']}\")\nelse:\n    print(\"User not found\")\n\n# Union type examples\nprint(f\"Phone 1: {format_phone(1234567890)}\")\nprint(f\"Phone 2: {format_phone('123-456-7890')}\")\n\nresult = safe_divide(10, 2)\nif result is not None:\n    print(f\"Division result: {result}\")\nelse:\n    print(\"Cannot divide by zero\")",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Type Hints and Static Typing</span>"
    ]
  },
  {
    "objectID": "book/09-type-hints.html#advanced-type-hints",
    "href": "book/09-type-hints.html#advanced-type-hints",
    "title": "10  Type Hints and Static Typing",
    "section": "10.3 Advanced Type Hints",
    "text": "10.3 Advanced Type Hints\n\n10.3.1 Generic Types and TypeVar\n\nfrom typing import TypeVar, Generic, List, Callable, Any\n\nT = TypeVar('T')  # Generic type variable\n\nclass Stack(Generic[T]):\n    \"\"\"Generic stack implementation.\"\"\"\n    \n    def __init__(self) -&gt; None:\n        self._items: List[T] = []\n    \n    def push(self, item: T) -&gt; None:\n        \"\"\"Push item onto stack.\"\"\"\n        self._items.append(item)\n    \n    def pop(self) -&gt; T:\n        \"\"\"Pop item from stack.\"\"\"\n        if not self._items:\n            raise IndexError(\"Stack is empty\")\n        return self._items.pop()\n    \n    def peek(self) -&gt; T:\n        \"\"\"Peek at top item without removing.\"\"\"\n        if not self._items:\n            raise IndexError(\"Stack is empty\")\n        return self._items[-1]\n    \n    def is_empty(self) -&gt; bool:\n        \"\"\"Check if stack is empty.\"\"\"\n        return len(self._items) == 0\n    \n    def size(self) -&gt; int:\n        \"\"\"Get stack size.\"\"\"\n        return len(self._items)\n\ndef map_function(func: Callable[[T], T], items: List[T]) -&gt; List[T]:\n    \"\"\"Apply function to each item in list.\"\"\"\n    return [func(item) for item in items]\n\ndef filter_items(predicate: Callable[[T], bool], items: List[T]) -&gt; List[T]:\n    \"\"\"Filter items based on predicate function.\"\"\"\n    return [item for item in items if predicate(item)]\n\n# Test generic types\nint_stack: Stack[int] = Stack()\nint_stack.push(1)\nint_stack.push(2)\nint_stack.push(3)\n\nprint(f\"Stack size: {int_stack.size()}\")\nprint(f\"Top item: {int_stack.peek()}\")\nprint(f\"Popped: {int_stack.pop()}\")\n\nstring_stack: Stack[str] = Stack()\nstring_stack.push(\"hello\")\nstring_stack.push(\"world\")\n\n# Function type examples\nnumbers = [1, 2, 3, 4, 5]\nsquared = map_function(lambda x: x ** 2, numbers)\nevens = filter_items(lambda x: x % 2 == 0, numbers)\n\nprint(f\"Original: {numbers}\")\nprint(f\"Squared: {squared}\")\nprint(f\"Evens: {evens}\")\n\n\n\n10.3.2 Protocol and Structural Typing\n\nfrom typing import Protocol, runtime_checkable\n\n@runtime_checkable\nclass Drawable(Protocol):\n    \"\"\"Protocol for objects that can be drawn.\"\"\"\n    \n    def draw(self) -&gt; str:\n        \"\"\"Draw the object.\"\"\"\n        ...\n    \n    def area(self) -&gt; float:\n        \"\"\"Calculate area.\"\"\"\n        ...\n\nclass Circle:\n    \"\"\"Circle that implements Drawable protocol.\"\"\"\n    \n    def __init__(self, radius: float):\n        self.radius = radius\n    \n    def draw(self) -&gt; str:\n        return f\"Drawing circle with radius {self.radius}\"\n    \n    def area(self) -&gt; float:\n        import math\n        return math.pi * self.radius ** 2\n\nclass Rectangle:\n    \"\"\"Rectangle that implements Drawable protocol.\"\"\"\n    \n    def __init__(self, width: float, height: float):\n        self.width = width\n        self.height = height\n    \n    def draw(self) -&gt; str:\n        return f\"Drawing rectangle {self.width}x{self.height}\"\n    \n    def area(self) -&gt; float:\n        return self.width * self.height\n\ndef render_shapes(shapes: List[Drawable]) -&gt; None:\n    \"\"\"Render a list of drawable shapes.\"\"\"\n    total_area = 0\n    for shape in shapes:\n        print(shape.draw())\n        area = shape.area()\n        print(f\"  Area: {area:.2f}\")\n        total_area += area\n    print(f\"Total area: {total_area:.2f}\")\n\n# Test protocol\nshapes: List[Drawable] = [\n    Circle(5),\n    Rectangle(4, 3),\n    Circle(2)\n]\n\nrender_shapes(shapes)\n\n# Runtime protocol checking\ncircle = Circle(1)\nprint(f\"Is circle Drawable? {isinstance(circle, Drawable)}\")\n\n\n\n10.3.3 Literal and Final Types\n\nfrom typing import Literal, Final\nfrom enum import Enum\n\n# Literal types for specific values\ndef set_log_level(level: Literal[\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"]) -&gt; None:\n    \"\"\"Set logging level to specific allowed values.\"\"\"\n    print(f\"Log level set to: {level}\")\n\ndef get_http_status(code: Literal[200, 404, 500]) -&gt; str:\n    \"\"\"Get HTTP status message for specific codes.\"\"\"\n    messages = {\n        200: \"OK\",\n        404: \"Not Found\", \n        500: \"Internal Server Error\"\n    }\n    return messages[code]\n\n# Final types for constants\nMAX_CONNECTIONS: Final[int] = 100\nAPI_VERSION: Final[str] = \"v1.2.3\"\n\nclass DatabaseConfig:\n    \"\"\"Database configuration with final attributes.\"\"\"\n    \n    def __init__(self, host: str, port: int):\n        self.host: Final[str] = host\n        self.port: Final[int] = port\n        self._connection_string: Final[str] = f\"{host}:{port}\"\n    \n    @property\n    def connection_string(self) -&gt; str:\n        \"\"\"Get connection string.\"\"\"\n        return self._connection_string\n\n# Test literal and final types\nset_log_level(\"INFO\")  # Valid\nset_log_level(\"DEBUG\")  # Valid\n# set_log_level(\"TRACE\")  # Would be flagged by type checker\n\nprint(get_http_status(404))\n\nconfig = DatabaseConfig(\"localhost\", 5432)\nprint(f\"Connection: {config.connection_string}\")\nprint(f\"Max connections: {MAX_CONNECTIONS}\")",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Type Hints and Static Typing</span>"
    ]
  },
  {
    "objectID": "book/09-type-hints.html#type-checking-with-mypy",
    "href": "book/09-type-hints.html#type-checking-with-mypy",
    "title": "10  Type Hints and Static Typing",
    "section": "10.4 Type Checking with mypy",
    "text": "10.4 Type Checking with mypy\n\n10.4.1 Creating a Type-Checked Module\n\n# This would be in a separate .py file for mypy checking\n\"\"\"\nExample module demonstrating type checking.\nRun with: mypy example_module.py\n\"\"\"\n\nfrom typing import Dict, List, Optional, Protocol\nfrom dataclasses import dataclass\nfrom datetime import datetime\n\n@dataclass\nclass Person:\n    \"\"\"Person data class with type hints.\"\"\"\n    name: str\n    age: int\n    email: Optional[str] = None\n    \n    def is_adult(self) -&gt; bool:\n        \"\"\"Check if person is an adult.\"\"\"\n        return self.age &gt;= 18\n    \n    def get_display_name(self) -&gt; str:\n        \"\"\"Get display name with age.\"\"\"\n        return f\"{self.name} ({self.age})\"\n\nclass PersonRepository(Protocol):\n    \"\"\"Protocol for person storage.\"\"\"\n    \n    def save(self, person: Person) -&gt; bool:\n        \"\"\"Save person to storage.\"\"\"\n        ...\n    \n    def find_by_name(self, name: str) -&gt; Optional[Person]:\n        \"\"\"Find person by name.\"\"\"\n        ...\n    \n    def list_all(self) -&gt; List[Person]:\n        \"\"\"List all persons.\"\"\"\n        ...\n\nclass MemoryPersonRepository:\n    \"\"\"In-memory implementation of PersonRepository.\"\"\"\n    \n    def __init__(self) -&gt; None:\n        self._people: Dict[str, Person] = {}\n    \n    def save(self, person: Person) -&gt; bool:\n        \"\"\"Save person to memory.\"\"\"\n        self._people[person.name] = person\n        return True\n    \n    def find_by_name(self, name: str) -&gt; Optional[Person]:\n        \"\"\"Find person by name.\"\"\"\n        return self._people.get(name)\n    \n    def list_all(self) -&gt; List[Person]:\n        \"\"\"List all persons.\"\"\"\n        return list(self._people.values())\n\nclass PersonService:\n    \"\"\"Service for managing persons.\"\"\"\n    \n    def __init__(self, repository: PersonRepository) -&gt; None:\n        self._repository = repository\n    \n    def create_person(self, name: str, age: int, email: Optional[str] = None) -&gt; Person:\n        \"\"\"Create and save a new person.\"\"\"\n        person = Person(name=name, age=age, email=email)\n        \n        if self._repository.save(person):\n            print(f\"Created person: {person.get_display_name()}\")\n            return person\n        else:\n            raise RuntimeError(\"Failed to save person\")\n    \n    def get_adults(self) -&gt; List[Person]:\n        \"\"\"Get all adult persons.\"\"\"\n        all_people = self._repository.list_all()\n        return [person for person in all_people if person.is_adult()]\n    \n    def find_person(self, name: str) -&gt; Optional[Person]:\n        \"\"\"Find person by name.\"\"\"\n        return self._repository.find_by_name(name)\n\n# Demonstration\ndef demonstrate_typed_service() -&gt; None:\n    \"\"\"Demonstrate the typed person service.\"\"\"\n    print(\"=== Type-Checked Person Service Demo ===\")\n    \n    # Create repository and service\n    repository = MemoryPersonRepository()\n    service = PersonService(repository)\n    \n    # Create some people\n    alice = service.create_person(\"Alice Johnson\", 25, \"alice@example.com\")\n    bob = service.create_person(\"Bob Wilson\", 17)\n    charlie = service.create_person(\"Charlie Brown\", 30)\n    \n    # Find adults\n    adults = service.get_adults()\n    print(f\"\\nAdults ({len(adults)}):\")\n    for adult in adults:\n        print(f\"  - {adult.get_display_name()}\")\n    \n    # Find specific person\n    found_person = service.find_person(\"Alice Johnson\")\n    if found_person:\n        print(f\"\\nFound: {found_person.get_display_name()}\")\n        print(f\"Email: {found_person.email or 'Not provided'}\")\n\ndemonstrate_typed_service()",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Type Hints and Static Typing</span>"
    ]
  },
  {
    "objectID": "book/09-type-hints.html#type-checking-tools-and-configuration",
    "href": "book/09-type-hints.html#type-checking-tools-and-configuration",
    "title": "10  Type Hints and Static Typing",
    "section": "10.5 Type Checking Tools and Configuration",
    "text": "10.5 Type Checking Tools and Configuration\n\n10.5.1 mypy Configuration\n# mypy.ini configuration file\n\"\"\"\n[mypy]\npython_version = 3.12\nwarn_return_any = True\nwarn_unused_configs = True\ndisallow_untyped_defs = True\ndisallow_incomplete_defs = True\ncheck_untyped_defs = True\ndisallow_untyped_decorators = True\nno_implicit_optional = True\nwarn_redundant_casts = True\nwarn_unused_ignores = True\nwarn_no_return = True\nwarn_unreachable = True\nstrict_equality = True\n\n[mypy-external_library.*]\nignore_missing_imports = True\n\"\"\"\n\n# Example of gradual typing\ndef legacy_function(data):  # type: ignore\n    \"\"\"Legacy function without types.\"\"\"\n    return data.process()\n\ndef modern_function(data: Dict[str, Any]) -&gt; List[str]:\n    \"\"\"Modern function with types.\"\"\"\n    result: List[str] = []\n    for key, value in data.items():\n        if isinstance(value, str):\n            result.append(f\"{key}: {value}\")\n    return result",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Type Hints and Static Typing</span>"
    ]
  },
  {
    "objectID": "book/09-type-hints.html#real-world-examples",
    "href": "book/09-type-hints.html#real-world-examples",
    "title": "10  Type Hints and Static Typing",
    "section": "10.6 Real-World Examples",
    "text": "10.6 Real-World Examples\n\n10.6.1 Example 1: API Client with Type Hints\n\nfrom typing import Dict, List, Optional, Union, Any, TypedDict\nfrom dataclasses import dataclass\nfrom enum import Enum\nimport json\nfrom datetime import datetime\n\nclass HttpMethod(Enum):\n    \"\"\"HTTP methods for API requests.\"\"\"\n    GET = \"GET\"\n    POST = \"POST\"\n    PUT = \"PUT\"\n    DELETE = \"DELETE\"\n\nclass ApiResponse(TypedDict):\n    \"\"\"Typed dictionary for API responses.\"\"\"\n    status_code: int\n    data: Optional[Dict[str, Any]]\n    error: Optional[str]\n\n@dataclass\nclass User:\n    \"\"\"User data model.\"\"\"\n    id: int\n    name: str\n    email: str\n    created_at: datetime\n    is_active: bool = True\n    \n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; 'User':\n        \"\"\"Create User from dictionary.\"\"\"\n        return cls(\n            id=data['id'],\n            name=data['name'],\n            email=data['email'],\n            created_at=datetime.fromisoformat(data['created_at']),\n            is_active=data.get('is_active', True)\n        )\n    \n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Convert User to dictionary.\"\"\"\n        return {\n            'id': self.id,\n            'name': self.name,\n            'email': self.email,\n            'created_at': self.created_at.isoformat(),\n            'is_active': self.is_active\n        }\n\nclass ApiClient:\n    \"\"\"Type-safe API client.\"\"\"\n    \n    def __init__(self, base_url: str, api_key: str) -&gt; None:\n        self.base_url = base_url.rstrip('/')\n        self.api_key = api_key\n    \n    def _make_request(\n        self, \n        method: HttpMethod, \n        endpoint: str, \n        data: Optional[Dict[str, Any]] = None\n    ) -&gt; ApiResponse:\n        \"\"\"Make HTTP request (simulated).\"\"\"\n        # Simulate API call\n        print(f\"{method.value} {self.base_url}{endpoint}\")\n        if data:\n            print(f\"Data: {json.dumps(data, indent=2)}\")\n        \n        # Simulate successful response\n        if method == HttpMethod.GET and \"/users/\" in endpoint:\n            user_id = int(endpoint.split('/')[-1])\n            return {\n                'status_code': 200,\n                'data': {\n                    'id': user_id,\n                    'name': f'User {user_id}',\n                    'email': f'user{user_id}@example.com',\n                    'created_at': '2023-01-01T00:00:00',\n                    'is_active': True\n                },\n                'error': None\n            }\n        elif method == HttpMethod.POST and endpoint == \"/users\":\n            return {\n                'status_code': 201,\n                'data': {**data, 'id': 123, 'created_at': '2023-01-01T00:00:00'},\n                'error': None\n            }\n        else:\n            return {\n                'status_code': 200,\n                'data': None,\n                'error': None\n            }\n    \n    def get_user(self, user_id: int) -&gt; Optional[User]:\n        \"\"\"Get user by ID.\"\"\"\n        response = self._make_request(HttpMethod.GET, f\"/users/{user_id}\")\n        \n        if response['status_code'] == 200 and response['data']:\n            return User.from_dict(response['data'])\n        return None\n    \n    def create_user(self, name: str, email: str) -&gt; Optional[User]:\n        \"\"\"Create new user.\"\"\"\n        user_data = {\n            'name': name,\n            'email': email,\n            'is_active': True\n        }\n        \n        response = self._make_request(HttpMethod.POST, \"/users\", user_data)\n        \n        if response['status_code'] in (200, 201) and response['data']:\n            return User.from_dict(response['data'])\n        return None\n    \n    def list_users(self, active_only: bool = True) -&gt; List[User]:\n        \"\"\"List users with optional filtering.\"\"\"\n        response = self._make_request(HttpMethod.GET, \"/users\")\n        \n        if response['status_code'] == 200 and response['data']:\n            # Simulate multiple users\n            users_data = [response['data']]  # In reality, would be a list\n            users = [User.from_dict(user_data) for user_data in users_data]\n            \n            if active_only:\n                return [user for user in users if user.is_active]\n            return users\n        return []\n\n# Demonstrate typed API client\ndef demonstrate_api_client() -&gt; None:\n    \"\"\"Demonstrate the type-safe API client.\"\"\"\n    print(\"=== Type-Safe API Client Demo ===\")\n    \n    client = ApiClient(\"https://api.example.com\", \"secret-key\")\n    \n    # Get user\n    user = client.get_user(1)\n    if user:\n        print(f\"Retrieved user: {user.name} ({user.email})\")\n    \n    # Create user\n    new_user = client.create_user(\"Jane Doe\", \"jane@example.com\")\n    if new_user:\n        print(f\"Created user: {new_user.name} with ID {new_user.id}\")\n    \n    # List users\n    users = client.list_users(active_only=True)\n    print(f\"Found {len(users)} active users\")\n\ndemonstrate_api_client()\n\n\n\n10.6.2 Example 2: Configuration Management with Types\n\nfrom typing import Dict, List, Optional, Union, Literal, get_type_hints\nfrom dataclasses import dataclass, field\nfrom pathlib import Path\nimport os\n\n@dataclass\nclass DatabaseConfig:\n    \"\"\"Database configuration with type validation.\"\"\"\n    host: str\n    port: int\n    username: str\n    password: str\n    database: str\n    ssl_enabled: bool = False\n    connection_timeout: int = 30\n    \n    def __post_init__(self) -&gt; None:\n        \"\"\"Validate configuration after initialization.\"\"\"\n        if not 1 &lt;= self.port &lt;= 65535:\n            raise ValueError(f\"Invalid port: {self.port}\")\n        if self.connection_timeout &lt;= 0:\n            raise ValueError(\"Connection timeout must be positive\")\n\n@dataclass \nclass CacheConfig:\n    \"\"\"Cache configuration.\"\"\"\n    backend: Literal[\"redis\", \"memcached\", \"memory\"]\n    host: Optional[str] = None\n    port: Optional[int] = None\n    ttl_seconds: int = 3600\n    max_size: Optional[int] = None\n    \n    def __post_init__(self) -&gt; None:\n        \"\"\"Validate cache configuration.\"\"\"\n        if self.backend in (\"redis\", \"memcached\"):\n            if not self.host or not self.port:\n                raise ValueError(f\"{self.backend} backend requires host and port\")\n\n@dataclass\nclass LoggingConfig:\n    \"\"\"Logging configuration.\"\"\"\n    level: Literal[\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"]\n    format: str = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n    file_path: Optional[Path] = None\n    max_file_size_mb: int = 10\n    backup_count: int = 5\n\n@dataclass\nclass AppConfig:\n    \"\"\"Main application configuration.\"\"\"\n    app_name: str\n    debug: bool\n    secret_key: str\n    database: DatabaseConfig\n    cache: CacheConfig\n    logging: LoggingConfig\n    allowed_hosts: List[str] = field(default_factory=list)\n    api_rate_limit: int = 1000\n    \n    @classmethod\n    def from_env(cls) -&gt; 'AppConfig':\n        \"\"\"Create configuration from environment variables.\"\"\"\n        return cls(\n            app_name=os.getenv(\"APP_NAME\", \"MyApp\"),\n            debug=os.getenv(\"DEBUG\", \"false\").lower() == \"true\",\n            secret_key=os.getenv(\"SECRET_KEY\", \"dev-secret\"),\n            database=DatabaseConfig(\n                host=os.getenv(\"DB_HOST\", \"localhost\"),\n                port=int(os.getenv(\"DB_PORT\", \"5432\")),\n                username=os.getenv(\"DB_USER\", \"user\"),\n                password=os.getenv(\"DB_PASSWORD\", \"password\"),\n                database=os.getenv(\"DB_NAME\", \"myapp\"),\n                ssl_enabled=os.getenv(\"DB_SSL\", \"false\").lower() == \"true\"\n            ),\n            cache=CacheConfig(\n                backend=os.getenv(\"CACHE_BACKEND\", \"memory\"),  # type: ignore\n                host=os.getenv(\"CACHE_HOST\"),\n                port=int(os.getenv(\"CACHE_PORT\", \"6379\")) if os.getenv(\"CACHE_PORT\") else None\n            ),\n            logging=LoggingConfig(\n                level=os.getenv(\"LOG_LEVEL\", \"INFO\"),  # type: ignore\n                file_path=Path(os.getenv(\"LOG_FILE\")) if os.getenv(\"LOG_FILE\") else None\n            ),\n            allowed_hosts=os.getenv(\"ALLOWED_HOSTS\", \"\").split(\",\") if os.getenv(\"ALLOWED_HOSTS\") else []\n        )\n    \n    def validate(self) -&gt; List[str]:\n        \"\"\"Validate entire configuration and return errors.\"\"\"\n        errors: List[str] = []\n        \n        if not self.secret_key or len(self.secret_key) &lt; 16:\n            errors.append(\"Secret key must be at least 16 characters\")\n        \n        if self.api_rate_limit &lt;= 0:\n            errors.append(\"API rate limit must be positive\")\n        \n        # Validate database connection would work\n        if self.database.port == self.cache.port and self.database.host == self.cache.host:\n            errors.append(\"Database and cache cannot use same host:port\")\n        \n        return errors\n\nclass ConfigManager:\n    \"\"\"Type-safe configuration manager.\"\"\"\n    \n    def __init__(self, config: AppConfig) -&gt; None:\n        self.config = config\n        self._validate_config()\n    \n    def _validate_config(self) -&gt; None:\n        \"\"\"Validate configuration on initialization.\"\"\"\n        errors = self.config.validate()\n        if errors:\n            error_msg = \"Configuration errors:\\n\" + \"\\n\".join(f\"  - {error}\" for error in errors)\n            raise ValueError(error_msg)\n    \n    def get_database_url(self) -&gt; str:\n        \"\"\"Get database connection URL.\"\"\"\n        db = self.config.database\n        protocol = \"postgresql+asyncpg\" if db.ssl_enabled else \"postgresql\"\n        return f\"{protocol}://{db.username}:{db.password}@{db.host}:{db.port}/{db.database}\"\n    \n    def get_cache_url(self) -&gt; Optional[str]:\n        \"\"\"Get cache connection URL.\"\"\"\n        cache = self.config.cache\n        if cache.backend == \"memory\":\n            return None\n        elif cache.backend == \"redis\":\n            return f\"redis://{cache.host}:{cache.port}\"\n        elif cache.backend == \"memcached\":\n            return f\"memcached://{cache.host}:{cache.port}\"\n        return None\n    \n    def is_production(self) -&gt; bool:\n        \"\"\"Check if running in production mode.\"\"\"\n        return not self.config.debug and self.config.secret_key != \"dev-secret\"\n    \n    def print_config_summary(self) -&gt; None:\n        \"\"\"Print configuration summary.\"\"\"\n        print(\"=== Configuration Summary ===\")\n        print(f\"App: {self.config.app_name}\")\n        print(f\"Debug: {self.config.debug}\")\n        print(f\"Database: {self.config.database.host}:{self.config.database.port}\")\n        print(f\"Cache: {self.config.cache.backend}\")\n        print(f\"Log level: {self.config.logging.level}\")\n        print(f\"Production mode: {self.is_production()}\")\n\n# Demonstrate configuration management\ndef demonstrate_config_management() -&gt; None:\n    \"\"\"Demonstrate type-safe configuration management.\"\"\"\n    print(\"=== Type-Safe Configuration Demo ===\")\n    \n    # Create configuration from environment\n    try:\n        config = AppConfig.from_env()\n        manager = ConfigManager(config)\n        \n        manager.print_config_summary()\n        \n        print(f\"\\nDatabase URL: {manager.get_database_url()}\")\n        cache_url = manager.get_cache_url()\n        if cache_url:\n            print(f\"Cache URL: {cache_url}\")\n        else:\n            print(\"Using in-memory cache\")\n        \n    except ValueError as e:\n        print(f\"Configuration error: {e}\")\n\ndemonstrate_config_management()",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Type Hints and Static Typing</span>"
    ]
  },
  {
    "objectID": "book/09-type-hints.html#best-practices",
    "href": "book/09-type-hints.html#best-practices",
    "title": "10  Type Hints and Static Typing",
    "section": "10.7 Best Practices",
    "text": "10.7 Best Practices\n\n10.7.1 Type Hint Guidelines\n# Good practices for type hints\n\n# 1. Use type hints for public APIs\ndef public_function(param: str) -&gt; int:\n    \"\"\"Public functions should always have type hints.\"\"\"\n    return len(param)\n\n# 2. Use Optional for nullable values\ndef find_item(items: List[str], target: str) -&gt; Optional[str]:\n    \"\"\"Return None when item not found.\"\"\"\n    return target if target in items else None\n\n# 3. Use Union sparingly, prefer Protocols\nfrom typing import Protocol\n\nclass Readable(Protocol):\n    def read(self) -&gt; str: ...\n\ndef process_readable(source: Readable) -&gt; str:\n    \"\"\"Better than Union[File, StringIO, ...]\"\"\"\n    return source.read().upper()\n\n# 4. Use TypedDict for dictionary schemas\nclass UserDict(TypedDict):\n    name: str\n    age: int\n    email: Optional[str]\n\ndef process_user_data(user: UserDict) -&gt; str:\n    \"\"\"Clear schema for dictionary parameters.\"\"\"\n    return f\"{user['name']} ({user['age']})\"\n\n# 5. Use Generic for reusable containers\nfrom typing import TypeVar, Generic\n\nT = TypeVar('T')\n\nclass Repository(Generic[T]):\n    def save(self, item: T) -&gt; T: ...\n    def find_by_id(self, id: int) -&gt; Optional[T]: ...",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Type Hints and Static Typing</span>"
    ]
  },
  {
    "objectID": "book/09-type-hints.html#common-type-checking-errors",
    "href": "book/09-type-hints.html#common-type-checking-errors",
    "title": "10  Type Hints and Static Typing",
    "section": "10.8 Common Type Checking Errors",
    "text": "10.8 Common Type Checking Errors\n# Common mistakes and solutions\n\n# Mistake 1: Using List instead of list (Python 3.9+)\n# Old way (before Python 3.9)\nfrom typing import List, Dict\ndef old_style(items: List[str]) -&gt; Dict[str, int]:\n    pass\n\n# New way (Python 3.9+)\ndef new_style(items: list[str]) -&gt; dict[str, int]:\n    pass\n\n# Mistake 2: Not handling None in Optional types\ndef unsafe_function(value: Optional[str]) -&gt; int:\n    return len(value)  # Error: value might be None\n\ndef safe_function(value: Optional[str]) -&gt; int:\n    if value is None:\n        return 0\n    return len(value)\n\n# Mistake 3: Using Any too liberally\ndef bad_function(data: Any) -&gt; Any:  # Defeats purpose of type hints\n    return data.some_method()\n\ndef better_function(data: Dict[str, Union[str, int]]) -&gt; str:\n    return str(data.get('name', 'Unknown'))",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Type Hints and Static Typing</span>"
    ]
  },
  {
    "objectID": "book/09-type-hints.html#self-review-questions",
    "href": "book/09-type-hints.html#self-review-questions",
    "title": "10  Type Hints and Static Typing",
    "section": "10.9 Self-Review Questions",
    "text": "10.9 Self-Review Questions\n\n10.9.1 Knowledge Check\n\nWhat’s the difference between type hints and runtime type checking?\nWhen should you use Optional vs Union?\nWhat are Protocol types and when are they useful?\nHow do Generic types improve code reusability?\nWhat’s the purpose of TypedDict?\n\n\n\n10.9.2 Coding Challenges\n\nAdd comprehensive type hints to an existing function\nCreate a Generic class for a data structure\nDesign a Protocol for a plugin system\nBuild a type-safe configuration loader\n\n\n\n10.9.3 Answers\n\nType hints are compile-time annotations; runtime checking requires additional tools\nOptional for nullable single types; Union for multiple possible types\nProtocols define structural types; useful for duck typing with type safety\nGenerics allow type-safe containers and functions that work with multiple types\nTypedDict provides type safety for dictionary schemas",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Type Hints and Static Typing</span>"
    ]
  },
  {
    "objectID": "book/09-type-hints.html#tools-and-integration",
    "href": "book/09-type-hints.html#tools-and-integration",
    "title": "10  Type Hints and Static Typing",
    "section": "10.10 Tools and Integration",
    "text": "10.10 Tools and Integration\n\n10.10.1 Popular Type Checking Tools\n\nmypy - The most popular static type checker\npyright - Microsoft’s fast type checker (used in Pylance)\npyre - Facebook’s type checker\npytype - Google’s type checker\n\n\n\n10.10.2 IDE Integration\n\nVS Code: Pylance extension (pyright-based)\nPyCharm: Built-in type checking\nVim/Neovim: coc-pyright, ALE\nEmacs: lsp-pyright",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Type Hints and Static Typing</span>"
    ]
  },
  {
    "objectID": "book/09-type-hints.html#next-steps",
    "href": "book/09-type-hints.html#next-steps",
    "title": "10  Type Hints and Static Typing",
    "section": "10.11 Next Steps",
    "text": "10.11 Next Steps\nExcellent! You now understand Python’s type hinting system. Next, we’ll explore Async Programming to learn about concurrent and asynchronous programming with asyncio.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Type Hints and Static Typing</span>"
    ]
  },
  {
    "objectID": "book/09-type-hints.html#resources",
    "href": "book/09-type-hints.html#resources",
    "title": "10  Type Hints and Static Typing",
    "section": "10.12 Resources",
    "text": "10.12 Resources\n\nPython Typing Documentation\nmypy Documentation\nReal Python: Type Checking\nPEP 484: Type Hints",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Type Hints and Static Typing</span>"
    ]
  },
  {
    "objectID": "book/10-async.html",
    "href": "book/10-async.html",
    "title": "11  Async Programming and Concurrency",
    "section": "",
    "text": "11.1 Understanding Async Programming\nAsynchronous programming allows you to write concurrent code that can handle multiple tasks efficiently without blocking, making it perfect for I/O-bound operations like web requests, file operations, and database queries.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Async Programming and Concurrency</span>"
    ]
  },
  {
    "objectID": "book/10-async.html#understanding-async-programming",
    "href": "book/10-async.html#understanding-async-programming",
    "title": "11  Async Programming and Concurrency",
    "section": "",
    "text": "11.1.1 Synchronous vs Asynchronous\nThe key difference: - Synchronous (blocking): Your program waits for each task to finish before starting the next one - Asynchronous (non-blocking): Your program can start multiple tasks and switch between them while waiting\nReal-world analogy: - Synchronous: Like calling different restaurants one by one, waiting on hold for each order before calling the next - Asynchronous: Like placing online orders at multiple restaurants at the same time, checking each when ready\nLet’s see this in action:\n\nimport time\nimport asyncio\n\n# Synchronous approach - blocking\ndef sync_task(name: str, duration: int) -&gt; str:\n    \"\"\"Simulate a time-consuming task synchronously.\"\"\"\n    print(f\"Starting {name}...\")\n    time.sleep(duration)  # BLOCKS the entire program - nothing else can run\n    print(f\"Completed {name}\")\n    return f\"Result from {name}\"\n\ndef run_sync_tasks():\n    \"\"\"Run multiple tasks synchronously - one after another.\"\"\"\n    print(\"=== Synchronous Execution ===\")\n    start_time = time.time()\n    \n    # These run ONE AT A TIME - total time = 2 + 2 + 2 = 6 seconds\n    result1 = sync_task(\"Task 1\", 2)  # Program is frozen for 2 seconds\n    result2 = sync_task(\"Task 2\", 2)  # Program is frozen for another 2 seconds  \n    result3 = sync_task(\"Task 3\", 2)  # Program is frozen for another 2 seconds\n    \n    end_time = time.time()\n    print(f\"Total time: {end_time - start_time:.2f} seconds\")\n    return [result1, result2, result3]\n\n# Asynchronous approach - non-blocking\nasync def async_task(name: str, duration: int) -&gt; str:\n    \"\"\"Simulate a time-consuming task asynchronously.\"\"\"\n    print(f\"Starting {name}...\")\n    await asyncio.sleep(duration)  # NON-BLOCKING - other tasks can run during this wait\n    print(f\"Completed {name}\")\n    return f\"Result from {name}\"\n\nasync def run_async_tasks():\n    \"\"\"Run multiple tasks asynchronously - all at the same time.\"\"\"\n    print(\"\\n=== Asynchronous Execution ===\")\n    start_time = time.time()\n    \n    # These run CONCURRENTLY - total time ≈ 2 seconds (all tasks run together)\n    results = await asyncio.gather(\n        async_task(\"Task 1\", 2),  # All three tasks start nearly simultaneously\n        async_task(\"Task 2\", 2),  # While one waits, others can make progress\n        async_task(\"Task 3\", 2)   # Total time = max(2, 2, 2) = 2 seconds\n    )\n    \n    end_time = time.time()\n    print(f\"Total time: {end_time - start_time:.2f} seconds\")\n    return results\n\n# Demonstrate the difference\nsync_results = run_sync_tasks()\n\n# For Jupyter notebooks, we need to use await directly\nprint(\"\\n=== Asynchronous Execution ===\")\nstart_time = time.time()\n\n# Run tasks concurrently - notice how much faster this is!\nasync_results = await asyncio.gather(\n    async_task(\"Task 1\", 2),\n    async_task(\"Task 2\", 2),\n    async_task(\"Task 3\", 2)\n)\n\nend_time = time.time()\nprint(f\"Total time: {end_time - start_time:.2f} seconds\")\n\nKey insights from this example: - Synchronous: 6 seconds total (2+2+2) - tasks run sequentially - Asynchronous: ~2 seconds total - tasks run concurrently - When to use async: Perfect for I/O operations (file reading, network requests, database queries) - When NOT to use async: CPU-intensive calculations (use multiprocessing instead)",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Async Programming and Concurrency</span>"
    ]
  },
  {
    "objectID": "book/10-async.html#basic-asyncawait-syntax",
    "href": "book/10-async.html#basic-asyncawait-syntax",
    "title": "11  Async Programming and Concurrency",
    "section": "11.2 Basic Async/Await Syntax",
    "text": "11.2 Basic Async/Await Syntax\n\n11.2.1 Creating Async Functions\n\nimport asyncio\nimport time\nfrom typing import List, Dict, Any\n\nasync def fetch_data(url: str) -&gt; Dict[str, Any]:\n    \"\"\"Simulate fetching data from an API.\"\"\"\n    print(f\"Fetching data from {url}\")\n    \n    # Simulate network delay\n    await asyncio.sleep(1)\n    \n    # Simulate response data\n    return {\n        \"url\": url,\n        \"status\": \"success\",\n        \"data\": f\"Data from {url}\",\n        \"timestamp\": time.time()\n    }\n\nasync def process_data(data: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"Process fetched data asynchronously.\"\"\"\n    print(f\"Processing data from {data['url']}\")\n    \n    # Simulate processing time\n    await asyncio.sleep(0.5)\n    \n    processed_data = {\n        \"original\": data,\n        \"processed\": data[\"data\"].upper(),\n        \"word_count\": len(data[\"data\"].split())\n    }\n    \n    return processed_data\n\nasync def fetch_and_process(url: str) -&gt; Dict[str, Any]:\n    \"\"\"Fetch and process data in sequence.\"\"\"\n    # Await each async operation\n    raw_data = await fetch_data(url)\n    processed_data = await process_data(raw_data)\n    return processed_data\n\n# Run async functions\nasync def main():\n    \"\"\"Main async function demonstrating sequential execution.\"\"\"\n    print(\"=== Sequential Async Operations ===\")\n    \n    urls = [\n        \"https://api.example.com/users\",\n        \"https://api.example.com/posts\",\n        \"https://api.example.com/comments\"\n    ]\n    \n    results = []\n    for url in urls:\n        result = await fetch_and_process(url)\n        results.append(result)\n    \n    print(f\"Processed {len(results)} items sequentially\")\n    return results\n\n# Execute the async main function\nresults = await main()\n\n\n\n11.2.2 Concurrent Execution with asyncio.gather()\n\nasync def concurrent_fetch_and_process():\n    \"\"\"Demonstrate concurrent execution of async operations.\"\"\"\n    print(\"\\n=== Concurrent Async Operations ===\")\n    \n    urls = [\n        \"https://api.example.com/users\",\n        \"https://api.example.com/posts\", \n        \"https://api.example.com/comments\"\n    ]\n    \n    start_time = time.time()\n    \n    # Run all fetch_and_process operations concurrently\n    results = await asyncio.gather(\n        *[fetch_and_process(url) for url in urls]\n    )\n    \n    end_time = time.time()\n    print(f\"Processed {len(results)} items concurrently in {end_time - start_time:.2f}s\")\n    \n    return results\n\n# Compare sequential vs concurrent\nsequential_results = await main()\nconcurrent_results = await concurrent_fetch_and_process()",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Async Programming and Concurrency</span>"
    ]
  },
  {
    "objectID": "book/10-async.html#working-with-asyncio",
    "href": "book/10-async.html#working-with-asyncio",
    "title": "11  Async Programming and Concurrency",
    "section": "11.3 Working with asyncio",
    "text": "11.3 Working with asyncio\n\n11.3.1 Creating and Managing Tasks\n\nimport asyncio\nfrom typing import Optional\n\nasync def long_running_task(name: str, duration: int) -&gt; str:\n    \"\"\"Simulate a long-running task.\"\"\"\n    print(f\"Task {name} started\")\n    try:\n        await asyncio.sleep(duration)\n        result = f\"Task {name} completed successfully\"\n        print(result)\n        return result\n    except asyncio.CancelledError:\n        print(f\"Task {name} was cancelled\")\n        raise\n\nasync def task_management_demo():\n    \"\"\"Demonstrate task creation and management.\"\"\"\n    print(\"=== Task Management Demo ===\")\n    \n    # Create tasks\n    task1 = asyncio.create_task(long_running_task(\"A\", 3))\n    task2 = asyncio.create_task(long_running_task(\"B\", 2))\n    task3 = asyncio.create_task(long_running_task(\"C\", 4))\n    \n    # Wait for first task to complete\n    print(\"Waiting for task B to complete...\")\n    result_b = await task2\n    print(f\"Result: {result_b}\")\n    \n    # Cancel task3 if it's still running\n    if not task3.done():\n        print(\"Cancelling task C...\")\n        task3.cancel()\n    \n    # Wait for remaining tasks with timeout\n    try:\n        remaining_results = await asyncio.wait_for(\n            asyncio.gather(task1, task3, return_exceptions=True),\n            timeout=2.0\n        )\n        print(f\"Remaining results: {remaining_results}\")\n    except asyncio.TimeoutError:\n        print(\"Timeout waiting for remaining tasks\")\n    except Exception as e:\n        print(f\"Error in remaining tasks: {e}\")\n\nawait task_management_demo()\n\n\n\n11.3.2 asyncio.wait() and Task Control\n\nasync def worker_task(worker_id: int, work_items: int) -&gt; List[str]:\n    \"\"\"Simulate a worker processing multiple items.\"\"\"\n    results = []\n    for i in range(work_items):\n        await asyncio.sleep(0.5)  # Simulate work\n        result = f\"Worker {worker_id} completed item {i + 1}\"\n        print(result)\n        results.append(result)\n    return results\n\nasync def wait_demo():\n    \"\"\"Demonstrate asyncio.wait() for advanced task control.\"\"\"\n    print(\"\\n=== asyncio.wait() Demo ===\")\n    \n    # Create multiple worker tasks\n    tasks = [\n        asyncio.create_task(worker_task(1, 3)),\n        asyncio.create_task(worker_task(2, 2)),\n        asyncio.create_task(worker_task(3, 4))\n    ]\n    \n    # Wait for first task to complete\n    done, pending = await asyncio.wait(\n        tasks, \n        return_when=asyncio.FIRST_COMPLETED\n    )\n    \n    print(f\"First task completed: {len(done)} done, {len(pending)} pending\")\n    \n    # Get result from completed task\n    for task in done:\n        result = await task\n        print(f\"First completed result: {len(result)} items\")\n    \n    # Wait for all remaining tasks\n    if pending:\n        remaining_results = await asyncio.gather(*pending)\n        print(f\"All tasks completed. Total results: {len(remaining_results)}\")\n\nawait wait_demo()",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Async Programming and Concurrency</span>"
    ]
  },
  {
    "objectID": "book/10-async.html#real-world-examples",
    "href": "book/10-async.html#real-world-examples",
    "title": "11  Async Programming and Concurrency",
    "section": "11.4 Real-World Examples",
    "text": "11.4 Real-World Examples\n\n11.4.1 Example 1: Web Scraper with Rate Limiting\n\nimport asyncio\nimport aiohttp\nfrom typing import List, Dict, Optional\nfrom dataclasses import dataclass\nfrom datetime import datetime\nimport json\n\n@dataclass\nclass ScrapingResult:\n    \"\"\"Result from scraping a single URL.\"\"\"\n    url: str\n    status_code: Optional[int]\n    content_length: Optional[int]\n    title: Optional[str]\n    error: Optional[str]\n    timestamp: datetime\n\nclass RateLimitedScraper:\n    \"\"\"Web scraper with rate limiting and error handling.\"\"\"\n    \n    def __init__(self, max_concurrent: int = 5, delay_between_requests: float = 1.0):\n        self.max_concurrent = max_concurrent\n        self.delay_between_requests = delay_between_requests\n        self.semaphore = asyncio.Semaphore(max_concurrent)\n        self.session: Optional[aiohttp.ClientSession] = None\n    \n    async def __aenter__(self):\n        \"\"\"Async context manager entry.\"\"\"\n        self.session = aiohttp.ClientSession(\n            timeout=aiohttp.ClientTimeout(total=10),\n            headers={'User-Agent': 'AsyncScraper/1.0'}\n        )\n        return self\n    \n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"Async context manager exit.\"\"\"\n        if self.session:\n            await self.session.close()\n    \n    async def scrape_url(self, url: str) -&gt; ScrapingResult:\n        \"\"\"Scrape a single URL with rate limiting.\"\"\"\n        async with self.semaphore:  # Limit concurrent requests\n            try:\n                print(f\"Scraping: {url}\")\n                \n                # Add delay to respect rate limits\n                await asyncio.sleep(self.delay_between_requests)\n                \n                async with self.session.get(url) as response:\n                    content = await response.text()\n                    \n                    # Extract title (simplified)\n                    title = None\n                    if '&lt;title&gt;' in content.lower():\n                        start = content.lower().find('&lt;title&gt;') + 7\n                        end = content.lower().find('&lt;/title&gt;', start)\n                        if end != -1:\n                            title = content[start:end].strip()\n                    \n                    return ScrapingResult(\n                        url=url,\n                        status_code=response.status,\n                        content_length=len(content),\n                        title=title,\n                        error=None,\n                        timestamp=datetime.now()\n                    )\n            \n            except asyncio.TimeoutError:\n                return ScrapingResult(\n                    url=url, status_code=None, content_length=None,\n                    title=None, error=\"Timeout\", timestamp=datetime.now()\n                )\n            except Exception as e:\n                return ScrapingResult(\n                    url=url, status_code=None, content_length=None,\n                    title=None, error=str(e), timestamp=datetime.now()\n                )\n    \n    async def scrape_urls(self, urls: List[str]) -&gt; List[ScrapingResult]:\n        \"\"\"Scrape multiple URLs concurrently.\"\"\"\n        print(f\"Starting to scrape {len(urls)} URLs...\")\n        \n        # Create tasks for all URLs\n        tasks = [self.scrape_url(url) for url in urls]\n        \n        # Execute tasks concurrently\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n        \n        # Process results\n        valid_results = []\n        for result in results:\n            if isinstance(result, ScrapingResult):\n                valid_results.append(result)\n            else:\n                print(f\"Unexpected error: {result}\")\n        \n        return valid_results\n\nasync def scraping_demo():\n    \"\"\"Demonstrate the rate-limited web scraper.\"\"\"\n    print(\"=== Web Scraping Demo ===\")\n    \n    # Note: These are example URLs - in practice, use real websites\n    urls = [\n        \"https://httpbin.org/delay/1\",\n        \"https://httpbin.org/status/200\",\n        \"https://httpbin.org/html\",\n        \"https://httpbin.org/json\",\n        \"https://httpbin.org/status/404\",\n    ]\n    \n    async with RateLimitedScraper(max_concurrent=3, delay_between_requests=0.5) as scraper:\n        results = await scraper.scrape_urls(urls)\n        \n        print(f\"\\n=== Scraping Results ===\")\n        successful = 0\n        for result in results:\n            if result.error:\n                print(f\"❌ {result.url}: {result.error}\")\n            else:\n                print(f\"✅ {result.url}: {result.status_code} ({result.content_length} bytes)\")\n                if result.title:\n                    print(f\"   Title: {result.title[:50]}...\")\n                successful += 1\n        \n        print(f\"\\nSummary: {successful}/{len(results)} URLs scraped successfully\")\n\n# Run the demo (commented out as it requires network access)\n# asyncio.run(scraping_demo())\nprint(\"Web scraping demo code ready (requires network access to run)\")\n\n\n\n11.4.2 Example 2: Producer-Consumer Pattern\n\nimport asyncio\nimport random\nfrom typing import Any\nfrom dataclasses import dataclass\nfrom datetime import datetime\n\n@dataclass\nclass WorkItem:\n    \"\"\"Represents a work item in the queue.\"\"\"\n    id: int\n    data: str\n    priority: int\n    created_at: datetime\n\nclass AsyncProducerConsumer:\n    \"\"\"Producer-consumer pattern using asyncio queues.\"\"\"\n    \n    def __init__(self, max_queue_size: int = 10):\n        self.queue = asyncio.Queue(maxsize=max_queue_size)\n        self.processed_items = []\n        self.is_running = False\n    \n    async def producer(self, producer_id: int, num_items: int):\n        \"\"\"Produce work items and add them to the queue.\"\"\"\n        print(f\"Producer {producer_id} starting...\")\n        \n        for i in range(num_items):\n            # Create work item\n            item = WorkItem(\n                id=i,\n                data=f\"Data from Producer {producer_id}, Item {i}\",\n                priority=random.randint(1, 5),\n                created_at=datetime.now()\n            )\n            \n            # Add to queue (will block if queue is full)\n            await self.queue.put(item)\n            print(f\"Producer {producer_id} produced item {i}\")\n            \n            # Simulate production delay\n            await asyncio.sleep(random.uniform(0.1, 0.5))\n        \n        print(f\"Producer {producer_id} finished\")\n    \n    async def consumer(self, consumer_id: int):\n        \"\"\"Consume work items from the queue.\"\"\"\n        print(f\"Consumer {consumer_id} starting...\")\n        \n        while self.is_running:\n            try:\n                # Get item from queue with timeout\n                item = await asyncio.wait_for(self.queue.get(), timeout=1.0)\n                \n                # Process the item\n                await self.process_item(consumer_id, item)\n                \n                # Mark task as done\n                self.queue.task_done()\n                \n            except asyncio.TimeoutError:\n                # No items available, continue checking\n                continue\n            except Exception as e:\n                print(f\"Consumer {consumer_id} error: {e}\")\n        \n        print(f\"Consumer {consumer_id} finished\")\n    \n    async def process_item(self, consumer_id: int, item: WorkItem):\n        \"\"\"Process a single work item.\"\"\"\n        print(f\"Consumer {consumer_id} processing item {item.id} (priority {item.priority})\")\n        \n        # Simulate processing time based on priority (higher priority = faster processing)\n        processing_time = random.uniform(0.1, 1.0) / item.priority\n        await asyncio.sleep(processing_time)\n        \n        # Store processed item\n        processed_item = {\n            \"consumer_id\": consumer_id,\n            \"item\": item,\n            \"processed_at\": datetime.now(),\n            \"processing_time\": processing_time\n        }\n        self.processed_items.append(processed_item)\n        \n        print(f\"Consumer {consumer_id} completed item {item.id}\")\n    \n    async def run_system(self, num_producers: int = 2, num_consumers: int = 3, items_per_producer: int = 5):\n        \"\"\"Run the complete producer-consumer system.\"\"\"\n        print(\"=== Producer-Consumer System Starting ===\")\n        self.is_running = True\n        \n        # Create producer tasks\n        producer_tasks = [\n            asyncio.create_task(self.producer(i, items_per_producer))\n            for i in range(num_producers)\n        ]\n        \n        # Create consumer tasks\n        consumer_tasks = [\n            asyncio.create_task(self.consumer(i))\n            for i in range(num_consumers)\n        ]\n        \n        # Wait for all producers to finish\n        await asyncio.gather(*producer_tasks)\n        print(\"All producers finished\")\n        \n        # Wait for all items to be processed\n        await self.queue.join()\n        print(\"All items processed\")\n        \n        # Stop consumers\n        self.is_running = False\n        await asyncio.gather(*consumer_tasks, return_exceptions=True)\n        \n        print(\"=== Producer-Consumer System Completed ===\")\n        self.print_statistics()\n    \n    def print_statistics(self):\n        \"\"\"Print processing statistics.\"\"\"\n        if not self.processed_items:\n            print(\"No items were processed\")\n            return\n        \n        total_items = len(self.processed_items)\n        avg_processing_time = sum(item[\"processing_time\"] for item in self.processed_items) / total_items\n        \n        # Group by consumer\n        consumer_stats = {}\n        for item in self.processed_items:\n            consumer_id = item[\"consumer_id\"]\n            if consumer_id not in consumer_stats:\n                consumer_stats[consumer_id] = 0\n            consumer_stats[consumer_id] += 1\n        \n        print(f\"\\nProcessing Statistics:\")\n        print(f\"Total items processed: {total_items}\")\n        print(f\"Average processing time: {avg_processing_time:.3f}s\")\n        print(\"Items per consumer:\")\n        for consumer_id, count in consumer_stats.items():\n            print(f\"  Consumer {consumer_id}: {count} items\")\n\nasync def producer_consumer_demo():\n    \"\"\"Demonstrate the producer-consumer pattern.\"\"\"\n    system = AsyncProducerConsumer(max_queue_size=5)\n    await system.run_system(num_producers=2, num_consumers=3, items_per_producer=4)\n\nawait producer_consumer_demo()\n\n\n\n11.4.3 Example 3: Async Context Managers and Resource Management\n\nimport asyncio\nfrom typing import Optional, List, AsyncIterator\nfrom contextlib import asynccontextmanager\nimport aiofiles\nfrom datetime import datetime\n\nclass AsyncDatabaseConnection:\n    \"\"\"Simulated async database connection.\"\"\"\n    \n    def __init__(self, connection_string: str):\n        self.connection_string = connection_string\n        self.is_connected = False\n        self.transaction_active = False\n    \n    async def connect(self):\n        \"\"\"Establish database connection.\"\"\"\n        print(f\"Connecting to database: {self.connection_string}\")\n        await asyncio.sleep(0.1)  # Simulate connection time\n        self.is_connected = True\n        print(\"Database connected\")\n    \n    async def disconnect(self):\n        \"\"\"Close database connection.\"\"\"\n        if self.is_connected:\n            print(\"Disconnecting from database\")\n            await asyncio.sleep(0.05)  # Simulate disconnection time\n            self.is_connected = False\n            print(\"Database disconnected\")\n    \n    async def execute_query(self, query: str) -&gt; List[dict]:\n        \"\"\"Execute a database query.\"\"\"\n        if not self.is_connected:\n            raise RuntimeError(\"Database not connected\")\n        \n        print(f\"Executing query: {query}\")\n        await asyncio.sleep(0.2)  # Simulate query execution\n        \n        # Simulate query results\n        return [\n            {\"id\": 1, \"name\": \"Alice\", \"timestamp\": datetime.now().isoformat()},\n            {\"id\": 2, \"name\": \"Bob\", \"timestamp\": datetime.now().isoformat()}\n        ]\n    \n    async def begin_transaction(self):\n        \"\"\"Begin a database transaction.\"\"\"\n        if not self.is_connected:\n            raise RuntimeError(\"Database not connected\")\n        \n        print(\"Beginning transaction\")\n        self.transaction_active = True\n    \n    async def commit_transaction(self):\n        \"\"\"Commit the current transaction.\"\"\"\n        if self.transaction_active:\n            print(\"Committing transaction\")\n            await asyncio.sleep(0.1)\n            self.transaction_active = False\n    \n    async def rollback_transaction(self):\n        \"\"\"Rollback the current transaction.\"\"\"\n        if self.transaction_active:\n            print(\"Rolling back transaction\")\n            await asyncio.sleep(0.1)\n            self.transaction_active = False\n\n@asynccontextmanager\nasync def database_connection(connection_string: str) -&gt; AsyncIterator[AsyncDatabaseConnection]:\n    \"\"\"Async context manager for database connections.\"\"\"\n    db = AsyncDatabaseConnection(connection_string)\n    try:\n        await db.connect()\n        yield db\n    finally:\n        await db.disconnect()\n\n@asynccontextmanager\nasync def database_transaction(db: AsyncDatabaseConnection) -&gt; AsyncIterator[AsyncDatabaseConnection]:\n    \"\"\"Async context manager for database transactions.\"\"\"\n    await db.begin_transaction()\n    try:\n        yield db\n        await db.commit_transaction()\n    except Exception as e:\n        await db.rollback_transaction()\n        print(f\"Transaction rolled back due to error: {e}\")\n        raise\n\nclass AsyncFileProcessor:\n    \"\"\"Async file processor with resource management.\"\"\"\n    \n    def __init__(self, max_concurrent_files: int = 3):\n        self.semaphore = asyncio.Semaphore(max_concurrent_files)\n        self.processed_files = []\n    \n    async def process_file(self, file_path: str) -&gt; dict:\n        \"\"\"Process a single file asynchronously.\"\"\"\n        async with self.semaphore:  # Limit concurrent file operations\n            print(f\"Processing file: {file_path}\")\n            \n            try:\n                # Simulate file processing\n                await asyncio.sleep(0.5)\n                \n                # Simulate file content\n                content = f\"Processed content from {file_path}\"\n                word_count = len(content.split())\n                \n                result = {\n                    \"file_path\": file_path,\n                    \"word_count\": word_count,\n                    \"processed_at\": datetime.now().isoformat(),\n                    \"status\": \"success\"\n                }\n                \n                self.processed_files.append(result)\n                print(f\"Completed processing: {file_path}\")\n                return result\n                \n            except Exception as e:\n                error_result = {\n                    \"file_path\": file_path,\n                    \"error\": str(e),\n                    \"processed_at\": datetime.now().isoformat(),\n                    \"status\": \"error\"\n                }\n                self.processed_files.append(error_result)\n                print(f\"Error processing {file_path}: {e}\")\n                return error_result\n\nasync def resource_management_demo():\n    \"\"\"Demonstrate async resource management patterns.\"\"\"\n    print(\"=== Async Resource Management Demo ===\")\n    \n    # Database operations with context managers\n    async with database_connection(\"postgresql://localhost/mydb\") as db:\n        # Simple query\n        results = await db.execute_query(\"SELECT * FROM users\")\n        print(f\"Query results: {len(results)} rows\")\n        \n        # Transaction with automatic rollback on error\n        try:\n            async with database_transaction(db) as tx_db:\n                await tx_db.execute_query(\"INSERT INTO users (name) VALUES ('Charlie')\")\n                await tx_db.execute_query(\"UPDATE users SET name = 'Charles' WHERE name = 'Charlie'\")\n                # Transaction will be committed automatically\n        except Exception as e:\n            print(f\"Transaction failed: {e}\")\n    \n    # File processing with semaphore\n    print(\"\\n--- File Processing ---\")\n    processor = AsyncFileProcessor(max_concurrent_files=2)\n    \n    file_paths = [\n        \"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\", \"file5.txt\"\n    ]\n    \n    # Process files concurrently with resource limits\n    tasks = [processor.process_file(path) for path in file_paths]\n    results = await asyncio.gather(*tasks, return_exceptions=True)\n    \n    print(f\"\\nProcessed {len(processor.processed_files)} files\")\n    successful = sum(1 for r in processor.processed_files if r[\"status\"] == \"success\")\n    print(f\"Successful: {successful}, Errors: {len(processor.processed_files) - successful}\")\n\nawait resource_management_demo()",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Async Programming and Concurrency</span>"
    ]
  },
  {
    "objectID": "book/10-async.html#error-handling-in-async-code",
    "href": "book/10-async.html#error-handling-in-async-code",
    "title": "11  Async Programming and Concurrency",
    "section": "11.5 Error Handling in Async Code",
    "text": "11.5 Error Handling in Async Code\n\n11.5.1 Exception Handling Best Practices\n\nimport asyncio\nfrom typing import List, Union, Tuple\n\nasync def risky_operation(operation_id: int, fail_probability: float = 0.3) -&gt; str:\n    \"\"\"Simulate an operation that might fail.\"\"\"\n    await asyncio.sleep(0.5)\n    \n    if random.random() &lt; fail_probability:\n        raise ValueError(f\"Operation {operation_id} failed randomly\")\n    \n    return f\"Operation {operation_id} succeeded\"\n\nasync def safe_operation(operation_id: int) -&gt; Tuple[bool, Union[str, Exception]]:\n    \"\"\"Wrapper that handles exceptions gracefully.\"\"\"\n    try:\n        result = await risky_operation(operation_id)\n        return True, result\n    except Exception as e:\n        return False, e\n\nasync def error_handling_demo():\n    \"\"\"Demonstrate error handling in async operations.\"\"\"\n    print(\"=== Async Error Handling Demo ===\")\n    \n    # Method 1: Handle exceptions individually\n    print(\"1. Individual error handling:\")\n    for i in range(3):\n        success, result = await safe_operation(i)\n        if success:\n            print(f\"  ✅ {result}\")\n        else:\n            print(f\"  ❌ {result}\")\n    \n    # Method 2: Gather with return_exceptions=True\n    print(\"\\n2. Batch operations with exception collection:\")\n    tasks = [risky_operation(i) for i in range(5)]\n    results = await asyncio.gather(*tasks, return_exceptions=True)\n    \n    for i, result in enumerate(results):\n        if isinstance(result, Exception):\n            print(f\"  ❌ Operation {i}: {result}\")\n        else:\n            print(f\"  ✅ Operation {i}: {result}\")\n    \n    # Method 3: Timeout handling\n    print(\"\\n3. Timeout handling:\")\n    try:\n        result = await asyncio.wait_for(risky_operation(99), timeout=0.1)\n        print(f\"  ✅ Fast operation: {result}\")\n    except asyncio.TimeoutError:\n        print(f\"  ⏰ Operation timed out\")\n    except Exception as e:\n        print(f\"  ❌ Operation failed: {e}\")\n\nawait error_handling_demo()",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Async Programming and Concurrency</span>"
    ]
  },
  {
    "objectID": "book/10-async.html#performance-and-best-practices",
    "href": "book/10-async.html#performance-and-best-practices",
    "title": "11  Async Programming and Concurrency",
    "section": "11.6 Performance and Best Practices",
    "text": "11.6 Performance and Best Practices\n\n11.6.1 Async Performance Tips\n\nimport asyncio\nimport time\nfrom typing import List, Callable, Any\n\nasync def cpu_bound_task(n: int) -&gt; int:\n    \"\"\"Simulate CPU-bound work (not ideal for async).\"\"\"\n    total = 0\n    for i in range(n):\n        total += i\n    return total\n\nasync def io_bound_task(duration: float) -&gt; str:\n    \"\"\"Simulate I/O-bound work (perfect for async).\"\"\"\n    await asyncio.sleep(duration)\n    return f\"I/O task completed in {duration}s\"\n\nasync def performance_comparison():\n    \"\"\"Compare different async patterns for performance.\"\"\"\n    print(\"=== Async Performance Comparison ===\")\n    \n    # Test 1: I/O-bound operations (async shines here)\n    print(\"1. I/O-bound operations:\")\n    \n    start_time = time.time()\n    # Sequential execution\n    for i in range(3):\n        await io_bound_task(0.5)\n    sequential_time = time.time() - start_time\n    print(f\"  Sequential: {sequential_time:.2f}s\")\n    \n    start_time = time.time()\n    # Concurrent execution\n    await asyncio.gather(*[io_bound_task(0.5) for _ in range(3)])\n    concurrent_time = time.time() - start_time\n    print(f\"  Concurrent: {concurrent_time:.2f}s\")\n    print(f\"  Speedup: {sequential_time / concurrent_time:.1f}x\")\n    \n    # Test 2: Mixed workload\n    print(\"\\n2. Mixed I/O and CPU workload:\")\n    \n    async def mixed_task(task_id: int):\n        # I/O operation\n        await io_bound_task(0.2)\n        # CPU operation\n        result = await asyncio.to_thread(cpu_bound_task, 100000)\n        return f\"Task {task_id}: {result}\"\n    \n    start_time = time.time()\n    results = await asyncio.gather(*[mixed_task(i) for i in range(3)])\n    mixed_time = time.time() - start_time\n    print(f\"  Mixed workload: {mixed_time:.2f}s\")\n    print(f\"  Results: {len(results)} tasks completed\")\n\nawait performance_comparison()\n\n# Best practices summary\nasync def best_practices_demo():\n    \"\"\"Demonstrate async programming best practices.\"\"\"\n    print(\"\\n=== Async Best Practices ===\")\n    \n    # ✅ Good: Use async for I/O-bound operations\n    async def good_io_operation():\n        async with aiohttp.ClientSession() as session:\n            async with session.get('https://api.example.com') as response:\n                return await response.text()\n    \n    # ❌ Bad: Using async for CPU-bound operations without threads\n    async def bad_cpu_operation():\n        return sum(range(1000000))  # Blocks event loop\n    \n    # ✅ Good: Use asyncio.to_thread for CPU-bound work\n    async def good_cpu_operation():\n        return await asyncio.to_thread(sum, range(1000000))\n    \n    # ✅ Good: Proper resource management\n    async def good_resource_management():\n        async with database_connection(\"db://localhost\") as db:\n            return await db.execute_query(\"SELECT 1\")\n    \n    # ✅ Good: Batch operations with gather\n    async def good_batch_operations():\n        tasks = [io_bound_task(0.1) for _ in range(10)]\n        return await asyncio.gather(*tasks, return_exceptions=True)\n    \n    print(\"Best practices demonstrated in code above:\")\n    print(\"  ✅ Use async for I/O-bound operations\")\n    print(\"  ✅ Use asyncio.to_thread for CPU-bound work\")\n    print(\"  ✅ Use async context managers for resources\")\n    print(\"  ✅ Batch operations with gather()\")\n    print(\"  ✅ Handle exceptions appropriately\")\n    print(\"  ✅ Use semaphores to limit concurrency\")\n\nawait best_practices_demo()",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Async Programming and Concurrency</span>"
    ]
  },
  {
    "objectID": "book/10-async.html#self-review-questions",
    "href": "book/10-async.html#self-review-questions",
    "title": "11  Async Programming and Concurrency",
    "section": "11.7 Self-Review Questions",
    "text": "11.7 Self-Review Questions\n\n11.7.1 Knowledge Check\n\nWhat’s the difference between await and regular function calls?\nWhen should you use async programming vs threading?\nWhat’s the purpose of asyncio.gather() vs asyncio.wait()?\nHow do you handle exceptions in concurrent async operations?\nWhat are the performance implications of mixing CPU and I/O bound tasks?\n\n\n\n11.7.2 Coding Challenges\n\nBuild an async web crawler with rate limiting\nCreate an async chat server using websockets\nImplement async file processing with progress tracking\nDesign an async task queue with priority handling\n\n\n\n11.7.3 Answers\n\nawait pauses execution until async operation completes; regular calls block\nAsync for I/O-bound; threading for CPU-bound or mixed workloads\ngather() runs all tasks; wait() allows partial completion handling\nUse return_exceptions=True in gather() or try/except around individual tasks\nCPU tasks block event loop; use asyncio.to_thread() for CPU work",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Async Programming and Concurrency</span>"
    ]
  },
  {
    "objectID": "book/10-async.html#common-pitfalls",
    "href": "book/10-async.html#common-pitfalls",
    "title": "11  Async Programming and Concurrency",
    "section": "11.8 Common Pitfalls",
    "text": "11.8 Common Pitfalls\n\nUsing async for CPU-bound operations - blocks the event loop\nForgetting to await - returns coroutine object instead of result\nNot handling exceptions in concurrent operations\nResource leaks - not properly closing connections/files\nMixing sync and async code incorrectly",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Async Programming and Concurrency</span>"
    ]
  },
  {
    "objectID": "book/10-async.html#next-steps",
    "href": "book/10-async.html#next-steps",
    "title": "11  Async Programming and Concurrency",
    "section": "11.9 Next Steps",
    "text": "11.9 Next Steps\nExcellent! You now understand asynchronous programming in Python. Next, we’ll explore Multiprocessing for true parallelism and CPU-bound task optimization.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Async Programming and Concurrency</span>"
    ]
  },
  {
    "objectID": "book/10-async.html#resources",
    "href": "book/10-async.html#resources",
    "title": "11  Async Programming and Concurrency",
    "section": "11.10 Resources",
    "text": "11.10 Resources\n\nPython Asyncio Documentation\nReal Python: Async IO\naiohttp Documentation\nAsyncIO Cheat Sheet",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Async Programming and Concurrency</span>"
    ]
  },
  {
    "objectID": "book/11-multiprocessing.html",
    "href": "book/11-multiprocessing.html",
    "title": "12  Multiprocessing and Parallel Computing",
    "section": "",
    "text": "12.1 Understanding Parallelism vs Concurrency\nMultiprocessing allows you to leverage multiple CPU cores for true parallelism, making it perfect for CPU-intensive tasks that can benefit from parallel execution.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiprocessing and Parallel Computing</span>"
    ]
  },
  {
    "objectID": "book/11-multiprocessing.html#understanding-parallelism-vs-concurrency",
    "href": "book/11-multiprocessing.html#understanding-parallelism-vs-concurrency",
    "title": "12  Multiprocessing and Parallel Computing",
    "section": "",
    "text": "12.1.1 The Difference\n\nimport time\nimport multiprocessing as mp\nimport threading\nfrom concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor\nfrom typing import List\n\ndef cpu_intensive_task(n: int) -&gt; int:\n    \"\"\"Simulate CPU-intensive work.\"\"\"\n    total = 0\n    for i in range(n * 1000000):\n        total += i % 1000\n    return total\n\ndef io_intensive_task(duration: float) -&gt; str:\n    \"\"\"Simulate I/O-intensive work.\"\"\"\n    time.sleep(duration)\n    return f\"I/O task completed in {duration}s\"\n\ndef compare_approaches():\n    \"\"\"Compare sequential, threading, and multiprocessing approaches.\"\"\"\n    print(\"=== Parallelism vs Concurrency Comparison ===\")\n    \n    # Test data\n    cpu_tasks = [5, 5, 5, 5]  # 4 CPU-intensive tasks\n    io_tasks = [1, 1, 1, 1]   # 4 I/O-intensive tasks\n    \n    # Sequential execution\n    print(\"1. Sequential Execution:\")\n    start_time = time.time()\n    cpu_results = [cpu_intensive_task(n) for n in cpu_tasks]\n    sequential_time = time.time() - start_time\n    print(f\"   CPU tasks sequential: {sequential_time:.2f}s\")\n    \n    start_time = time.time()\n    io_results = [io_intensive_task(d) for d in io_tasks]\n    sequential_io_time = time.time() - start_time\n    print(f\"   I/O tasks sequential: {sequential_io_time:.2f}s\")\n    \n    # Threading (good for I/O, limited for CPU due to GIL)\n    print(\"\\n2. Threading:\")\n    start_time = time.time()\n    with ThreadPoolExecutor(max_workers=4) as executor:\n        threaded_cpu_results = list(executor.map(cpu_intensive_task, cpu_tasks))\n    threaded_cpu_time = time.time() - start_time\n    print(f\"   CPU tasks threaded: {threaded_cpu_time:.2f}s (GIL limited)\")\n    \n    start_time = time.time()\n    with ThreadPoolExecutor(max_workers=4) as executor:\n        threaded_io_results = list(executor.map(io_intensive_task, io_tasks))\n    threaded_io_time = time.time() - start_time\n    print(f\"   I/O tasks threaded: {threaded_io_time:.2f}s\")\n    \n    # Multiprocessing (true parallelism for CPU tasks)\n    print(\"\\n3. Multiprocessing:\")\n    start_time = time.time()\n    with ProcessPoolExecutor(max_workers=4) as executor:\n        parallel_cpu_results = list(executor.map(cpu_intensive_task, cpu_tasks))\n    parallel_cpu_time = time.time() - start_time\n    print(f\"   CPU tasks parallel: {parallel_cpu_time:.2f}s\")\n    \n    start_time = time.time()\n    with ProcessPoolExecutor(max_workers=4) as executor:\n        parallel_io_results = list(executor.map(io_intensive_task, io_tasks))\n    parallel_io_time = time.time() - start_time\n    print(f\"   I/O tasks parallel: {parallel_io_time:.2f}s\")\n    \n    # Summary\n    print(f\"\\n=== Performance Summary ===\")\n    print(f\"CPU-intensive tasks:\")\n    print(f\"  Sequential: {sequential_time:.2f}s\")\n    print(f\"  Threading: {threaded_cpu_time:.2f}s (speedup: {sequential_time/threaded_cpu_time:.1f}x)\")\n    print(f\"  Multiprocessing: {parallel_cpu_time:.2f}s (speedup: {sequential_time/parallel_cpu_time:.1f}x)\")\n    \n    print(f\"\\nI/O-intensive tasks:\")\n    print(f\"  Sequential: {sequential_io_time:.2f}s\")\n    print(f\"  Threading: {threaded_io_time:.2f}s (speedup: {sequential_io_time/threaded_io_time:.1f}x)\")\n    print(f\"  Multiprocessing: {parallel_io_time:.2f}s (speedup: {sequential_io_time/parallel_io_time:.1f}x)\")\n\n# Note: This would run in a script, not in an interactive environment\nif __name__ == \"__main__\":\n    compare_approaches()\nelse:\n    print(\"Multiprocessing comparison code ready (run in script for full demo)\")",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiprocessing and Parallel Computing</span>"
    ]
  },
  {
    "objectID": "book/11-multiprocessing.html#basic-multiprocessing",
    "href": "book/11-multiprocessing.html#basic-multiprocessing",
    "title": "12  Multiprocessing and Parallel Computing",
    "section": "12.2 Basic Multiprocessing",
    "text": "12.2 Basic Multiprocessing\n\n12.2.1 Process Creation and Management\n\nimport multiprocessing as mp\nimport os\nimport time\nfrom typing import List, Tuple\n\ndef worker_function(worker_id: int, shared_data: List[int]) -&gt; Tuple[int, int, List[int]]:\n    \"\"\"Worker function that processes data.\"\"\"\n    process_id = os.getpid()\n    print(f\"Worker {worker_id} (PID: {process_id}) starting...\")\n    \n    # Simulate some work\n    result = []\n    for item in shared_data:\n        # CPU-intensive calculation\n        processed = sum(range(item * 100000))\n        result.append(processed)\n        time.sleep(0.1)  # Simulate additional work\n    \n    print(f\"Worker {worker_id} (PID: {process_id}) completed\")\n    return worker_id, process_id, result\n\ndef basic_multiprocessing_demo():\n    \"\"\"Demonstrate basic multiprocessing concepts.\"\"\"\n    print(\"=== Basic Multiprocessing Demo ===\")\n    print(f\"Main process PID: {os.getpid()}\")\n    print(f\"CPU count: {mp.cpu_count()}\")\n    \n    # Create processes manually\n    processes = []\n    results = []\n    \n    # Data for workers\n    work_data = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    \n    # Create and start processes\n    for i, data in enumerate(work_data):\n        process = mp.Process(\n            target=worker_function,\n            args=(i, data)\n        )\n        processes.append(process)\n        process.start()\n        print(f\"Started process {i}\")\n    \n    # Wait for all processes to complete\n    for i, process in enumerate(processes):\n        process.join()\n        print(f\"Process {i} finished\")\n    \n    print(\"All processes completed\")\n\ndef square_number(n: int) -&gt; int:\n    \"\"\"Square a number with some CPU work.\"\"\"\n    result = n * n\n    # Simulate CPU-intensive computation\n    for _ in range(n * 100000):\n        pass\n    return result\n\n# Demonstrate process pools\ndef process_pool_demo():\n    \"\"\"Demonstrate process pools for easier management.\"\"\"\n    print(\"\\n=== Process Pool Demo ===\")\n    \n    numbers = list(range(1, 9))  # Numbers to square\n    \n    # Sequential processing\n    start_time = time.time()\n    sequential_results = [square_number(n) for n in numbers]\n    sequential_time = time.time() - start_time\n    \n    # Note: Parallel processing with pool would work in a standalone script\n    # but not in Jupyter due to pickling limitations\n    print(f\"Sequential results: {sequential_results}\")\n    print(f\"Sequential time: {sequential_time:.2f}s\")\n    print(\"Parallel processing would provide speedup in a standalone script\")\n\nif __name__ == \"__main__\":\n    basic_multiprocessing_demo()\n    process_pool_demo()\nelse:\n    print(\"Process demos ready (run in script for full execution)\")",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiprocessing and Parallel Computing</span>"
    ]
  },
  {
    "objectID": "book/11-multiprocessing.html#inter-process-communication",
    "href": "book/11-multiprocessing.html#inter-process-communication",
    "title": "12  Multiprocessing and Parallel Computing",
    "section": "12.3 Inter-Process Communication",
    "text": "12.3 Inter-Process Communication\n\n12.3.1 Shared Memory and Synchronization\n\nimport multiprocessing as mp\nimport time\nimport random\nfrom typing import List\n\ndef shared_memory_demo():\n    \"\"\"Demonstrate shared memory between processes.\"\"\"\n    print(\"=== Shared Memory Demo ===\")\n    \n    def worker_with_shared_array(worker_id: int, shared_array, lock, start_index: int, count: int):\n        \"\"\"Worker that modifies shared array safely.\"\"\"\n        print(f\"Worker {worker_id} starting...\")\n        \n        for i in range(count):\n            with lock:  # Acquire lock for thread-safe access\n                index = start_index + i\n                if index &lt; len(shared_array):\n                    old_value = shared_array[index]\n                    # Simulate some computation\n                    time.sleep(0.01)\n                    shared_array[index] = old_value + worker_id * 10\n                    print(f\"Worker {worker_id}: updated index {index} from {old_value} to {shared_array[index]}\")\n        \n        print(f\"Worker {worker_id} completed\")\n    \n    # Create shared array\n    shared_array = mp.Array('i', [i for i in range(20)])  # 'i' for integers\n    lock = mp.Lock()\n    \n    print(f\"Initial array: {list(shared_array[:10])}...\")\n    \n    # Create processes that modify shared array\n    processes = []\n    for worker_id in range(4):\n        p = mp.Process(\n            target=worker_with_shared_array,\n            args=(worker_id, shared_array, lock, worker_id * 5, 5)\n        )\n        processes.append(p)\n        p.start()\n    \n    # Wait for completion\n    for p in processes:\n        p.join()\n    \n    print(f\"Final array: {list(shared_array[:10])}...\")\n\ndef queue_communication_demo():\n    \"\"\"Demonstrate queue-based communication.\"\"\"\n    print(\"\\n=== Queue Communication Demo ===\")\n    \n    def producer(queue: mp.Queue, producer_id: int, num_items: int):\n        \"\"\"Produce items and put them in queue.\"\"\"\n        print(f\"Producer {producer_id} starting...\")\n        \n        for i in range(num_items):\n            item = f\"Item-{producer_id}-{i}\"\n            queue.put(item)\n            print(f\"Producer {producer_id} produced: {item}\")\n            time.sleep(random.uniform(0.1, 0.3))\n        \n        print(f\"Producer {producer_id} finished\")\n    \n    def consumer(queue: mp.Queue, consumer_id: int, timeout: int = 5):\n        \"\"\"Consume items from queue.\"\"\"\n        print(f\"Consumer {consumer_id} starting...\")\n        processed_items = []\n        \n        while True:\n            try:\n                item = queue.get(timeout=timeout)\n                if item is None:  # Poison pill\n                    break\n                \n                # Process item\n                print(f\"Consumer {consumer_id} processing: {item}\")\n                time.sleep(0.2)  # Simulate processing\n                processed_items.append(item)\n                \n            except:  # Timeout\n                print(f\"Consumer {consumer_id} timeout, stopping\")\n                break\n        \n        print(f\"Consumer {consumer_id} processed {len(processed_items)} items\")\n        return processed_items\n    \n    # Create queue\n    queue = mp.Queue(maxsize=10)\n    \n    # Create producers and consumers\n    producers = []\n    consumers = []\n    \n    # Start producers\n    for i in range(2):\n        p = mp.Process(target=producer, args=(queue, i, 3))\n        producers.append(p)\n        p.start()\n    \n    # Start consumers\n    for i in range(2):\n        p = mp.Process(target=consumer, args=(queue, i, 2))\n        consumers.append(p)\n        p.start()\n    \n    # Wait for producers to finish\n    for p in producers:\n        p.join()\n    \n    # Send poison pills to stop consumers\n    for _ in consumers:\n        queue.put(None)\n    \n    # Wait for consumers to finish\n    for p in consumers:\n        p.join()\n    \n    print(\"Queue communication demo completed\")\n\nif __name__ == \"__main__\":\n    shared_memory_demo()\n    queue_communication_demo()\nelse:\n    print(\"IPC demos ready (run in script for full execution)\")",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiprocessing and Parallel Computing</span>"
    ]
  },
  {
    "objectID": "book/11-multiprocessing.html#advanced-multiprocessing-patterns",
    "href": "book/11-multiprocessing.html#advanced-multiprocessing-patterns",
    "title": "12  Multiprocessing and Parallel Computing",
    "section": "12.4 Advanced Multiprocessing Patterns",
    "text": "12.4 Advanced Multiprocessing Patterns\n\n12.4.1 Map-Reduce Pattern\n\nimport multiprocessing as mp\nfrom concurrent.futures import ProcessPoolExecutor\nfrom typing import List, Dict, Callable, Any\nimport time\nimport functools\n\n# Map-Reduce helper functions (defined at module level to avoid pickling issues)\ndef word_count_mapper(text_chunk: str) -&gt; Dict[str, int]:\n    \"\"\"Map function for word counting.\"\"\"\n    words = text_chunk.lower().split()\n    word_count = {}\n    for word in words:\n        # Remove punctuation\n        clean_word = ''.join(c for c in word if c.isalnum())\n        if clean_word:\n            word_count[clean_word] = word_count.get(clean_word, 0) + 1\n    return word_count\n\ndef word_count_reducer(count1: Dict[str, int], count2: Dict[str, int]) -&gt; Dict[str, int]:\n    \"\"\"Reduce function for word counting.\"\"\"\n    result = count1.copy()\n    for word, count in count2.items():\n        result[word] = result.get(word, 0) + count\n    return result\n\ndef square_mapper(number: int) -&gt; int:\n    \"\"\"Map function: square a number.\"\"\"\n    return number * number\n\ndef sum_reducer(a: int, b: int) -&gt; int:\n    \"\"\"Reduce function: sum two numbers.\"\"\"\n    return a + b\n\ndef map_reduce_framework():\n    \"\"\"Implement a simple map-reduce framework.\"\"\"\n    print(\"=== Map-Reduce Framework Demo ===\")\n    \n    class MapReduceJob:\n        \"\"\"Simple map-reduce job framework.\"\"\"\n        \n        def __init__(self, num_workers: int = None):\n            self.num_workers = num_workers or mp.cpu_count()\n        \n        def run(self, data: List[Any], map_func: Callable, reduce_func: Callable) -&gt; Any:\n            \"\"\"Run map-reduce job on data.\"\"\"\n            print(f\"Running map-reduce with {self.num_workers} workers\")\n            print(f\"Input data size: {len(data)}\")\n            \n            # Map phase - parallel processing\n            start_time = time.time()\n            with ProcessPoolExecutor(max_workers=self.num_workers) as executor:\n                mapped_results = list(executor.map(map_func, data))\n            map_time = time.time() - start_time\n            \n            print(f\"Map phase completed in {map_time:.2f}s\")\n            print(f\"Mapped results: {len(mapped_results)} items\")\n            \n            # Reduce phase - combine results\n            start_time = time.time()\n            final_result = functools.reduce(reduce_func, mapped_results)\n            reduce_time = time.time() - start_time\n            \n            print(f\"Reduce phase completed in {reduce_time:.2f}s\")\n            print(f\"Total time: {map_time + reduce_time:.2f}s\")\n            \n            return final_result\n    \n    # Example 1: Word count\n    # Test data\n    text_chunks = [\n        \"Hello world hello python programming\",\n        \"Python is great for data processing\",\n        \"Multiprocessing enables parallel computing\",\n        \"Hello world of parallel python programming\"\n    ]\n    \n    # Run word count job\n    job = MapReduceJob(num_workers=4)\n    word_counts = job.run(text_chunks, word_count_mapper, word_count_reducer)\n    \n    print(f\"\\nWord count results:\")\n    for word, count in sorted(word_counts.items()):\n        print(f\"  {word}: {count}\")\n    \n    # Example 2: Sum of squares\n    numbers = list(range(1, 101))  # 1 to 100\n    sum_of_squares = job.run(numbers, square_mapper, sum_reducer)\n    \n    print(f\"\\nSum of squares (1-100): {sum_of_squares}\")\n    print(f\"Expected: {sum(i*i for i in range(1, 101))}\")\n\nif __name__ == \"__main__\":\n    map_reduce_framework()\nelse:\n    print(\"Map-reduce framework ready (run in script for execution)\")",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiprocessing and Parallel Computing</span>"
    ]
  },
  {
    "objectID": "book/11-multiprocessing.html#real-world-examples",
    "href": "book/11-multiprocessing.html#real-world-examples",
    "title": "12  Multiprocessing and Parallel Computing",
    "section": "12.5 Real-World Examples",
    "text": "12.5 Real-World Examples\n\n12.5.1 Example 1: Parallel Image Processing\n\nimport multiprocessing as mp\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\nimport time\nfrom typing import List, Tuple\nfrom dataclasses import dataclass\nimport os\n\n@dataclass\nclass ImageProcessingResult:\n    \"\"\"Result from processing a single image.\"\"\"\n    filename: str\n    original_size: Tuple[int, int]\n    processed_size: Tuple[int, int]\n    processing_time: float\n    operations_applied: List[str]\n\ndef simulate_image_processing(image_data: Tuple[str, Tuple[int, int], List[str]]) -&gt; ImageProcessingResult:\n    \"\"\"Simulate image processing operations.\"\"\"\n    filename, size, operations = image_data\n    start_time = time.time()\n    \n    print(f\"Processing {filename} (PID: {os.getpid()})\")\n    \n    # Simulate processing operations\n    current_size = size\n    applied_operations = []\n    \n    for operation in operations:\n        if operation == \"resize\":\n            # Simulate resize operation\n            time.sleep(0.5)  # CPU-intensive work\n            current_size = (current_size[0] // 2, current_size[1] // 2)\n            applied_operations.append(\"resize\")\n            \n        elif operation == \"blur\":\n            # Simulate blur operation\n            time.sleep(0.3)\n            applied_operations.append(\"blur\")\n            \n        elif operation == \"sharpen\":\n            # Simulate sharpen operation\n            time.sleep(0.4)\n            applied_operations.append(\"sharpen\")\n            \n        elif operation == \"color_adjust\":\n            # Simulate color adjustment\n            time.sleep(0.2)\n            applied_operations.append(\"color_adjust\")\n    \n    processing_time = time.time() - start_time\n    \n    result = ImageProcessingResult(\n        filename=filename,\n        original_size=size,\n        processed_size=current_size,\n        processing_time=processing_time,\n        operations_applied=applied_operations\n    )\n    \n    print(f\"Completed {filename} in {processing_time:.2f}s\")\n    return result\n\nclass ParallelImageProcessor:\n    \"\"\"Parallel image processing system.\"\"\"\n    \n    def __init__(self, max_workers: int = None):\n        self.max_workers = max_workers or mp.cpu_count()\n    \n    def process_images_batch(self, image_tasks: List[Tuple[str, Tuple[int, int], List[str]]]) -&gt; List[ImageProcessingResult]:\n        \"\"\"Process multiple images in parallel.\"\"\"\n        print(f\"Processing {len(image_tasks)} images with {self.max_workers} workers\")\n        \n        start_time = time.time()\n        results = []\n        \n        with ProcessPoolExecutor(max_workers=self.max_workers) as executor:\n            # Submit all tasks\n            future_to_task = {\n                executor.submit(simulate_image_processing, task): task \n                for task in image_tasks\n            }\n            \n            # Collect results as they complete\n            for future in as_completed(future_to_task):\n                task = future_to_task[future]\n                try:\n                    result = future.result()\n                    results.append(result)\n                except Exception as e:\n                    print(f\"Error processing {task[0]}: {e}\")\n        \n        total_time = time.time() - start_time\n        print(f\"Batch processing completed in {total_time:.2f}s\")\n        \n        return results\n    \n    def generate_processing_report(self, results: List[ImageProcessingResult]):\n        \"\"\"Generate a processing report.\"\"\"\n        if not results:\n            print(\"No results to report\")\n            return\n        \n        total_processing_time = sum(r.processing_time for r in results)\n        avg_processing_time = total_processing_time / len(results)\n        \n        print(f\"\\n=== Image Processing Report ===\")\n        print(f\"Images processed: {len(results)}\")\n        print(f\"Total processing time: {total_processing_time:.2f}s\")\n        print(f\"Average time per image: {avg_processing_time:.2f}s\")\n        \n        # Operations summary\n        all_operations = []\n        for result in results:\n            all_operations.extend(result.operations_applied)\n        \n        operation_counts = {}\n        for op in all_operations:\n            operation_counts[op] = operation_counts.get(op, 0) + 1\n        \n        print(f\"Operations performed:\")\n        for op, count in operation_counts.items():\n            print(f\"  {op}: {count} times\")\n        \n        # Individual results\n        print(f\"\\nIndividual results:\")\n        for result in sorted(results, key=lambda x: x.processing_time, reverse=True):\n            print(f\"  {result.filename}: {result.processing_time:.2f}s \"\n                  f\"({result.original_size} → {result.processed_size})\")\n\ndef image_processing_demo():\n    \"\"\"Demonstrate parallel image processing.\"\"\"\n    print(\"=== Parallel Image Processing Demo ===\")\n    \n    # Simulate image processing tasks\n    image_tasks = [\n        (\"photo_001.jpg\", (4000, 3000), [\"resize\", \"blur\", \"color_adjust\"]),\n        (\"photo_002.jpg\", (3840, 2160), [\"resize\", \"sharpen\"]),\n        (\"photo_003.jpg\", (5000, 3500), [\"blur\", \"color_adjust\"]),\n        (\"photo_004.jpg\", (2048, 1536), [\"resize\", \"sharpen\", \"color_adjust\"]),\n        (\"photo_005.jpg\", (6000, 4000), [\"resize\", \"blur\"]),\n        (\"photo_006.jpg\", (1920, 1080), [\"sharpen\", \"color_adjust\"]),\n    ]\n    \n    processor = ParallelImageProcessor(max_workers=4)\n    results = processor.process_images_batch(image_tasks)\n    processor.generate_processing_report(results)\n\nif __name__ == \"__main__\":\n    image_processing_demo()\nelse:\n    print(\"Image processing demo ready (run in script for execution)\")\n\n\n\n12.5.2 Example 2: Parallel Data Analysis\n\nimport multiprocessing as mp\nfrom concurrent.futures import ProcessPoolExecutor\nimport time\nimport random\nimport statistics\nfrom typing import List, Dict, Any, Tuple\nfrom dataclasses import dataclass\n\n@dataclass\nclass DataChunk:\n    \"\"\"Represents a chunk of data to be processed.\"\"\"\n    chunk_id: int\n    data: List[float]\n    metadata: Dict[str, Any]\n\n@dataclass\nclass AnalysisResult:\n    \"\"\"Result from analyzing a data chunk.\"\"\"\n    chunk_id: int\n    count: int\n    mean: float\n    median: float\n    std_dev: float\n    min_value: float\n    max_value: float\n    outliers: List[float]\n    processing_time: float\n\ndef analyze_data_chunk(chunk: DataChunk) -&gt; AnalysisResult:\n    \"\"\"Analyze a single chunk of data.\"\"\"\n    start_time = time.time()\n    \n    print(f\"Analyzing chunk {chunk.chunk_id} with {len(chunk.data)} data points (PID: {os.getpid()})\")\n    \n    # Simulate CPU-intensive analysis\n    data = chunk.data\n    \n    # Basic statistics\n    count = len(data)\n    mean = statistics.mean(data)\n    median = statistics.median(data)\n    std_dev = statistics.stdev(data) if count &gt; 1 else 0.0\n    min_value = min(data)\n    max_value = max(data)\n    \n    # Find outliers (values &gt; 2 standard deviations from mean)\n    outliers = []\n    if std_dev &gt; 0:\n        for value in data:\n            if abs(value - mean) &gt; 2 * std_dev:\n                outliers.append(value)\n    \n    # Simulate more complex analysis\n    time.sleep(0.1)  # Additional processing time\n    \n    processing_time = time.time() - start_time\n    \n    result = AnalysisResult(\n        chunk_id=chunk.chunk_id,\n        count=count,\n        mean=mean,\n        median=median,\n        std_dev=std_dev,\n        min_value=min_value,\n        max_value=max_value,\n        outliers=outliers,\n        processing_time=processing_time\n    )\n    \n    print(f\"Completed chunk {chunk.chunk_id} analysis in {processing_time:.3f}s\")\n    return result\n\nclass ParallelDataAnalyzer:\n    \"\"\"Parallel data analysis system.\"\"\"\n    \n    def __init__(self, max_workers: int = None, chunk_size: int = 1000):\n        self.max_workers = max_workers or mp.cpu_count()\n        self.chunk_size = chunk_size\n    \n    def create_data_chunks(self, data: List[float]) -&gt; List[DataChunk]:\n        \"\"\"Split large dataset into chunks for parallel processing.\"\"\"\n        chunks = []\n        for i in range(0, len(data), self.chunk_size):\n            chunk_data = data[i:i + self.chunk_size]\n            chunk = DataChunk(\n                chunk_id=len(chunks),\n                data=chunk_data,\n                metadata={\"start_index\": i, \"end_index\": i + len(chunk_data)}\n            )\n            chunks.append(chunk)\n        \n        print(f\"Created {len(chunks)} chunks of size ~{self.chunk_size}\")\n        return chunks\n    \n    def analyze_parallel(self, data: List[float]) -&gt; List[AnalysisResult]:\n        \"\"\"Analyze large dataset in parallel.\"\"\"\n        print(f\"Starting parallel analysis of {len(data)} data points\")\n        \n        # Split data into chunks\n        chunks = self.create_data_chunks(data)\n        \n        # Process chunks in parallel\n        start_time = time.time()\n        results = []\n        \n        with ProcessPoolExecutor(max_workers=self.max_workers) as executor:\n            chunk_results = list(executor.map(analyze_data_chunk, chunks))\n            results.extend(chunk_results)\n        \n        total_time = time.time() - start_time\n        print(f\"Parallel analysis completed in {total_time:.2f}s\")\n        \n        return results\n    \n    def aggregate_results(self, results: List[AnalysisResult]) -&gt; Dict[str, Any]:\n        \"\"\"Aggregate results from all chunks.\"\"\"\n        if not results:\n            return {}\n        \n        total_count = sum(r.count for r in results)\n        all_means = [r.mean for r in results]\n        all_outliers = []\n        for r in results:\n            all_outliers.extend(r.outliers)\n        \n        # Weighted average of means (weighted by chunk size)\n        weighted_mean = sum(r.mean * r.count for r in results) / total_count\n        \n        # Overall statistics\n        aggregated = {\n            \"total_data_points\": total_count,\n            \"num_chunks\": len(results),\n            \"overall_mean\": weighted_mean,\n            \"mean_of_means\": statistics.mean(all_means),\n            \"chunk_mean_std\": statistics.stdev(all_means) if len(all_means) &gt; 1 else 0,\n            \"total_outliers\": len(all_outliers),\n            \"outlier_percentage\": (len(all_outliers) / total_count) * 100,\n            \"total_processing_time\": sum(r.processing_time for r in results),\n            \"avg_chunk_processing_time\": statistics.mean([r.processing_time for r in results]),\n            \"min_value_overall\": min(r.min_value for r in results),\n            \"max_value_overall\": max(r.max_value for r in results)\n        }\n        \n        return aggregated\n    \n    def generate_report(self, results: List[AnalysisResult], aggregated: Dict[str, Any]):\n        \"\"\"Generate analysis report.\"\"\"\n        print(f\"\\n=== Data Analysis Report ===\")\n        print(f\"Total data points: {aggregated['total_data_points']:,}\")\n        print(f\"Number of chunks: {aggregated['num_chunks']}\")\n        print(f\"Overall mean: {aggregated['overall_mean']:.4f}\")\n        print(f\"Value range: {aggregated['min_value_overall']:.4f} to {aggregated['max_value_overall']:.4f}\")\n        print(f\"Total outliers: {aggregated['total_outliers']} ({aggregated['outlier_percentage']:.2f}%)\")\n        print(f\"Total processing time: {aggregated['total_processing_time']:.2f}s\")\n        print(f\"Average chunk processing time: {aggregated['avg_chunk_processing_time']:.3f}s\")\n        \n        # Chunk performance analysis\n        fastest_chunk = min(results, key=lambda r: r.processing_time)\n        slowest_chunk = max(results, key=lambda r: r.processing_time)\n        \n        print(f\"\\nChunk Performance:\")\n        print(f\"  Fastest: Chunk {fastest_chunk.chunk_id} ({fastest_chunk.processing_time:.3f}s)\")\n        print(f\"  Slowest: Chunk {slowest_chunk.chunk_id} ({slowest_chunk.processing_time:.3f}s)\")\n\ndef data_analysis_demo():\n    \"\"\"Demonstrate parallel data analysis.\"\"\"\n    print(\"=== Parallel Data Analysis Demo ===\")\n    \n    # Generate large dataset\n    random.seed(42)\n    dataset_size = 10000\n    dataset = []\n    \n    # Generate mostly normal data with some outliers\n    for _ in range(dataset_size):\n        if random.random() &lt; 0.05:  # 5% outliers\n            value = random.uniform(-100, 100)  # Extreme values\n        else:\n            value = random.gauss(50, 15)  # Normal distribution\n        dataset.append(value)\n    \n    print(f\"Generated dataset with {len(dataset)} points\")\n    \n    # Analyze with different chunk sizes and worker counts\n    analyzer = ParallelDataAnalyzer(max_workers=4, chunk_size=1000)\n    \n    # Run analysis\n    results = analyzer.analyze_parallel(dataset)\n    aggregated = analyzer.aggregate_results(results)\n    analyzer.generate_report(results, aggregated)\n    \n    # Compare with sequential analysis\n    print(f\"\\n--- Sequential Analysis Comparison ---\")\n    start_time = time.time()\n    all_data_chunk = DataChunk(chunk_id=0, data=dataset, metadata={})\n    sequential_result = analyze_data_chunk(all_data_chunk)\n    sequential_time = time.time() - start_time\n    \n    parallel_time = aggregated['total_processing_time']\n    speedup = sequential_time / parallel_time\n    \n    print(f\"Sequential time: {sequential_time:.2f}s\")\n    print(f\"Parallel time: {parallel_time:.2f}s\")\n    print(f\"Speedup: {speedup:.1f}x\")\n\nif __name__ == \"__main__\":\n    data_analysis_demo()\nelse:\n    print(\"Data analysis demo ready (run in script for execution)\")",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiprocessing and Parallel Computing</span>"
    ]
  },
  {
    "objectID": "book/11-multiprocessing.html#performance-considerations-and-best-practices",
    "href": "book/11-multiprocessing.html#performance-considerations-and-best-practices",
    "title": "12  Multiprocessing and Parallel Computing",
    "section": "12.6 Performance Considerations and Best Practices",
    "text": "12.6 Performance Considerations and Best Practices\n\n12.6.1 Choosing the Right Approach\n\nimport multiprocessing as mp\nimport threading\nimport asyncio\nimport time\nfrom concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor\n\ndef performance_guidelines():\n    \"\"\"Guidelines for choosing the right parallelism approach.\"\"\"\n    \n    print(\"=== Performance Guidelines ===\")\n    \n    guidelines = {\n        \"CPU-Intensive Tasks\": {\n            \"best_approach\": \"Multiprocessing\",\n            \"reason\": \"True parallelism, bypasses GIL\",\n            \"tools\": [\"ProcessPoolExecutor\", \"multiprocessing.Pool\", \"joblib\"],\n            \"examples\": [\"Mathematical calculations\", \"Image processing\", \"Data analysis\"]\n        },\n        \n        \"I/O-Intensive Tasks\": {\n            \"best_approach\": \"Async Programming or Threading\",\n            \"reason\": \"Efficient waiting, lower overhead\",\n            \"tools\": [\"asyncio\", \"aiohttp\", \"ThreadPoolExecutor\"],\n            \"examples\": [\"Web requests\", \"File I/O\", \"Database queries\"]\n        },\n        \n        \"Mixed Workloads\": {\n            \"best_approach\": \"Hybrid approach\",\n            \"reason\": \"Use both async for I/O and processes for CPU\",\n            \"tools\": [\"asyncio + ProcessPoolExecutor\", \"concurrent.futures\"],\n            \"examples\": [\"Web scraping with data processing\", \"ETL pipelines\"]\n        }\n    }\n    \n    for task_type, info in guidelines.items():\n        print(f\"\\n{task_type}:\")\n        print(f\"  Best approach: {info['best_approach']}\")\n        print(f\"  Reason: {info['reason']}\")\n        print(f\"  Tools: {', '.join(info['tools'])}\")\n        print(f\"  Examples: {', '.join(info['examples'])}\")\n\ndef overhead_analysis():\n    \"\"\"Analyze overhead of different parallelism approaches.\"\"\"\n    print(\"\\n=== Overhead Analysis ===\")\n    \n    def simple_task(x):\n        \"\"\"Very simple task to measure overhead.\"\"\"\n        return x * x\n    \n    data = list(range(100))\n    \n    # Measure sequential baseline\n    start = time.time()\n    sequential_results = [simple_task(x) for x in data]\n    sequential_time = time.time() - start\n    \n    # Measure threading overhead\n    start = time.time()\n    with ThreadPoolExecutor(max_workers=4) as executor:\n        threading_results = list(executor.map(simple_task, data))\n    threading_time = time.time() - start\n    \n    # Measure multiprocessing overhead (if running in script)\n    try:\n        start = time.time()\n        with ProcessPoolExecutor(max_workers=4) as executor:\n            mp_results = list(executor.map(simple_task, data))\n        mp_time = time.time() - start\n    except:\n        mp_time = None\n    \n    print(f\"Task: Square 100 numbers\")\n    print(f\"Sequential: {sequential_time:.4f}s\")\n    print(f\"Threading: {threading_time:.4f}s (overhead: {threading_time/sequential_time:.1f}x)\")\n    if mp_time:\n        print(f\"Multiprocessing: {mp_time:.4f}s (overhead: {mp_time/sequential_time:.1f}x)\")\n    else:\n        print(\"Multiprocessing: (not available in this environment)\")\n    \n    print(\"\\nKey takeaway: Parallelism has overhead - ensure task complexity justifies it\")\n\ndef memory_considerations():\n    \"\"\"Discuss memory considerations in multiprocessing.\"\"\"\n    print(\"\\n=== Memory Considerations ===\")\n    \n    considerations = [\n        \"Each process has its own memory space - no shared variables by default\",\n        \"Large datasets may need to be copied to each process (expensive)\",\n        \"Use shared memory (mp.Array, mp.Value) for frequently accessed data\",\n        \"Consider memory-mapped files for very large datasets\",\n        \"Monitor memory usage - processes use more RAM than threads\",\n        \"Use generators/iterators to process data in chunks\"\n    ]\n    \n    for i, consideration in enumerate(considerations, 1):\n        print(f\"{i}. {consideration}\")\n\n# Run the performance analysis\nperformance_guidelines()\noverhead_analysis()\nmemory_considerations()",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiprocessing and Parallel Computing</span>"
    ]
  },
  {
    "objectID": "book/11-multiprocessing.html#self-review-questions",
    "href": "book/11-multiprocessing.html#self-review-questions",
    "title": "12  Multiprocessing and Parallel Computing",
    "section": "12.7 Self-Review Questions",
    "text": "12.7 Self-Review Questions\n\n12.7.1 Knowledge Check\n\nWhen should you use multiprocessing vs threading vs async?\nWhat is the GIL and how does multiprocessing avoid it?\nWhat are the trade-offs between shared memory and message passing?\nHow do you handle exceptions in multiprocessing?\nWhat factors determine the optimal number of processes?\n\n\n\n12.7.2 Coding Challenges\n\nImplement parallel file processing with progress tracking\nCreate a parallel web crawler using multiprocessing\nBuild a map-reduce system for log file analysis\nDesign a parallel machine learning data preprocessor\n\n\n\n12.7.3 Answers\n\nMultiprocessing for CPU-bound; threading/async for I/O-bound tasks\nGIL prevents true Python thread parallelism; processes bypass this\nShared memory is faster but requires synchronization; messages are safer\nUse return_exceptions=True or handle in worker functions\nCPU cores, task overhead, memory constraints, and I/O requirements",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiprocessing and Parallel Computing</span>"
    ]
  },
  {
    "objectID": "book/11-multiprocessing.html#common-pitfalls",
    "href": "book/11-multiprocessing.html#common-pitfalls",
    "title": "12  Multiprocessing and Parallel Computing",
    "section": "12.8 Common Pitfalls",
    "text": "12.8 Common Pitfalls\n\nUsing multiprocessing for simple tasks - overhead exceeds benefit\nNot handling process cleanup - zombie processes and resource leaks\nSharing complex objects - pickling overhead and limitations\nIgnoring the GIL - using threading for CPU-bound tasks\nMemory bloat - creating too many processes or large shared data",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiprocessing and Parallel Computing</span>"
    ]
  },
  {
    "objectID": "book/11-multiprocessing.html#best-practices",
    "href": "book/11-multiprocessing.html#best-practices",
    "title": "12  Multiprocessing and Parallel Computing",
    "section": "12.9 Best Practices",
    "text": "12.9 Best Practices\n\nProfile first - measure before optimizing\nUse pools - avoid manual process management\nLimit concurrency - don’t exceed CPU cores for CPU-bound tasks\nHandle errors gracefully - use timeouts and exception handling\nMonitor resources - watch memory and CPU usage\nUse the right tool - async for I/O, processes for CPU",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiprocessing and Parallel Computing</span>"
    ]
  },
  {
    "objectID": "book/11-multiprocessing.html#next-steps",
    "href": "book/11-multiprocessing.html#next-steps",
    "title": "12  Multiprocessing and Parallel Computing",
    "section": "12.10 Next Steps",
    "text": "12.10 Next Steps\nExcellent! You now understand multiprocessing and parallel computing. Next, we’ll explore practical Applications including data science, web development, and automation.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiprocessing and Parallel Computing</span>"
    ]
  },
  {
    "objectID": "book/11-multiprocessing.html#resources",
    "href": "book/11-multiprocessing.html#resources",
    "title": "12  Multiprocessing and Parallel Computing",
    "section": "12.11 Resources",
    "text": "12.11 Resources\n\nPython Multiprocessing Documentation\nConcurrent Futures Documentation\nReal Python: Multiprocessing\nJoblib: Parallel Computing",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiprocessing and Parallel Computing</span>"
    ]
  },
  {
    "objectID": "book/12-data-science.html",
    "href": "book/12-data-science.html",
    "title": "13  Data Science with Python",
    "section": "",
    "text": "13.1 Core Data Science Libraries\nPython is the leading language for data science, offering powerful libraries for data manipulation, analysis, visualization, and machine learning.",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Science with Python</span>"
    ]
  },
  {
    "objectID": "book/12-data-science.html#core-data-science-libraries",
    "href": "book/12-data-science.html#core-data-science-libraries",
    "title": "13  Data Science with Python",
    "section": "",
    "text": "13.1.1 NumPy - Numerical Computing\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create arrays and basic operations\nprint(\"=== NumPy Basics ===\")\n\n# Create arrays\narr1 = np.array([1, 2, 3, 4, 5])\narr2 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nprint(f\"1D array: {arr1}\")\nprint(f\"2D array:\\n{arr2}\")\nprint(f\"Array shape: {arr2.shape}\")\nprint(f\"Array data type: {arr2.dtype}\")\n\n# Array operations\nprint(f\"\\nArray operations:\")\nprint(f\"Sum: {np.sum(arr1)}\")\nprint(f\"Mean: {np.mean(arr1)}\")\nprint(f\"Standard deviation: {np.std(arr1)}\")\nprint(f\"Max value: {np.max(arr1)}\")\n\n# Element-wise operations\nsquared = arr1 ** 2\nprint(f\"Squared: {squared}\")\n\n# Boolean indexing\nprint(f\"Values &gt; 3: {arr1[arr1 &gt; 3]}\")\n\n# Statistical operations on 2D array\nprint(f\"\\n2D array statistics:\")\nprint(f\"Sum of each column: {np.sum(arr2, axis=0)}\")\nprint(f\"Mean of each row: {np.mean(arr2, axis=1)}\")\n\n\n\n13.1.2 Pandas - Data Manipulation\n\nimport pandas as pd\nimport numpy as np\n\nprint(\"=== Pandas Basics ===\")\n\n# Create sample data\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve'],\n    'Age': [25, 30, 35, 28, 32],\n    'City': ['New York', 'London', 'Tokyo', 'Paris', 'Sydney'],\n    'Salary': [70000, 80000, 90000, 65000, 75000],\n    'Department': ['Engineering', 'Marketing', 'Engineering', 'HR', 'Marketing']\n}\n\n# Create DataFrame\ndf = pd.DataFrame(data)\nprint(\"Sample DataFrame:\")\nprint(df)\n\nprint(f\"\\nDataFrame info:\")\nprint(f\"Shape: {df.shape}\")\nprint(f\"Columns: {list(df.columns)}\")\nprint(f\"Data types:\\n{df.dtypes}\")\n\n# Basic operations\nprint(f\"\\nBasic statistics:\")\nprint(df.describe())\n\n# Filtering data\nprint(f\"\\nEngineering employees:\")\nengineering = df[df['Department'] == 'Engineering']\nprint(engineering)\n\n# Grouping and aggregation\nprint(f\"\\nSalary by department:\")\ndept_salary = df.groupby('Department')['Salary'].agg(['mean', 'min', 'max'])\nprint(dept_salary)\n\n# Adding new columns\ndf['Salary_Rank'] = df['Salary'].rank(ascending=False)\ndf['Age_Group'] = pd.cut(df['Age'], bins=[0, 30, 40, 100], labels=['Young', 'Mid', 'Senior'])\n\nprint(f\"\\nDataFrame with new columns:\")\nprint(df[['Name', 'Age', 'Age_Group', 'Salary', 'Salary_Rank']])\n\n\n\n13.1.3 Working with Your Own Data Files\n\n\n\n\n\n\n📁 Upload Your Own CSV Files\n\n\n\nWith Quarto Drop, you can drag and drop your own CSV files directly into the browser! Try uploading a CSV file in the area below and analyze it with Pandas.\n\n\n\n\n\ndata.csv\n\n# Drag and drop your CSV file here to upload it\n\nimport pandas as pd\nimport io\n\n# This will work when you drop a CSV file\ntry:\n    # Read the uploaded file\n    df_uploaded = pd.read_csv('data.csv')\n    \n    print(\"=== Your Uploaded Data ===\")\n    print(f\"Dataset shape: {df_uploaded.shape}\")\n    print(f\"Columns: {list(df_uploaded.columns)}\")\n    print(\"\\nFirst 5 rows:\")\n    print(df_uploaded.head())\n    \n    print(\"\\nBasic statistics:\")\n    print(df_uploaded.describe())\n    \n    # Show data types\n    print(f\"\\nData types:\")\n    print(df_uploaded.dtypes)\n    \nexcept FileNotFoundError:\n    print(\"📁 No file uploaded yet. Drag and drop a CSV file above to analyze it!\")\n    print(\"You can create a simple CSV file with columns like: Name,Age,City,Salary\")\nexcept Exception as e:\n    print(f\"Error reading file: {e}\")\n    print(\"Make sure your file is a valid CSV format.\")\n\n\n\n\n\n\n\n\n🎯 Try This\n\n\n\n\nCreate a simple CSV file on your computer with data like:\nName,Age,Department,Salary\nJohn,25,Engineering,70000\nJane,30,Marketing,65000\nDrag and drop it into the code area above\nThe code will automatically analyze your data!\n\n\n\n\n\n13.1.4 Matplotlib - Data Visualization\n\n\n\n\n\n\n📊 Interactive Plotting\n\n\n\nWith Quarto Live, you can modify the plotting code below and see the results instantly! Try changing colors, plot types, or data values to experiment with different visualizations.\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Configure matplotlib for Quarto\nplt.rcParams['figure.figsize'] = (10, 6)\nplt.rcParams['figure.dpi'] = 100\n\nprint(\"=== Interactive Data Visualization ===\")\n\n# Interactive example: Create your own data\nx = np.linspace(0, 10, 50)\ny = np.sin(x) * 2 + np.random.normal(0, 0.1, 50)  # Try changing the multiplier!\n\nplt.figure(figsize=(10, 6))\nplt.plot(x, y, 'bo-', markersize=4, linewidth=2, color='blue')  # Try different colors!\nplt.title('Interactive Plot - Modify and Run!', fontsize=14)\nplt.xlabel('X values')\nplt.ylabel('Y values') \nplt.grid(True, alpha=0.3)\nplt.show()\n\nprint(\"Try modifying the plot above - change colors, markers, or the mathematical function!\")\n\n# Generate sample data\nnp.random.seed(42)\ndates = pd.date_range('2023-01-01', periods=100, freq='D')\nvalues = np.cumsum(np.random.randn(100)) + 100\nsales_data = pd.DataFrame({'Date': dates, 'Sales': values})\n\n# Line plot\nplt.figure(figsize=(12, 8))\n\nplt.subplot(2, 2, 1)\nplt.plot(sales_data['Date'], sales_data['Sales'], linewidth=2, color='blue')\nplt.title('Sales Over Time')\nplt.xlabel('Date')\nplt.ylabel('Sales ($)')\nplt.xticks(rotation=45)\n\n# Histogram\nplt.subplot(2, 2, 2)\nplt.hist(sales_data['Sales'], bins=20, alpha=0.7, color='green', edgecolor='black')\nplt.title('Sales Distribution')\nplt.xlabel('Sales ($)')\nplt.ylabel('Frequency')\n\n# Scatter plot with categories\ncategories = ['A', 'B', 'C']\nx = np.random.randn(150)\ny = np.random.randn(150)\ncolors = np.random.choice(categories, 150)\n\nplt.subplot(2, 2, 3)\nfor category in categories:\n    mask = colors == category\n    plt.scatter(x[mask], y[mask], label=f'Category {category}', alpha=0.7)\nplt.title('Scatter Plot by Category')\nplt.xlabel('X Value')\nplt.ylabel('Y Value')\nplt.legend()\n\n# Bar plot\ndepartments = ['Engineering', 'Marketing', 'HR', 'Sales']\navg_salaries = [85000, 72000, 65000, 78000]\n\nplt.subplot(2, 2, 4)\nbars = plt.bar(departments, avg_salaries, color=['skyblue', 'lightgreen', 'lightcoral', 'gold'])\nplt.title('Average Salary by Department')\nplt.xlabel('Department')\nplt.ylabel('Average Salary ($)')\nplt.xticks(rotation=45)\n\n# Add value labels on bars\nfor bar, salary in zip(bars, avg_salaries):\n    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1000,\n             f'${salary:,}', ha='center', va='bottom')\n\nplt.tight_layout()\nplt.show()\n\nprint(\"Visualization plots created successfully!\")",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Science with Python</span>"
    ]
  },
  {
    "objectID": "book/12-data-science.html#working-with-different-file-formats",
    "href": "book/12-data-science.html#working-with-different-file-formats",
    "title": "13  Data Science with Python",
    "section": "13.2 Working with Different File Formats",
    "text": "13.2 Working with Different File Formats\n\n\n\n\n\n\n📊 Upload Excel and Other Data Files\n\n\n\nBeyond CSV files, you can also upload Excel files (.xlsx), JSON files, and other formats for analysis. Try dropping different file types below!\n\n\n\n\n\ndatafile\n\n# Drag and drop Excel, JSON, or other data files here\n\nimport pandas as pd\nimport json\nimport os\n\ndef analyze_uploaded_file(filename):\n    \"\"\"Analyze different types of uploaded files\"\"\"\n    try:\n        file_ext = os.path.splitext(filename)[1].lower()\n        \n        if file_ext == '.csv':\n            df = pd.read_csv(filename)\n            print(f\"📊 CSV file loaded: {filename}\")\n            \n        elif file_ext in ['.xlsx', '.xls']:\n            df = pd.read_excel(filename)\n            print(f\"📈 Excel file loaded: {filename}\")\n            \n        elif file_ext == '.json':\n            with open(filename, 'r') as f:\n                data = json.load(f)\n            df = pd.json_normalize(data)\n            print(f\"🔗 JSON file loaded: {filename}\")\n            \n        else:\n            print(f\"❌ Unsupported file type: {file_ext}\")\n            print(\"Supported formats: CSV (.csv), Excel (.xlsx, .xls), JSON (.json)\")\n            return\n            \n        # Analyze the loaded data\n        print(f\"\\n=== File Analysis ===\")\n        print(f\"Shape: {df.shape}\")\n        print(f\"Columns: {list(df.columns)}\")\n        print(f\"Memory usage: {df.memory_usage(deep=True).sum() / 1024:.1f} KB\")\n        \n        print(f\"\\n=== First 3 rows ===\")\n        print(df.head(3))\n        \n        print(f\"\\n=== Data types ===\")\n        print(df.dtypes)\n        \n        # Check for missing values\n        missing_values = df.isnull().sum()\n        if missing_values.any():\n            print(f\"\\n=== Missing values ===\")\n            print(missing_values[missing_values &gt; 0])\n        else:\n            print(\"\\n✅ No missing values found!\")\n            \n        # Quick statistics for numeric columns\n        numeric_cols = df.select_dtypes(include=[np.number]).columns\n        if len(numeric_cols) &gt; 0:\n            print(f\"\\n=== Statistics for numeric columns ===\")\n            print(df[numeric_cols].describe())\n            \n        return df\n        \n    except Exception as e:\n        print(f\"❌ Error processing file: {e}\")\n        print(\"Please ensure your file is in a valid format.\")\n\n# Check if a file was uploaded\ntry:\n    uploaded_files = [f for f in os.listdir('.') if f != 'datafile']\n    if uploaded_files:\n        for file in uploaded_files:\n            if not file.startswith('.'):  # Skip hidden files\n                df_analysis = analyze_uploaded_file(file)\n                break\n    else:\n        print(\"📁 No file uploaded yet.\")\n        print(\"Supported formats:\")\n        print(\"• CSV files (.csv)\")\n        print(\"• Excel files (.xlsx, .xls)\")  \n        print(\"• JSON files (.json)\")\n        print(\"\\nDrag and drop a file above to analyze it!\")\n        \nexcept Exception as e:\n    print(\"📁 Drag and drop a data file above to get started!\")",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Science with Python</span>"
    ]
  },
  {
    "objectID": "book/12-data-science.html#real-world-data-science-project",
    "href": "book/12-data-science.html#real-world-data-science-project",
    "title": "13  Data Science with Python",
    "section": "13.3 Real-World Data Science Project",
    "text": "13.3 Real-World Data Science Project\n\n13.3.1 Project: Sales Data Analysis\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\n\nclass SalesAnalyzer:\n    \"\"\"Comprehensive sales data analyzer.\"\"\"\n    \n    def __init__(self):\n        self.data = None\n        self.summary_stats = {}\n    \n    def generate_sample_data(self, num_records: int = 1000) -&gt; pd.DataFrame:\n        \"\"\"Generate realistic sales data for analysis.\"\"\"\n        np.random.seed(42)\n        \n        # Date range\n        start_date = datetime(2023, 1, 1)\n        end_date = datetime(2023, 12, 31)\n        dates = pd.date_range(start_date, end_date, freq='D')\n        \n        # Generate data\n        data = []\n        products = ['Laptop', 'Desktop', 'Tablet', 'Phone', 'Monitor', 'Keyboard', 'Mouse']\n        regions = ['North', 'South', 'East', 'West', 'Central']\n        sales_reps = [f'Rep_{i:02d}' for i in range(1, 21)]\n        \n        for _ in range(num_records):\n            date = np.random.choice(dates)\n            product = np.random.choice(products)\n            region = np.random.choice(regions)\n            sales_rep = np.random.choice(sales_reps)\n            \n            # Product-specific pricing\n            base_prices = {\n                'Laptop': 1200, 'Desktop': 800, 'Tablet': 400,\n                'Phone': 600, 'Monitor': 300, 'Keyboard': 80, 'Mouse': 40\n            }\n            \n            base_price = base_prices[product]\n            quantity = np.random.randint(1, 10)\n            \n            # Add some seasonality and randomness\n            month_factor = 1 + 0.2 * np.sin(2 * np.pi * pd.Timestamp(date).month / 12)\n            price = base_price * month_factor * np.random.uniform(0.8, 1.2)\n            revenue = price * quantity\n            \n            # Simulate costs (60-80% of revenue)\n            cost_ratio = np.random.uniform(0.6, 0.8)\n            cost = revenue * cost_ratio\n            profit = revenue - cost\n            \n            data.append({\n                'Date': date,\n                'Product': product,\n                'Region': region,\n                'Sales_Rep': sales_rep,\n                'Quantity': quantity,\n                'Unit_Price': price,\n                'Revenue': revenue,\n                'Cost': cost,\n                'Profit': profit\n            })\n        \n        df = pd.DataFrame(data)\n        df['Date'] = pd.to_datetime(df['Date'])\n        df['Month'] = df['Date'].dt.month\n        df['Quarter'] = df['Date'].dt.quarter\n        df['Day_of_Week'] = df['Date'].dt.day_name()\n        \n        self.data = df\n        print(f\"Generated {len(df)} sales records\")\n        return df\n    \n    def basic_analysis(self) -&gt; dict:\n        \"\"\"Perform basic statistical analysis.\"\"\"\n        if self.data is None:\n            raise ValueError(\"No data available. Generate data first.\")\n        \n        df = self.data\n        \n        analysis = {\n            'total_records': len(df),\n            'date_range': (df['Date'].min(), df['Date'].max()),\n            'total_revenue': df['Revenue'].sum(),\n            'total_profit': df['Profit'].sum(),\n            'avg_order_value': df['Revenue'].mean(),\n            'profit_margin': (df['Profit'].sum() / df['Revenue'].sum()) * 100,\n            'top_product': df.groupby('Product')['Revenue'].sum().idxmax(),\n            'top_region': df.groupby('Region')['Revenue'].sum().idxmax(),\n            'top_sales_rep': df.groupby('Sales_Rep')['Revenue'].sum().idxmax()\n        }\n        \n        self.summary_stats = analysis\n        return analysis\n    \n    def time_series_analysis(self):\n        \"\"\"Analyze sales trends over time.\"\"\"\n        if self.data is None:\n            return\n        \n        df = self.data\n        \n        # Monthly analysis\n        monthly_sales = df.groupby(df['Date'].dt.to_period('M')).agg({\n            'Revenue': 'sum',\n            'Profit': 'sum',\n            'Quantity': 'sum'\n        }).reset_index()\n        monthly_sales['Date'] = monthly_sales['Date'].dt.to_timestamp()\n        \n        # Quarterly analysis\n        quarterly_sales = df.groupby('Quarter').agg({\n            'Revenue': 'sum',\n            'Profit': 'sum',\n            'Quantity': 'sum'\n        })\n        \n        # Day of week analysis\n        dow_sales = df.groupby('Day_of_Week').agg({\n            'Revenue': 'mean',\n            'Quantity': 'mean'\n        }).reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\n        \n        return {\n            'monthly': monthly_sales,\n            'quarterly': quarterly_sales,\n            'day_of_week': dow_sales\n        }\n    \n    def product_analysis(self):\n        \"\"\"Analyze product performance.\"\"\"\n        if self.data is None:\n            return\n        \n        df = self.data\n        \n        product_stats = df.groupby('Product').agg({\n            'Revenue': ['sum', 'mean', 'count'],\n            'Profit': ['sum', 'mean'],\n            'Quantity': 'sum',\n            'Unit_Price': 'mean'\n        }).round(2)\n        \n        # Flatten column names\n        product_stats.columns = ['_'.join(col).strip() for col in product_stats.columns]\n        \n        # Calculate profit margin by product\n        product_stats['Profit_Margin'] = (\n            product_stats['Profit_sum'] / product_stats['Revenue_sum'] * 100\n        ).round(2)\n        \n        return product_stats\n    \n    def regional_analysis(self):\n        \"\"\"Analyze regional performance.\"\"\"\n        if self.data is None:\n            return\n        \n        df = self.data\n        \n        regional_stats = df.groupby('Region').agg({\n            'Revenue': ['sum', 'mean'],\n            'Profit': ['sum', 'mean'],\n            'Quantity': 'sum'\n        }).round(2)\n        \n        regional_stats.columns = ['_'.join(col).strip() for col in regional_stats.columns]\n        \n        # Market share by region\n        total_revenue = df['Revenue'].sum()\n        regional_stats['Market_Share'] = (\n            regional_stats['Revenue_sum'] / total_revenue * 100\n        ).round(2)\n        \n        return regional_stats\n    \n    def sales_rep_analysis(self):\n        \"\"\"Analyze sales representative performance.\"\"\"\n        if self.data is None:\n            return\n        \n        df = self.data\n        \n        rep_stats = df.groupby('Sales_Rep').agg({\n            'Revenue': ['sum', 'mean', 'count'],\n            'Profit': 'sum'\n        }).round(2)\n        \n        rep_stats.columns = ['_'.join(col).strip() for col in rep_stats.columns]\n        \n        # Rank representatives\n        rep_stats['Revenue_Rank'] = rep_stats['Revenue_sum'].rank(ascending=False)\n        rep_stats['Avg_Deal_Size'] = rep_stats['Revenue_mean']\n        \n        return rep_stats.sort_values('Revenue_sum', ascending=False)\n    \n    def create_visualizations(self):\n        \"\"\"Create comprehensive visualizations.\"\"\"\n        if self.data is None:\n            return\n        \n        fig, axes = plt.subplots(2, 3, figsize=(18, 12))\n        fig.suptitle('Sales Data Analysis Dashboard', fontsize=16, fontweight='bold')\n        \n        # 1. Monthly Revenue Trend\n        time_data = self.time_series_analysis()\n        monthly_data = time_data['monthly']\n        \n        axes[0, 0].plot(monthly_data['Date'], monthly_data['Revenue'], \n                       marker='o', linewidth=2, color='blue')\n        axes[0, 0].set_title('Monthly Revenue Trend')\n        axes[0, 0].set_xlabel('Month')\n        axes[0, 0].set_ylabel('Revenue ($)')\n        axes[0, 0].tick_params(axis='x', rotation=45)\n        \n        # 2. Product Performance\n        product_data = self.product_analysis()\n        axes[0, 1].bar(product_data.index, product_data['Revenue_sum'], \n                      color='lightgreen', edgecolor='darkgreen')\n        axes[0, 1].set_title('Revenue by Product')\n        axes[0, 1].set_xlabel('Product')\n        axes[0, 1].set_ylabel('Total Revenue ($)')\n        axes[0, 1].tick_params(axis='x', rotation=45)\n        \n        # 3. Regional Market Share\n        regional_data = self.regional_analysis()\n        axes[0, 2].pie(regional_data['Revenue_sum'], labels=regional_data.index, \n                      autopct='%1.1f%%', startangle=90)\n        axes[0, 2].set_title('Market Share by Region')\n        \n        # 4. Quarterly Profit Trend\n        quarterly_data = time_data['quarterly']\n        axes[1, 0].bar(quarterly_data.index, quarterly_data['Profit'], \n                      color='orange', alpha=0.7)\n        axes[1, 0].set_title('Quarterly Profit')\n        axes[1, 0].set_xlabel('Quarter')\n        axes[1, 0].set_ylabel('Profit ($)')\n        \n        # 5. Day of Week Analysis\n        dow_data = time_data['day_of_week']\n        axes[1, 1].plot(range(len(dow_data)), dow_data['Revenue'], \n                       marker='s', linewidth=2, color='red')\n        axes[1, 1].set_title('Average Daily Revenue by Day of Week')\n        axes[1, 1].set_xlabel('Day of Week')\n        axes[1, 1].set_ylabel('Average Revenue ($)')\n        axes[1, 1].set_xticks(range(len(dow_data)))\n        axes[1, 1].set_xticklabels(dow_data.index, rotation=45)\n        \n        # 6. Revenue vs Profit Scatter\n        axes[1, 2].scatter(self.data['Revenue'], self.data['Profit'], \n                          alpha=0.6, color='purple')\n        axes[1, 2].set_title('Revenue vs Profit Correlation')\n        axes[1, 2].set_xlabel('Revenue ($)')\n        axes[1, 2].set_ylabel('Profit ($)')\n        \n        # Add trend line\n        z = np.polyfit(self.data['Revenue'], self.data['Profit'], 1)\n        p = np.poly1d(z)\n        axes[1, 2].plot(self.data['Revenue'], p(self.data['Revenue']), \"r--\", alpha=0.8)\n        \n        plt.tight_layout()\n        plt.show()\n    \n    def generate_report(self):\n        \"\"\"Generate comprehensive analysis report.\"\"\"\n        if self.data is None:\n            print(\"No data available. Generate data first.\")\n            return\n        \n        basic_stats = self.basic_analysis()\n        \n        print(\"=\" * 60)\n        print(\"SALES DATA ANALYSIS REPORT\")\n        print(\"=\" * 60)\n        \n        print(f\"\\n📊 OVERVIEW\")\n        print(f\"   Total Records: {basic_stats['total_records']:,}\")\n        print(f\"   Date Range: {basic_stats['date_range'][0].strftime('%Y-%m-%d')} to {basic_stats['date_range'][1].strftime('%Y-%m-%d')}\")\n        print(f\"   Total Revenue: ${basic_stats['total_revenue']:,.2f}\")\n        print(f\"   Total Profit: ${basic_stats['total_profit']:,.2f}\")\n        print(f\"   Profit Margin: {basic_stats['profit_margin']:.1f}%\")\n        print(f\"   Average Order Value: ${basic_stats['avg_order_value']:,.2f}\")\n        \n        print(f\"\\n🏆 TOP PERFORMERS\")\n        print(f\"   Best Product: {basic_stats['top_product']}\")\n        print(f\"   Best Region: {basic_stats['top_region']}\")\n        print(f\"   Best Sales Rep: {basic_stats['top_sales_rep']}\")\n        \n        # Product analysis\n        print(f\"\\n📦 PRODUCT ANALYSIS\")\n        product_stats = self.product_analysis()\n        print(product_stats.sort_values('Revenue_sum', ascending=False).head())\n        \n        # Regional analysis\n        print(f\"\\n🌍 REGIONAL ANALYSIS\")\n        regional_stats = self.regional_analysis()\n        print(regional_stats.sort_values('Revenue_sum', ascending=False))\n        \n        # Sales rep performance\n        print(f\"\\n👥 TOP SALES REPRESENTATIVES\")\n        rep_stats = self.sales_rep_analysis()\n        print(rep_stats.head(10))\n\n# Demonstrate the sales analyzer\nanalyzer = SalesAnalyzer()\nanalyzer.generate_sample_data(1500)\nanalyzer.generate_report()\nanalyzer.create_visualizations()",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Science with Python</span>"
    ]
  },
  {
    "objectID": "book/12-data-science.html#machine-learning-basics",
    "href": "book/12-data-science.html#machine-learning-basics",
    "title": "13  Data Science with Python",
    "section": "13.4 Machine Learning Basics",
    "text": "13.4 Machine Learning Basics\n\n13.4.1 Scikit-learn Introduction\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_squared_error, accuracy_score, classification_report\nfrom sklearn.preprocessing import StandardScaler\nimport pandas as pd\nimport numpy as np\n\nprint(\"=== Machine Learning with Scikit-learn ===\")\n\ndef regression_example():\n    \"\"\"Demonstrate linear regression.\"\"\"\n    print(\"\\n1. Linear Regression Example\")\n    \n    # Generate sample data\n    np.random.seed(42)\n    n_samples = 200\n    X = np.random.randn(n_samples, 3)  # 3 features\n    true_coefficients = [2, -1, 0.5]\n    y = X.dot(true_coefficients) + np.random.randn(n_samples) * 0.1\n    \n    # Create feature names\n    feature_names = ['Feature_1', 'Feature_2', 'Feature_3']\n    X_df = pd.DataFrame(X, columns=feature_names)\n    \n    # Split data\n    X_train, X_test, y_train, y_test = train_test_split(\n        X_df, y, test_size=0.3, random_state=42\n    )\n    \n    # Train model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    \n    # Make predictions\n    y_pred = model.predict(X_test)\n    \n    # Evaluate\n    mse = mean_squared_error(y_test, y_pred)\n    r2_score = model.score(X_test, y_test)\n    \n    print(f\"   Model Coefficients: {model.coef_}\")\n    print(f\"   True Coefficients: {true_coefficients}\")\n    print(f\"   Mean Squared Error: {mse:.4f}\")\n    print(f\"   R² Score: {r2_score:.4f}\")\n    \n    return model, X_test, y_test, y_pred\n\ndef classification_example():\n    \"\"\"Demonstrate classification.\"\"\"\n    print(\"\\n2. Classification Example\")\n    \n    # Generate sample data\n    from sklearn.datasets import make_classification\n    \n    X, y = make_classification(\n        n_samples=1000, n_features=10, n_informative=5,\n        n_redundant=2, n_classes=3, random_state=42\n    )\n    \n    feature_names = [f'Feature_{i+1}' for i in range(X.shape[1])]\n    X_df = pd.DataFrame(X, columns=feature_names)\n    \n    # Split data\n    X_train, X_test, y_train, y_test = train_test_split(\n        X_df, y, test_size=0.3, random_state=42, stratify=y\n    )\n    \n    # Scale features\n    scaler = StandardScaler()\n    X_train_scaled = scaler.fit_transform(X_train)\n    X_test_scaled = scaler.transform(X_test)\n    \n    # Train models\n    models = {\n        'Logistic Regression': LogisticRegression(random_state=42),\n        'Random Forest': RandomForestClassifier(n_estimators=100, random_state=42)\n    }\n    \n    results = {}\n    for name, model in models.items():\n        # Train\n        model.fit(X_train_scaled, y_train)\n        \n        # Predict\n        y_pred = model.predict(X_test_scaled)\n        \n        # Evaluate\n        accuracy = accuracy_score(y_test, y_pred)\n        results[name] = {\n            'model': model,\n            'accuracy': accuracy,\n            'predictions': y_pred\n        }\n        \n        print(f\"\\n   {name}:\")\n        print(f\"     Accuracy: {accuracy:.3f}\")\n    \n    return results, X_test_scaled, y_test\n\n# Run examples\nregression_model, X_reg_test, y_reg_test, y_reg_pred = regression_example()\nclassification_results, X_clf_test, y_clf_test = classification_example()\n\n# Feature importance for Random Forest\nrf_model = classification_results['Random Forest']['model']\nfeature_importance = pd.DataFrame({\n    'Feature': [f'Feature_{i+1}' for i in range(len(rf_model.feature_importances_))],\n    'Importance': rf_model.feature_importances_\n}).sort_values('Importance', ascending=False)\n\nprint(f\"\\n   Random Forest Feature Importance:\")\nprint(feature_importance.head())",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Science with Python</span>"
    ]
  },
  {
    "objectID": "book/12-data-science.html#data-science-workflow",
    "href": "book/12-data-science.html#data-science-workflow",
    "title": "13  Data Science with Python",
    "section": "13.5 Data Science Workflow",
    "text": "13.5 Data Science Workflow\n\n13.5.1 End-to-End Data Science Project\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport seaborn as sns\n\nclass DataScienceProject:\n    \"\"\"End-to-end data science project workflow.\"\"\"\n    \n    def __init__(self, project_name: str):\n        self.project_name = project_name\n        self.data = None\n        self.processed_data = None\n        self.model = None\n        self.scaler = None\n        self.label_encoder = None\n        \n    def load_and_explore_data(self):\n        \"\"\"Step 1: Load and explore the dataset.\"\"\"\n        print(f\"=== {self.project_name}: Data Exploration ===\")\n        \n        # Generate a realistic customer dataset\n        np.random.seed(42)\n        n_customers = 2000\n        \n        # Customer demographics\n        ages = np.random.normal(40, 12, n_customers).astype(int)\n        ages = np.clip(ages, 18, 80)\n        \n        incomes = np.random.lognormal(10.5, 0.5, n_customers)\n        \n        # Education levels\n        education_levels = np.random.choice(\n            ['High School', 'Bachelor', 'Master', 'PhD'],\n            n_customers, p=[0.4, 0.35, 0.2, 0.05]\n        )\n        \n        # Spending behavior (influenced by income and age)\n        base_spending = incomes * 0.1 + ages * 50\n        spending = base_spending + np.random.normal(0, 500, n_customers)\n        spending = np.clip(spending, 0, None)\n        \n        # Customer segment (target variable)\n        segments = []\n        for i in range(n_customers):\n            if spending[i] &gt; 8000:\n                segment = 'Premium'\n            elif spending[i] &gt; 4000:\n                segment = 'Standard'\n            else:\n                segment = 'Basic'\n            segments.append(segment)\n        \n        # Create DataFrame\n        self.data = pd.DataFrame({\n            'Age': ages,\n            'Income': incomes,\n            'Education': education_levels,\n            'Annual_Spending': spending,\n            'Segment': segments\n        })\n        \n        print(f\"Dataset shape: {self.data.shape}\")\n        print(f\"\\nFirst 5 rows:\")\n        print(self.data.head())\n        \n        print(f\"\\nDataset info:\")\n        print(self.data.info())\n        \n        print(f\"\\nBasic statistics:\")\n        print(self.data.describe())\n        \n        print(f\"\\nSegment distribution:\")\n        print(self.data['Segment'].value_counts())\n        \n        return self.data\n    \n    def data_preprocessing(self):\n        \"\"\"Step 2: Clean and preprocess the data.\"\"\"\n        print(f\"\\n=== Data Preprocessing ===\")\n        \n        if self.data is None:\n            raise ValueError(\"Load data first\")\n        \n        # Check for missing values\n        print(f\"Missing values:\")\n        print(self.data.isnull().sum())\n        \n        # Encode categorical variables\n        self.label_encoder = LabelEncoder()\n        \n        processed_data = self.data.copy()\n        processed_data['Education_Encoded'] = self.label_encoder.fit_transform(\n            processed_data['Education']\n        )\n        \n        # Create additional features\n        processed_data['Income_to_Age_Ratio'] = processed_data['Income'] / processed_data['Age']\n        processed_data['Spending_to_Income_Ratio'] = processed_data['Annual_Spending'] / processed_data['Income']\n        \n        # Feature selection for modeling\n        feature_columns = ['Age', 'Income', 'Education_Encoded', 'Annual_Spending', \n                          'Income_to_Age_Ratio', 'Spending_to_Income_Ratio']\n        \n        self.processed_data = {\n            'features': processed_data[feature_columns],\n            'target': processed_data['Segment'],\n            'full_data': processed_data\n        }\n        \n        print(f\"Features selected: {feature_columns}\")\n        print(f\"Target variable: Segment\")\n        print(f\"Processed data shape: {self.processed_data['features'].shape}\")\n        \n        return self.processed_data\n    \n    def exploratory_data_analysis(self):\n        \"\"\"Step 3: Perform exploratory data analysis.\"\"\"\n        print(f\"\\n=== Exploratory Data Analysis ===\")\n        \n        if self.processed_data is None:\n            self.data_preprocessing()\n        \n        fig, axes = plt.subplots(2, 3, figsize=(18, 12))\n        fig.suptitle(f'{self.project_name}: Exploratory Data Analysis', fontsize=16)\n        \n        full_data = self.processed_data['full_data']\n        \n        # 1. Age distribution by segment\n        for segment in full_data['Segment'].unique():\n            segment_data = full_data[full_data['Segment'] == segment]\n            axes[0, 0].hist(segment_data['Age'], alpha=0.7, label=segment, bins=20)\n        axes[0, 0].set_title('Age Distribution by Segment')\n        axes[0, 0].set_xlabel('Age')\n        axes[0, 0].set_ylabel('Frequency')\n        axes[0, 0].legend()\n        \n        # 2. Income vs Spending\n        segments = full_data['Segment'].unique()\n        colors = ['red', 'green', 'blue']\n        for segment, color in zip(segments, colors):\n            segment_data = full_data[full_data['Segment'] == segment]\n            axes[0, 1].scatter(segment_data['Income'], segment_data['Annual_Spending'], \n                             alpha=0.6, label=segment, color=color)\n        axes[0, 1].set_title('Income vs Annual Spending')\n        axes[0, 1].set_xlabel('Income ($)')\n        axes[0, 1].set_ylabel('Annual Spending ($)')\n        axes[0, 1].legend()\n        \n        # 3. Education distribution\n        education_counts = full_data['Education'].value_counts()\n        axes[0, 2].pie(education_counts.values, labels=education_counts.index, autopct='%1.1f%%')\n        axes[0, 2].set_title('Education Distribution')\n        \n        # 4. Segment distribution\n        segment_counts = full_data['Segment'].value_counts()\n        axes[1, 0].bar(segment_counts.index, segment_counts.values, \n                      color=['lightcoral', 'lightgreen', 'lightblue'])\n        axes[1, 0].set_title('Customer Segment Distribution')\n        axes[1, 0].set_xlabel('Segment')\n        axes[1, 0].set_ylabel('Count')\n        \n        # 5. Correlation heatmap\n        correlation_data = full_data[['Age', 'Income', 'Annual_Spending', 'Education_Encoded']].corr()\n        im = axes[1, 1].imshow(correlation_data.values, cmap='coolwarm', aspect='auto')\n        axes[1, 1].set_title('Feature Correlation Heatmap')\n        axes[1, 1].set_xticks(range(len(correlation_data.columns)))\n        axes[1, 1].set_yticks(range(len(correlation_data.columns)))\n        axes[1, 1].set_xticklabels(correlation_data.columns, rotation=45)\n        axes[1, 1].set_yticklabels(correlation_data.columns)\n        \n        # Add correlation values\n        for i in range(len(correlation_data.columns)):\n            for j in range(len(correlation_data.columns)):\n                axes[1, 1].text(j, i, f'{correlation_data.iloc[i, j]:.2f}', \n                               ha='center', va='center')\n        \n        # 6. Spending distribution by segment\n        for segment in segments:\n            segment_data = full_data[full_data['Segment'] == segment]\n            axes[1, 2].hist(segment_data['Annual_Spending'], alpha=0.7, label=segment, bins=20)\n        axes[1, 2].set_title('Spending Distribution by Segment')\n        axes[1, 2].set_xlabel('Annual Spending ($)')\n        axes[1, 2].set_ylabel('Frequency')\n        axes[1, 2].legend()\n        \n        plt.tight_layout()\n        plt.show()\n    \n    def train_model(self):\n        \"\"\"Step 4: Train machine learning model.\"\"\"\n        print(f\"\\n=== Model Training ===\")\n        \n        if self.processed_data is None:\n            self.data_preprocessing()\n        \n        X = self.processed_data['features']\n        y = self.processed_data['target']\n        \n        # Split data\n        X_train, X_test, y_train, y_test = train_test_split(\n            X, y, test_size=0.3, random_state=42, stratify=y\n        )\n        \n        # Scale features\n        self.scaler = StandardScaler()\n        X_train_scaled = self.scaler.fit_transform(X_train)\n        X_test_scaled = self.scaler.transform(X_test)\n        \n        # Train Random Forest model\n        self.model = RandomForestClassifier(\n            n_estimators=100, \n            random_state=42,\n            max_depth=10,\n            min_samples_split=5\n        )\n        \n        self.model.fit(X_train_scaled, y_train)\n        \n        # Cross-validation\n        cv_scores = cross_val_score(\n            self.model, X_train_scaled, y_train, cv=5, scoring='accuracy'\n        )\n        \n        print(f\"Cross-validation scores: {cv_scores}\")\n        print(f\"Mean CV accuracy: {cv_scores.mean():.3f} (+/- {cv_scores.std() * 2:.3f})\")\n        \n        # Test set evaluation\n        y_pred = self.model.predict(X_test_scaled)\n        test_accuracy = (y_pred == y_test).mean()\n        \n        print(f\"Test set accuracy: {test_accuracy:.3f}\")\n        \n        # Feature importance\n        feature_importance = pd.DataFrame({\n            'Feature': X.columns,\n            'Importance': self.model.feature_importances_\n        }).sort_values('Importance', ascending=False)\n        \n        print(f\"\\nFeature Importance:\")\n        print(feature_importance)\n        \n        # Detailed classification report\n        print(f\"\\nClassification Report:\")\n        print(classification_report(y_test, y_pred))\n        \n        return {\n            'model': self.model,\n            'test_accuracy': test_accuracy,\n            'cv_scores': cv_scores,\n            'feature_importance': feature_importance,\n            'predictions': y_pred,\n            'true_labels': y_test\n        }\n    \n    def model_evaluation(self, results):\n        \"\"\"Step 5: Evaluate model performance.\"\"\"\n        print(f\"\\n=== Model Evaluation ===\")\n        \n        y_true = results['true_labels']\n        y_pred = results['predictions']\n        \n        # Confusion matrix\n        cm = confusion_matrix(y_true, y_pred)\n        \n        plt.figure(figsize=(12, 5))\n        \n        # Plot confusion matrix\n        plt.subplot(1, 2, 1)\n        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n                   xticklabels=self.model.classes_,\n                   yticklabels=self.model.classes_)\n        plt.title('Confusion Matrix')\n        plt.xlabel('Predicted')\n        plt.ylabel('Actual')\n        \n        # Plot feature importance\n        plt.subplot(1, 2, 2)\n        feature_imp = results['feature_importance'].head(6)\n        plt.barh(feature_imp['Feature'], feature_imp['Importance'])\n        plt.title('Top Feature Importance')\n        plt.xlabel('Importance')\n        \n        plt.tight_layout()\n        plt.show()\n    \n    def run_complete_project(self):\n        \"\"\"Run the complete data science project.\"\"\"\n        print(f\"🚀 Starting {self.project_name}\")\n        \n        # Step 1: Load and explore data\n        self.load_and_explore_data()\n        \n        # Step 2: Preprocess data\n        self.data_preprocessing()\n        \n        # Step 3: EDA\n        self.exploratory_data_analysis()\n        \n        # Step 4: Train model\n        results = self.train_model()\n        \n        # Step 5: Evaluate model\n        self.model_evaluation(results)\n        \n        print(f\"\\n✅ {self.project_name} completed successfully!\")\n        return results\n\n# Run the complete data science project\nproject = DataScienceProject(\"Customer Segmentation Analysis\")\nresults = project.run_complete_project()",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Science with Python</span>"
    ]
  },
  {
    "objectID": "book/12-data-science.html#self-review-questions",
    "href": "book/12-data-science.html#self-review-questions",
    "title": "13  Data Science with Python",
    "section": "13.6 Self-Review Questions",
    "text": "13.6 Self-Review Questions\n\n13.6.1 Knowledge Check\n\nWhat are the core libraries in the Python data science ecosystem?\nWhen would you use NumPy vs Pandas?\nWhat’s the difference between supervised and unsupervised learning?\nHow do you handle missing data in a dataset?\nWhat metrics would you use to evaluate a classification model?\n\n\n\n13.6.2 Practical Exercises\n\nData Cleaning Challenge: Clean a messy dataset with missing values and outliers\nVisualization Project: Create an interactive dashboard for sales data\nPrediction Model: Build a model to predict house prices\nTime Series Analysis: Analyze stock price trends and patterns\n\n\n\n13.6.3 Answers\n\nNumPy (arrays), Pandas (dataframes), Matplotlib/Seaborn (visualization), Scikit-learn (ML)\nNumPy for numerical computations; Pandas for data manipulation and analysis\nSupervised has labeled data; unsupervised finds patterns in unlabeled data\nRemove, impute with mean/median/mode, or use advanced imputation techniques\nAccuracy, precision, recall, F1-score, ROC-AUC for classification",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Science with Python</span>"
    ]
  },
  {
    "objectID": "book/12-data-science.html#best-practices",
    "href": "book/12-data-science.html#best-practices",
    "title": "13  Data Science with Python",
    "section": "13.7 Best Practices",
    "text": "13.7 Best Practices\n\nStart with data exploration - understand your data before modeling\nClean data thoroughly - garbage in, garbage out\nFeature engineering - create meaningful features from raw data\nCross-validation - properly evaluate model performance\nDocument everything - reproducible analysis is crucial\nVersion control - track data, code, and model versions",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Science with Python</span>"
    ]
  },
  {
    "objectID": "book/12-data-science.html#next-steps",
    "href": "book/12-data-science.html#next-steps",
    "title": "13  Data Science with Python",
    "section": "13.8 Next Steps",
    "text": "13.8 Next Steps\nExcellent! You now have a solid foundation in data science with Python. Next, we’ll explore Web Development to learn how to build web applications with Streamlit and FastAPI.",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Science with Python</span>"
    ]
  },
  {
    "objectID": "book/12-data-science.html#resources",
    "href": "book/12-data-science.html#resources",
    "title": "13  Data Science with Python",
    "section": "13.9 Resources",
    "text": "13.9 Resources\n\nPandas Documentation\nNumPy Documentation\nMatplotlib Documentation\nScikit-learn Documentation\nKaggle Learn - Free micro-courses\nPython Data Science Handbook",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Data Science with Python</span>"
    ]
  },
  {
    "objectID": "book/13-applications.html",
    "href": "book/13-applications.html",
    "title": "14  Python Applications and Real-World Projects",
    "section": "",
    "text": "14.1 Web Development with Flask\nPython’s versatility makes it perfect for a wide range of applications. This chapter explores practical projects and real-world use cases that demonstrate Python’s power across different domains.",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Python Applications and Real-World Projects</span>"
    ]
  },
  {
    "objectID": "book/13-applications.html#web-development-with-flask",
    "href": "book/13-applications.html#web-development-with-flask",
    "title": "14  Python Applications and Real-World Projects",
    "section": "",
    "text": "14.1.1 Simple Web Application\n\n# Note: This code demonstrates Flask concepts\n# To run, install Flask: pip install flask\n\nflask_app_code = '''\nfrom flask import Flask, render_template, request, jsonify\nimport json\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n# Sample data storage (in real apps, use a database)\ntasks = [\n    {\"id\": 1, \"title\": \"Learn Python\", \"completed\": True, \"created\": \"2024-01-01\"},\n    {\"id\": 2, \"title\": \"Build a web app\", \"completed\": False, \"created\": \"2024-01-02\"}\n]\n\n@app.route('/')\ndef home():\n    return render_template('index.html', tasks=tasks)\n\n@app.route('/api/tasks', methods=['GET', 'POST'])\ndef api_tasks():\n    if request.method == 'GET':\n        return jsonify(tasks)\n    \n    elif request.method == 'POST':\n        data = request.json\n        new_task = {\n            \"id\": max([t[\"id\"] for t in tasks]) + 1 if tasks else 1,\n            \"title\": data[\"title\"],\n            \"completed\": False,\n            \"created\": datetime.now().strftime(\"%Y-%m-%d\")\n        }\n        tasks.append(new_task)\n        return jsonify(new_task), 201\n\n@app.route('/api/tasks/&lt;int:task_id&gt;', methods=['PUT', 'DELETE'])\ndef api_task(task_id):\n    task = next((t for t in tasks if t[\"id\"] == task_id), None)\n    if not task:\n        return jsonify({\"error\": \"Task not found\"}), 404\n    \n    if request.method == 'PUT':\n        data = request.json\n        task.update(data)\n        return jsonify(task)\n    \n    elif request.method == 'DELETE':\n        tasks.remove(task)\n        return '', 204\n\nif __name__ == '__main__':\n    app.run(debug=True)\n'''\n\nprint(\"Flask To-Do Application Code:\")\nprint(\"=\" * 50)\nprint(flask_app_code)\n\n\n\n14.1.2 API Development Best Practices\n\nimport json\nfrom datetime import datetime\nfrom typing import Dict, List, Optional\n\nclass TaskManager:\n    \"\"\"A simple task management system demonstrating API design patterns.\"\"\"\n    \n    def __init__(self):\n        self.tasks: List[Dict] = []\n        self.next_id = 1\n    \n    def create_task(self, title: str, description: str = \"\") -&gt; Dict:\n        \"\"\"Create a new task.\"\"\"\n        task = {\n            \"id\": self.next_id,\n            \"title\": title,\n            \"description\": description,\n            \"completed\": False,\n            \"created_at\": datetime.now().isoformat(),\n            \"updated_at\": datetime.now().isoformat()\n        }\n        self.tasks.append(task)\n        self.next_id += 1\n        return task\n    \n    def get_task(self, task_id: int) -&gt; Optional[Dict]:\n        \"\"\"Get a task by ID.\"\"\"\n        return next((task for task in self.tasks if task[\"id\"] == task_id), None)\n    \n    def get_all_tasks(self, completed: Optional[bool] = None) -&gt; List[Dict]:\n        \"\"\"Get all tasks, optionally filtered by completion status.\"\"\"\n        if completed is None:\n            return self.tasks.copy()\n        return [task for task in self.tasks if task[\"completed\"] == completed]\n    \n    def update_task(self, task_id: int, **updates) -&gt; Optional[Dict]:\n        \"\"\"Update a task.\"\"\"\n        task = self.get_task(task_id)\n        if task:\n            task.update(updates)\n            task[\"updated_at\"] = datetime.now().isoformat()\n            return task\n        return None\n    \n    def delete_task(self, task_id: int) -&gt; bool:\n        \"\"\"Delete a task.\"\"\"\n        task = self.get_task(task_id)\n        if task:\n            self.tasks.remove(task)\n            return True\n        return False\n    \n    def get_statistics(self) -&gt; Dict:\n        \"\"\"Get task statistics.\"\"\"\n        total = len(self.tasks)\n        completed = len([t for t in self.tasks if t[\"completed\"]])\n        return {\n            \"total_tasks\": total,\n            \"completed_tasks\": completed,\n            \"pending_tasks\": total - completed,\n            \"completion_rate\": (completed / total * 100) if total &gt; 0 else 0\n        }\n\n# Demonstrate the task manager\nmanager = TaskManager()\n\n# Create some tasks\ntask1 = manager.create_task(\"Learn Python basics\", \"Cover variables, functions, classes\")\ntask2 = manager.create_task(\"Build a web application\", \"Create a Flask or Django app\")\ntask3 = manager.create_task(\"Deploy to production\", \"Set up hosting and CI/CD\")\n\nprint(\"Created tasks:\")\nfor task in manager.get_all_tasks():\n    print(f\"  {task['id']}: {task['title']}\")\n\n# Update a task\nmanager.update_task(1, completed=True)\nprint(f\"\\\\nMarked task 1 as completed\")\n\n# Get statistics\nstats = manager.get_statistics()\nprint(f\"\\\\nTask Statistics:\")\nprint(f\"  Total: {stats['total_tasks']}\")\nprint(f\"  Completed: {stats['completed_tasks']}\")\nprint(f\"  Completion Rate: {stats['completion_rate']:.1f}%\")",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Python Applications and Real-World Projects</span>"
    ]
  },
  {
    "objectID": "book/13-applications.html#data-processing-and-analysis",
    "href": "book/13-applications.html#data-processing-and-analysis",
    "title": "14  Python Applications and Real-World Projects",
    "section": "14.2 Data Processing and Analysis",
    "text": "14.2 Data Processing and Analysis\n\n14.2.1 File Processing Pipeline\n\nimport csv\nimport json\nfrom pathlib import Path\nfrom typing import Dict, List, Any\nfrom datetime import datetime\n\nclass DataProcessor:\n    \"\"\"A flexible data processing pipeline for various file formats.\"\"\"\n    \n    def __init__(self, input_dir: str, output_dir: str):\n        self.input_dir = Path(input_dir)\n        self.output_dir = Path(output_dir)\n        self.output_dir.mkdir(exist_ok=True)\n    \n    def process_csv_file(self, filename: str) -&gt; List[Dict]:\n        \"\"\"Process a CSV file and return structured data.\"\"\"\n        filepath = self.input_dir / filename\n        data = []\n        \n        # Simulate CSV processing\n        sample_data = [\n            {\"id\": 1, \"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"},\n            {\"id\": 2, \"name\": \"Bob\", \"age\": 25, \"city\": \"San Francisco\"},\n            {\"id\": 3, \"name\": \"Charlie\", \"age\": 35, \"city\": \"Chicago\"}\n        ]\n        \n        print(f\"Processing CSV file: {filename}\")\n        for row in sample_data:\n            # Data cleaning and validation\n            processed_row = {\n                \"id\": int(row[\"id\"]),\n                \"name\": row[\"name\"].strip().title(),\n                \"age\": int(row[\"age\"]),\n                \"city\": row[\"city\"].strip(),\n                \"processed_at\": datetime.now().isoformat()\n            }\n            data.append(processed_row)\n        \n        return data\n    \n    def generate_report(self, data: List[Dict]) -&gt; Dict:\n        \"\"\"Generate a summary report from processed data.\"\"\"\n        if not data:\n            return {\"error\": \"No data to process\"}\n        \n        total_records = len(data)\n        avg_age = sum(person[\"age\"] for person in data) / total_records\n        cities = set(person[\"city\"] for person in data)\n        \n        age_groups = {\"18-25\": 0, \"26-35\": 0, \"36+\": 0}\n        for person in data:\n            age = person[\"age\"]\n            if age &lt;= 25:\n                age_groups[\"18-25\"] += 1\n            elif age &lt;= 35:\n                age_groups[\"26-35\"] += 1\n            else:\n                age_groups[\"36+\"] += 1\n        \n        return {\n            \"total_records\": total_records,\n            \"average_age\": round(avg_age, 1),\n            \"unique_cities\": len(cities),\n            \"cities\": list(cities),\n            \"age_distribution\": age_groups,\n            \"generated_at\": datetime.now().isoformat()\n        }\n    \n    def save_json_report(self, data: Any, filename: str) -&gt; str:\n        \"\"\"Save data as a JSON report.\"\"\"\n        output_path = self.output_dir / filename\n        with open(output_path, 'w') as f:\n            json.dump(data, f, indent=2)\n        return str(output_path)\n    \n    def run_pipeline(self, csv_filename: str) -&gt; Dict:\n        \"\"\"Run the complete data processing pipeline.\"\"\"\n        try:\n            # Step 1: Process the CSV file\n            processed_data = self.process_csv_file(csv_filename)\n            \n            # Step 2: Generate report\n            report = self.generate_report(processed_data)\n            \n            # Step 3: Save results\n            data_file = self.save_json_report(processed_data, \"processed_data.json\")\n            report_file = self.save_json_report(report, \"summary_report.json\")\n            \n            return {\n                \"status\": \"success\",\n                \"records_processed\": len(processed_data),\n                \"files_created\": [data_file, report_file],\n                \"summary\": report\n            }\n            \n        except Exception as e:\n            return {\n                \"status\": \"error\",\n                \"error\": str(e),\n                \"timestamp\": datetime.now().isoformat()\n            }\n\n# Demonstrate the data processor\nprocessor = DataProcessor(\"./input\", \"./output\")\nresult = processor.run_pipeline(\"sample_data.csv\")\n\nprint(\"Data Processing Pipeline Results:\")\nprint(\"=\" * 40)\nprint(f\"Status: {result['status']}\")\nif result['status'] == 'success':\n    print(f\"Records processed: {result['records_processed']}\")\n    print(f\"Summary: {result['summary']}\")\nelse:\n    print(f\"Error: {result['error']}\")",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Python Applications and Real-World Projects</span>"
    ]
  },
  {
    "objectID": "book/13-applications.html#automation-and-scripting",
    "href": "book/13-applications.html#automation-and-scripting",
    "title": "14  Python Applications and Real-World Projects",
    "section": "14.3 Automation and Scripting",
    "text": "14.3 Automation and Scripting\n\n14.3.1 File Organization Tool\n\nimport os\nimport shutil\nfrom pathlib import Path\nfrom datetime import datetime\nfrom typing import Dict, List\n\nclass FileOrganizer:\n    \"\"\"Automatically organize files based on type and date.\"\"\"\n    \n    def __init__(self, source_dir: str):\n        self.source_dir = Path(source_dir)\n        self.file_types = {\n            'images': ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg'],\n            'documents': ['.pdf', '.doc', '.docx', '.txt', '.rtf'],\n            'spreadsheets': ['.xls', '.xlsx', '.csv'],\n            'code': ['.py', '.js', '.html', '.css', '.cpp', '.java'],\n            'archives': ['.zip', '.rar', '.7z', '.tar', '.gz']\n        }\n    \n    def categorize_file(self, file_path: Path) -&gt; str:\n        \"\"\"Determine the category of a file based on its extension.\"\"\"\n        extension = file_path.suffix.lower()\n        \n        for category, extensions in self.file_types.items():\n            if extension in extensions:\n                return category\n        \n        return 'others'\n    \n    def get_date_folder(self, file_path: Path) -&gt; str:\n        \"\"\"Get the date-based folder name for a file.\"\"\"\n        try:\n            # Use file modification time\n            timestamp = file_path.stat().st_mtime\n            date = datetime.fromtimestamp(timestamp)\n            return date.strftime(\"%Y/%m-%B\")\n        except:\n            return \"unknown-date\"\n    \n    def organize_files(self, dry_run: bool = True) -&gt; Dict:\n        \"\"\"Organize files in the source directory.\"\"\"\n        if not self.source_dir.exists():\n            return {\"error\": f\"Source directory {self.source_dir} does not exist\"}\n        \n        results = {\n            \"files_processed\": 0,\n            \"files_moved\": 0,\n            \"categories\": {},\n            \"errors\": []\n        }\n        \n        # Simulate file organization (since we don't have actual files)\n        sample_files = [\n            \"document.pdf\", \"photo.jpg\", \"script.py\", \n            \"data.csv\", \"archive.zip\", \"readme.txt\"\n        ]\n        \n        for filename in sample_files:\n            file_path = Path(filename)\n            category = self.categorize_file(file_path)\n            date_folder = \"2024/01-January\"  # Simulated date\n            \n            # Create target directory structure\n            target_dir = self.source_dir / \"organized\" / category / date_folder\n            target_path = target_dir / filename\n            \n            results[\"files_processed\"] += 1\n            \n            if category not in results[\"categories\"]:\n                results[\"categories\"][category] = []\n            \n            results[\"categories\"][category].append({\n                \"filename\": filename,\n                \"target_path\": str(target_path),\n                \"moved\": not dry_run\n            })\n            \n            if not dry_run:\n                results[\"files_moved\"] += 1\n                print(f\"Would move {filename} to {target_path}\")\n            else:\n                print(f\"[DRY RUN] Would move {filename} to {target_path}\")\n        \n        return results\n    \n    def generate_organization_report(self, results: Dict) -&gt; str:\n        \"\"\"Generate a report of the organization process.\"\"\"\n        if \"error\" in results:\n            return f\"Error: {results['error']}\"\n        \n        report = []\n        report.append(\"File Organization Report\")\n        report.append(\"=\" * 30)\n        report.append(f\"Files processed: {results['files_processed']}\")\n        report.append(f\"Files moved: {results['files_moved']}\")\n        report.append(\"\")\n        \n        report.append(\"Files by category:\")\n        for category, files in results[\"categories\"].items():\n            report.append(f\"  {category}: {len(files)} files\")\n            for file_info in files[:3]:  # Show first 3 files\n                status = \"moved\" if file_info[\"moved\"] else \"would move\"\n                report.append(f\"    - {file_info['filename']} ({status})\")\n            if len(files) &gt; 3:\n                report.append(f\"    ... and {len(files) - 3} more\")\n        \n        return \"\\\\n\".join(report)\n\n# Demonstrate file organization\norganizer = FileOrganizer(\"./downloads\")\n\n# Run in dry-run mode first\nprint(\"Running file organization (dry run):\")\nprint(\"=\" * 45)\nresults = organizer.organize_files(dry_run=True)\nreport = organizer.generate_organization_report(results)\nprint(report)\n\n\n\n14.3.2 System Monitoring Tool\n\nimport psutil\nimport time\nfrom datetime import datetime\nfrom typing import Dict, List\n\nclass SystemMonitor:\n    \"\"\"Monitor system resources and generate alerts.\"\"\"\n    \n    def __init__(self):\n        self.alerts = []\n        self.thresholds = {\n            'cpu_percent': 80.0,\n            'memory_percent': 85.0,\n            'disk_percent': 90.0\n        }\n    \n    def get_system_info(self) -&gt; Dict:\n        \"\"\"Get current system information.\"\"\"\n        # CPU information\n        cpu_percent = psutil.cpu_percent(interval=1)\n        cpu_count = psutil.cpu_count()\n        \n        # Memory information\n        memory = psutil.virtual_memory()\n        \n        # Disk information\n        disk = psutil.disk_usage('/')\n        \n        # Network information (if available)\n        try:\n            network = psutil.net_io_counters()\n            network_info = {\n                \"bytes_sent\": network.bytes_sent,\n                \"bytes_recv\": network.bytes_recv\n            }\n        except:\n            network_info = {\"error\": \"Network info not available\"}\n        \n        return {\n            \"timestamp\": datetime.now().isoformat(),\n            \"cpu\": {\n                \"percent\": cpu_percent,\n                \"count\": cpu_count\n            },\n            \"memory\": {\n                \"total\": memory.total,\n                \"available\": memory.available,\n                \"percent\": memory.percent,\n                \"used\": memory.used\n            },\n            \"disk\": {\n                \"total\": disk.total,\n                \"used\": disk.used,\n                \"free\": disk.free,\n                \"percent\": (disk.used / disk.total) * 100\n            },\n            \"network\": network_info\n        }\n    \n    def check_thresholds(self, system_info: Dict) -&gt; List[str]:\n        \"\"\"Check if any system metrics exceed thresholds.\"\"\"\n        alerts = []\n        \n        # Check CPU\n        if system_info[\"cpu\"][\"percent\"] &gt; self.thresholds[\"cpu_percent\"]:\n            alerts.append(f\"High CPU usage: {system_info['cpu']['percent']:.1f}%\")\n        \n        # Check Memory\n        if system_info[\"memory\"][\"percent\"] &gt; self.thresholds[\"memory_percent\"]:\n            alerts.append(f\"High memory usage: {system_info['memory']['percent']:.1f}%\")\n        \n        # Check Disk\n        if system_info[\"disk\"][\"percent\"] &gt; self.thresholds[\"disk_percent\"]:\n            alerts.append(f\"High disk usage: {system_info['disk']['percent']:.1f}%\")\n        \n        return alerts\n    \n    def format_bytes(self, bytes_value: int) -&gt; str:\n        \"\"\"Convert bytes to human readable format.\"\"\"\n        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:\n            if bytes_value &lt; 1024.0:\n                return f\"{bytes_value:.1f} {unit}\"\n            bytes_value /= 1024.0\n        return f\"{bytes_value:.1f} PB\"\n    \n    def generate_report(self, system_info: Dict) -&gt; str:\n        \"\"\"Generate a formatted system report.\"\"\"\n        report = []\n        report.append(\"System Status Report\")\n        report.append(\"=\" * 25)\n        report.append(f\"Timestamp: {system_info['timestamp']}\")\n        report.append(\"\")\n        \n        # CPU Report\n        report.append(f\"CPU Usage: {system_info['cpu']['percent']:.1f}% ({system_info['cpu']['count']} cores)\")\n        \n        # Memory Report\n        memory = system_info['memory']\n        report.append(f\"Memory Usage: {memory['percent']:.1f}%\")\n        report.append(f\"  Total: {self.format_bytes(memory['total'])}\")\n        report.append(f\"  Used: {self.format_bytes(memory['used'])}\")\n        report.append(f\"  Available: {self.format_bytes(memory['available'])}\")\n        \n        # Disk Report\n        disk = system_info['disk']\n        report.append(f\"Disk Usage: {disk['percent']:.1f}%\")\n        report.append(f\"  Total: {self.format_bytes(disk['total'])}\")\n        report.append(f\"  Used: {self.format_bytes(disk['used'])}\")\n        report.append(f\"  Free: {self.format_bytes(disk['free'])}\")\n        \n        # Alerts\n        alerts = self.check_thresholds(system_info)\n        if alerts:\n            report.append(\"\")\n            report.append(\"⚠️  ALERTS:\")\n            for alert in alerts:\n                report.append(f\"  - {alert}\")\n        else:\n            report.append(\"\")\n            report.append(\"✅ All systems normal\")\n        \n        return \"\\\\n\".join(report)\n    \n    def monitor_continuous(self, duration: int = 10, interval: int = 2):\n        \"\"\"Monitor system continuously for a specified duration.\"\"\"\n        print(f\"Starting system monitoring for {duration} seconds...\")\n        start_time = time.time()\n        \n        while time.time() - start_time &lt; duration:\n            system_info = self.get_system_info()\n            report = self.generate_report(system_info)\n            \n            # Clear screen (in real terminal)\n            print(\"\\\\n\" + \"=\"*50)\n            print(report)\n            \n            time.sleep(interval)\n\n# Demonstrate system monitoring\nmonitor = SystemMonitor()\n\nprint(\"Current System Status:\")\nprint(\"=\" * 30)\ncurrent_info = monitor.get_system_info()\ncurrent_report = monitor.generate_report(current_info)\nprint(current_report)",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Python Applications and Real-World Projects</span>"
    ]
  },
  {
    "objectID": "book/13-applications.html#command-line-tools",
    "href": "book/13-applications.html#command-line-tools",
    "title": "14  Python Applications and Real-World Projects",
    "section": "14.4 Command Line Tools",
    "text": "14.4 Command Line Tools\n\n14.4.1 Project Generator",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Python Applications and Real-World Projects</span>"
    ]
  },
  {
    "objectID": "book/13-applications.html#testing-and-quality-assurance",
    "href": "book/13-applications.html#testing-and-quality-assurance",
    "title": "14  Python Applications and Real-World Projects",
    "section": "14.5 Testing and Quality Assurance",
    "text": "14.5 Testing and Quality Assurance\n\n14.5.1 Test Suite Example\n\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom datetime import datetime\n\n# Mock classes for demonstration\nclass Calculator:\n    \"\"\"Simple calculator for testing demonstration.\"\"\"\n    \n    def add(self, a, b):\n        return a + b\n    \n    def divide(self, a, b):\n        if b == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        return a / b\n    \n    def multiply(self, a, b):\n        return a * b\n\nclass DatabaseConnection:\n    \"\"\"Mock database connection for testing.\"\"\"\n    \n    def __init__(self, connection_string):\n        self.connection_string = connection_string\n        self.connected = False\n    \n    def connect(self):\n        # Simulate connection\n        if \"invalid\" in self.connection_string:\n            raise ConnectionError(\"Invalid connection string\")\n        self.connected = True\n        return True\n    \n    def execute_query(self, query):\n        if not self.connected:\n            raise RuntimeError(\"Not connected to database\")\n        # Simulate query execution\n        return [{\"id\": 1, \"name\": \"Test\"}]\n\nclass TestCalculator(unittest.TestCase):\n    \"\"\"Test cases for Calculator class.\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test fixtures before each test method.\"\"\"\n        self.calc = Calculator()\n    \n    def test_add_positive_numbers(self):\n        \"\"\"Test addition of positive numbers.\"\"\"\n        result = self.calc.add(2, 3)\n        self.assertEqual(result, 5)\n    \n    def test_add_negative_numbers(self):\n        \"\"\"Test addition of negative numbers.\"\"\"\n        result = self.calc.add(-2, -3)\n        self.assertEqual(result, -5)\n    \n    def test_divide_normal_case(self):\n        \"\"\"Test normal division.\"\"\"\n        result = self.calc.divide(10, 2)\n        self.assertEqual(result, 5)\n    \n    def test_divide_by_zero_raises_error(self):\n        \"\"\"Test that division by zero raises ValueError.\"\"\"\n        with self.assertRaises(ValueError) as context:\n            self.calc.divide(10, 0)\n        self.assertIn(\"Cannot divide by zero\", str(context.exception))\n    \n    def test_multiply(self):\n        \"\"\"Test multiplication.\"\"\"\n        result = self.calc.multiply(3, 4)\n        self.assertEqual(result, 12)\n\nclass TestDatabaseConnection(unittest.TestCase):\n    \"\"\"Test cases for DatabaseConnection class.\"\"\"\n    \n    def test_successful_connection(self):\n        \"\"\"Test successful database connection.\"\"\"\n        db = DatabaseConnection(\"valid://connection\")\n        self.assertTrue(db.connect())\n        self.assertTrue(db.connected)\n    \n    def test_invalid_connection_string(self):\n        \"\"\"Test invalid connection string raises error.\"\"\"\n        db = DatabaseConnection(\"invalid://connection\")\n        with self.assertRaises(ConnectionError):\n            db.connect()\n    \n    @patch('__main__.DatabaseConnection.execute_query')\n    def test_query_execution_with_mock(self, mock_execute):\n        \"\"\"Test query execution with mocking.\"\"\"\n        # Setup mock\n        mock_execute.return_value = [{\"id\": 1, \"name\": \"Mocked Result\"}]\n        \n        db = DatabaseConnection(\"valid://connection\")\n        db.connected = True  # Simulate connected state\n        \n        result = db.execute_query(\"SELECT * FROM users\")\n        \n        # Verify mock was called\n        mock_execute.assert_called_once_with(\"SELECT * FROM users\")\n        self.assertEqual(result[0][\"name\"], \"Mocked Result\")\n    \n    def test_query_without_connection_raises_error(self):\n        \"\"\"Test that querying without connection raises error.\"\"\"\n        db = DatabaseConnection(\"valid://connection\")\n        # Don't connect\n        with self.assertRaises(RuntimeError) as context:\n            db.execute_query(\"SELECT * FROM users\")\n        self.assertIn(\"Not connected\", str(context.exception))\n\ndef run_test_suite():\n    \"\"\"Run the complete test suite and return results.\"\"\"\n    # Create test suite\n    suite = unittest.TestSuite()\n    \n    # Add test cases\n    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestCalculator))\n    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestDatabaseConnection))\n    \n    # Run tests\n    runner = unittest.TextTestRunner(verbosity=2, stream=open(os.devnull, 'w'))\n    result = runner.run(suite)\n    \n    # Return summary\n    return {\n        \"tests_run\": result.testsRun,\n        \"failures\": len(result.failures),\n        \"errors\": len(result.errors),\n        \"success_rate\": ((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun) * 100,\n        \"details\": {\n            \"failures\": [str(failure) for failure in result.failures],\n            \"errors\": [str(error) for error in result.errors]\n        }\n    }\n\n# Demonstrate testing\nprint(\"Running Test Suite:\")\nprint(\"=\" * 25)\n\n# Import os for the test runner\nimport os\n\n# Run the tests\ntest_results = run_test_suite()\n\nprint(f\"Tests run: {test_results['tests_run']}\")\nprint(f\"Failures: {test_results['failures']}\")\nprint(f\"Errors: {test_results['errors']}\")\nprint(f\"Success rate: {test_results['success_rate']:.1f}%\")\n\nif test_results['success_rate'] == 100:\n    print(\"🎉 All tests passed!\")\nelse:\n    print(\"⚠️ Some tests failed - check the details\")",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Python Applications and Real-World Projects</span>"
    ]
  },
  {
    "objectID": "book/13-applications.html#practice-projects",
    "href": "book/13-applications.html#practice-projects",
    "title": "14  Python Applications and Real-World Projects",
    "section": "14.6 Practice Projects",
    "text": "14.6 Practice Projects\n\n14.6.1 Exercise 1: Personal Finance Tracker\nCreate a command-line application that tracks income and expenses:\nRequirements: - Add income and expense entries - Categorize transactions - Generate monthly reports - Export data to CSV - Set budget limits and alerts\nStarter Code:\nclass FinanceTracker:\n    def __init__(self):\n        self.transactions = []\n        self.categories = [\"Food\", \"Transport\", \"Entertainment\", \"Utilities\", \"Income\"]\n    \n    def add_transaction(self, amount, category, description):\n        # Implement this method\n        pass\n    \n    def generate_report(self, month, year):\n        # Implement this method\n        pass\n\n\n14.6.2 Exercise 2: Web Scraper and Data Analyzer\nBuild a tool that scrapes data from websites and analyzes it:\nRequirements: - Scrape product prices from multiple sites - Store data in a database - Track price changes over time - Generate price alerts - Create visualization charts\nStarter Code:\nimport requests\nfrom bs4 import BeautifulSoup\n\nclass PriceScraper:\n    def __init__(self):\n        self.products = []\n    \n    def scrape_price(self, url, selector):\n        # Implement web scraping logic\n        pass\n    \n    def analyze_trends(self):\n        # Implement trend analysis\n        pass\n\n\n14.6.3 Exercise 3: Task Automation Suite\nCreate a suite of automation tools:\nRequirements: - File organizer (sort files by type/date) - Email sender (bulk emails with templates) - Backup manager (automated backups) - System cleaner (remove temp files) - Report generator (system health)\nTips: - Use pathlib for file operations - Use smtplib for email sending - Use schedule for automation - Use psutil for system information - Create a unified CLI interface",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Python Applications and Real-World Projects</span>"
    ]
  },
  {
    "objectID": "book/13-applications.html#next-steps",
    "href": "book/13-applications.html#next-steps",
    "title": "14  Python Applications and Real-World Projects",
    "section": "14.7 Next Steps",
    "text": "14.7 Next Steps\nNow that you’ve seen Python’s practical applications:\n\nChoose Your Focus: Pick an area that interests you (web, data, automation, etc.)\nBuild Projects: Start with small projects and gradually increase complexity\nLearn Frameworks: Dive deeper into relevant frameworks (Django, FastAPI, etc.)\nJoin Communities: Participate in Python communities and open source projects\nKeep Learning: Python evolves constantly - stay updated with new features",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Python Applications and Real-World Projects</span>"
    ]
  },
  {
    "objectID": "book/13-applications.html#resources-for-further-learning",
    "href": "book/13-applications.html#resources-for-further-learning",
    "title": "14  Python Applications and Real-World Projects",
    "section": "14.8 Resources for Further Learning",
    "text": "14.8 Resources for Further Learning\n\nWeb Development: Django, FastAPI, Flask documentation\nData Science: Pandas, NumPy, Scikit-learn tutorials\nAutomation: Automate the Boring Stuff with Python\nTesting: pytest documentation and best practices\nDeployment: Docker, AWS, Heroku guides\n\nRemember: The best way to learn is by building real projects that solve actual problems!",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Python Applications and Real-World Projects</span>"
    ]
  },
  {
    "objectID": "book/14-iot-connectivity.html",
    "href": "book/14-iot-connectivity.html",
    "title": "15  IoT Connectivity and Industrial Protocols",
    "section": "",
    "text": "15.1 Serial Communication\nPython is a powerful language for IoT (Internet of Things) applications and industrial automation. This chapter covers essential connectivity protocols and tools for communicating with IoT devices, sensors, and industrial equipment.\nSerial communication is fundamental for connecting to microcontrollers, sensors, and industrial devices.",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>IoT Connectivity and Industrial Protocols</span>"
    ]
  },
  {
    "objectID": "book/14-iot-connectivity.html#serial-communication",
    "href": "book/14-iot-connectivity.html#serial-communication",
    "title": "15  IoT Connectivity and Industrial Protocols",
    "section": "",
    "text": "15.1.1 PySerial Basics\n\n# Note: This demonstrates PySerial concepts\n# To use with real hardware: uv add pyserial\n\nimport sys\nfrom datetime import datetime\nimport time\n\n# Simulate serial communication concepts\nclass MockSerial:\n    \"\"\"Mock serial port for demonstration\"\"\"\n    \n    def __init__(self, port, baudrate=9600, timeout=1):\n        self.port = port\n        self.baudrate = baudrate\n        self.timeout = timeout\n        self.is_open = False\n        self.buffer = []\n        \n        print(f\"Mock Serial initialized: {port} @ {baudrate} baud\")\n    \n    def open(self):\n        self.is_open = True\n        print(f\"Opened connection to {self.port}\")\n    \n    def close(self):\n        self.is_open = False\n        print(f\"Closed connection to {self.port}\")\n    \n    def write(self, data):\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n        print(f\"Sent: {data}\")\n        return len(data)\n    \n    def read(self, size=1):\n        # Simulate reading sensor data\n        mock_data = b\"25.3\"  # Temperature reading\n        print(f\"Received: {mock_data}\")\n        return mock_data\n    \n    def readline(self):\n        # Simulate reading a line of data\n        mock_line = b\"TEMP:25.3,HUMID:65.2\\n\"\n        print(f\"Read line: {mock_line}\")\n        return mock_line\n\n# Demonstrate serial communication\ndef demo_serial_communication():\n    \"\"\"Demonstrate basic serial communication patterns\"\"\"\n    \n    # Initialize serial connection\n    ser = MockSerial('/dev/ttyUSB0', baudrate=9600, timeout=1)\n    ser.open()\n    \n    try:\n        # Send command to device\n        command = \"READ_SENSORS\\n\"\n        ser.write(command)\n        \n        # Read response\n        response = ser.readline()\n        \n        # Parse sensor data\n        data_str = response.decode('utf-8').strip()\n        print(f\"Raw data: {data_str}\")\n        \n        # Parse comma-separated values\n        if ':' in data_str:\n            sensors = {}\n            for pair in data_str.split(','):\n                if ':' in pair:\n                    key, value = pair.split(':')\n                    sensors[key] = float(value)\n            \n            print(f\"Parsed sensors: {sensors}\")\n            return sensors\n    \n    finally:\n        ser.close()\n\n# Run the demo\nsensors = demo_serial_communication()\nprint(f\"Final sensor data: {sensors}\")\n\n\n\n15.1.2 Arduino Communication Example\n\nimport time\nimport json\nfrom datetime import datetime\n\nclass ArduinoInterface:\n    \"\"\"Interface for communicating with Arduino devices\"\"\"\n    \n    def __init__(self, port='/dev/ttyACM0', baudrate=9600):\n        self.port = port\n        self.baudrate = baudrate\n        self.connection = None\n        self.data_buffer = []\n    \n    def connect(self):\n        \"\"\"Establish connection to Arduino\"\"\"\n        print(f\"Connecting to Arduino on {self.port}\")\n        # In real implementation: self.connection = serial.Serial(self.port, self.baudrate)\n        self.connection = MockSerial(self.port, self.baudrate)\n        self.connection.open()\n        time.sleep(2)  # Arduino reset delay\n        print(\"Connected to Arduino\")\n    \n    def disconnect(self):\n        \"\"\"Close connection to Arduino\"\"\"\n        if self.connection:\n            self.connection.close()\n            print(\"Disconnected from Arduino\")\n    \n    def send_command(self, command):\n        \"\"\"Send command to Arduino\"\"\"\n        if not self.connection:\n            raise Exception(\"Not connected to Arduino\")\n        \n        command_line = f\"{command}\\\\n\"\n        self.connection.write(command_line.encode())\n        print(f\"Sent command: {command}\")\n    \n    def read_sensor_data(self):\n        \"\"\"Read and parse sensor data from Arduino\"\"\"\n        if not self.connection:\n            raise Exception(\"Not connected to Arduino\")\n        \n        # Simulate reading JSON data from Arduino\n        mock_data = '{\"temperature\": 23.5, \"humidity\": 58.2, \"light\": 340}'\n        print(f\"Received: {mock_data}\")\n        \n        try:\n            data = json.loads(mock_data)\n            data['timestamp'] = datetime.now().isoformat()\n            return data\n        except json.JSONDecodeError as e:\n            print(f\"JSON parsing error: {e}\")\n            return None\n    \n    def control_led(self, pin, state):\n        \"\"\"Control LED on Arduino\"\"\"\n        command = f\"LED,{pin},{'ON' if state else 'OFF'}\"\n        self.send_command(command)\n    \n    def read_analog(self, pin):\n        \"\"\"Read analog value from Arduino pin\"\"\"\n        self.send_command(f\"ANALOG_READ,{pin}\")\n        # Simulate analog reading (0-1023)\n        value = 512  # Mock value\n        print(f\"Analog pin {pin}: {value}\")\n        return value\n\n# Demonstrate Arduino communication\narduino = ArduinoInterface()\n\ntry:\n    arduino.connect()\n    \n    # Read sensor data\n    sensor_data = arduino.read_sensor_data()\n    print(f\"Sensor readings: {sensor_data}\")\n    \n    # Control outputs\n    arduino.control_led(13, True)  # Turn on LED on pin 13\n    \n    # Read analog inputs\n    light_level = arduino.read_analog(0)  # Read light sensor on A0\n    \n    print(f\"Light level: {light_level}\")\n    \nfinally:\n    arduino.disconnect()",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>IoT Connectivity and Industrial Protocols</span>"
    ]
  },
  {
    "objectID": "book/14-iot-connectivity.html#modbus-communication",
    "href": "book/14-iot-connectivity.html#modbus-communication",
    "title": "15  IoT Connectivity and Industrial Protocols",
    "section": "15.2 Modbus Communication",
    "text": "15.2 Modbus Communication\nModbus is a widely used industrial communication protocol for connecting PLCs, sensors, and other industrial devices.\n\n15.2.1 Modbus TCP/RTU with pymodbus\n\n# Note: For real implementation: uv add pymodbus\n\nimport struct\nimport time\nfrom typing import List, Dict, Optional\n\nclass MockModbusClient:\n    \"\"\"Mock Modbus client for demonstration\"\"\"\n    \n    def __init__(self, host='192.168.1.100', port=502):\n        self.host = host\n        self.port = port\n        self.connected = False\n        \n        # Mock register data\n        self.holding_registers = {\n            0: 2350,    # Temperature * 100\n            1: 6520,    # Humidity * 100\n            2: 1,       # Pump status\n            3: 750,     # Pressure\n            4: 50       # Flow rate\n        }\n        \n        self.coils = {\n            0: True,    # Pump 1\n            1: False,   # Pump 2\n            2: True,    # Valve 1\n            3: False    # Valve 2\n        }\n    \n    def connect(self):\n        \"\"\"Connect to Modbus device\"\"\"\n        print(f\"Connecting to Modbus device at {self.host}:{self.port}\")\n        self.connected = True\n        print(\"Connected to Modbus device\")\n        return True\n    \n    def close(self):\n        \"\"\"Close Modbus connection\"\"\"\n        self.connected = False\n        print(\"Disconnected from Modbus device\")\n    \n    def read_holding_registers(self, address, count, unit=1):\n        \"\"\"Read holding registers\"\"\"\n        if not self.connected:\n            raise Exception(\"Not connected to Modbus device\")\n        \n        print(f\"Reading {count} holding registers from address {address}\")\n        \n        result = []\n        for i in range(count):\n            reg_addr = address + i\n            value = self.holding_registers.get(reg_addr, 0)\n            result.append(value)\n        \n        print(f\"Read registers: {result}\")\n        return result\n    \n    def write_register(self, address, value, unit=1):\n        \"\"\"Write single holding register\"\"\"\n        if not self.connected:\n            raise Exception(\"Not connected to Modbus device\")\n        \n        print(f\"Writing value {value} to register {address}\")\n        self.holding_registers[address] = value\n        return True\n    \n    def read_coils(self, address, count, unit=1):\n        \"\"\"Read coil status\"\"\"\n        if not self.connected:\n            raise Exception(\"Not connected to Modbus device\")\n        \n        print(f\"Reading {count} coils from address {address}\")\n        \n        result = []\n        for i in range(count):\n            coil_addr = address + i\n            value = self.coils.get(coil_addr, False)\n            result.append(value)\n        \n        print(f\"Read coils: {result}\")\n        return result\n    \n    def write_coil(self, address, value, unit=1):\n        \"\"\"Write single coil\"\"\"\n        if not self.connected:\n            raise Exception(\"Not connected to Modbus device\")\n        \n        print(f\"Writing coil {address} = {value}\")\n        self.coils[address] = bool(value)\n        return True\n\nclass IndustrialController:\n    \"\"\"High-level interface for industrial Modbus devices\"\"\"\n    \n    def __init__(self, host='192.168.1.100', port=502):\n        self.client = MockModbusClient(host, port)\n        self.connected = False\n    \n    def connect(self):\n        \"\"\"Connect to industrial controller\"\"\"\n        self.connected = self.client.connect()\n        return self.connected\n    \n    def disconnect(self):\n        \"\"\"Disconnect from controller\"\"\"\n        self.client.close()\n        self.connected = False\n    \n    def read_sensors(self):\n        \"\"\"Read all sensor values\"\"\"\n        if not self.connected:\n            raise Exception(\"Not connected to controller\")\n        \n        # Read sensor registers\n        registers = self.client.read_holding_registers(0, 5)\n        \n        # Convert raw values to engineering units\n        sensors = {\n            'temperature': registers[0] / 100.0,  # Celsius\n            'humidity': registers[1] / 100.0,     # %RH\n            'pump_status': bool(registers[2]),    # On/Off\n            'pressure': registers[3] / 10.0,      # bar\n            'flow_rate': registers[4]             # L/min\n        }\n        \n        return sensors\n    \n    def control_pump(self, pump_id, state):\n        \"\"\"Control pump on/off\"\"\"\n        if not self.connected:\n            raise Exception(\"Not connected to controller\")\n        \n        self.client.write_coil(pump_id, state)\n        print(f\"Pump {pump_id} {'ON' if state else 'OFF'}\")\n    \n    def set_setpoint(self, parameter, value):\n        \"\"\"Set control setpoint\"\"\"\n        if not self.connected:\n            raise Exception(\"Not connected to controller\")\n        \n        # Map parameters to register addresses\n        setpoint_registers = {\n            'temperature': 10,\n            'pressure': 11,\n            'flow_rate': 12\n        }\n        \n        if parameter not in setpoint_registers:\n            raise ValueError(f\"Unknown parameter: {parameter}\")\n        \n        # Convert to raw value\n        if parameter == 'temperature':\n            raw_value = int(value * 100)\n        elif parameter == 'pressure':\n            raw_value = int(value * 10)\n        else:\n            raw_value = int(value)\n        \n        register = setpoint_registers[parameter]\n        self.client.write_register(register, raw_value)\n        print(f\"Set {parameter} setpoint to {value}\")\n\n# Demonstrate industrial Modbus communication\ncontroller = IndustrialController('192.168.1.100')\n\ntry:\n    # Connect to controller\n    controller.connect()\n    \n    # Read current sensor values\n    sensors = controller.read_sensors()\n    print(\"Current sensor readings:\")\n    for sensor, value in sensors.items():\n        print(f\"  {sensor}: {value}\")\n    \n    # Control equipment\n    controller.control_pump(0, True)  # Turn on pump 1\n    controller.control_pump(1, False) # Turn off pump 2\n    \n    # Set control parameters\n    controller.set_setpoint('temperature', 25.0)  # 25°C\n    controller.set_setpoint('pressure', 2.5)      # 2.5 bar\n    \n    print(\"\\\\nController configuration updated\")\n    \nfinally:\n    controller.disconnect()",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>IoT Connectivity and Industrial Protocols</span>"
    ]
  },
  {
    "objectID": "book/14-iot-connectivity.html#influxdb-integration",
    "href": "book/14-iot-connectivity.html#influxdb-integration",
    "title": "15  IoT Connectivity and Industrial Protocols",
    "section": "15.3 InfluxDB Integration",
    "text": "15.3 InfluxDB Integration\nInfluxDB is a time-series database perfect for storing IoT sensor data and industrial measurements.\n\n15.3.1 Time-Series Data Management\n\n# Note: For real implementation: uv add influxdb-client\n\nimport json\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Any\nimport random\n\nclass MockInfluxDBClient:\n    \"\"\"Mock InfluxDB client for demonstration\"\"\"\n    \n    def __init__(self, url=\"http://localhost:8086\", token=\"\", org=\"\", bucket=\"\"):\n        self.url = url\n        self.token = token\n        self.org = org\n        self.bucket = bucket\n        self.data_points = []  # Mock storage\n        \n        print(f\"Mock InfluxDB client initialized\")\n        print(f\"  URL: {url}\")\n        print(f\"  Org: {org}\")\n        print(f\"  Bucket: {bucket}\")\n    \n    def write_api(self):\n        \"\"\"Get write API\"\"\"\n        return MockWriteAPI(self.data_points)\n    \n    def query_api(self):\n        \"\"\"Get query API\"\"\"\n        return MockQueryAPI(self.data_points)\n\nclass MockWriteAPI:\n    \"\"\"Mock InfluxDB write API\"\"\"\n    \n    def __init__(self, data_store):\n        self.data_store = data_store\n    \n    def write(self, bucket, org, record):\n        \"\"\"Write data points to InfluxDB\"\"\"\n        if isinstance(record, list):\n            for point in record:\n                self._write_point(point)\n        else:\n            self._write_point(record)\n        \n        print(f\"Written {len(record) if isinstance(record, list) else 1} points to {bucket}\")\n    \n    def _write_point(self, point):\n        \"\"\"Write a single data point\"\"\"\n        self.data_store.append(point)\n        print(f\"  Point: {point}\")\n\nclass MockQueryAPI:\n    \"\"\"Mock InfluxDB query API\"\"\"\n    \n    def __init__(self, data_store):\n        self.data_store = data_store\n    \n    def query(self, flux_query, org):\n        \"\"\"Execute Flux query\"\"\"\n        print(f\"Executing query: {flux_query}\")\n        \n        # Simulate query results\n        results = []\n        for i, point in enumerate(self.data_store[-10:]):  # Last 10 points\n            results.append({\n                'time': datetime.now() - timedelta(minutes=i),\n                'measurement': 'sensors',\n                'field': 'temperature',\n                'value': 20.0 + random.uniform(-5, 5)\n            })\n        \n        print(f\"Query returned {len(results)} results\")\n        return results\n\nclass IoTDataManager:\n    \"\"\"High-level IoT data management with InfluxDB\"\"\"\n    \n    def __init__(self, url=\"http://localhost:8086\", token=\"your-token\", \n                 org=\"your-org\", bucket=\"iot-data\"):\n        self.client = MockInfluxDBClient(url, token, org, bucket)\n        self.write_api = self.client.write_api()\n        self.query_api = self.client.query_api()\n        self.bucket = bucket\n        self.org = org\n    \n    def write_sensor_data(self, device_id: str, location: str, \n                         measurements: Dict[str, float]):\n        \"\"\"Write sensor measurements to InfluxDB\"\"\"\n        \n        timestamp = datetime.now()\n        points = []\n        \n        for field, value in measurements.items():\n            point = {\n                'measurement': 'sensors',\n                'tags': {\n                    'device_id': device_id,\n                    'location': location\n                },\n                'fields': {\n                    field: value\n                },\n                'time': timestamp\n            }\n            points.append(point)\n        \n        self.write_api.write(self.bucket, self.org, points)\n        print(f\"Written sensor data for device {device_id}\")\n    \n    def write_equipment_status(self, equipment_id: str, status: Dict[str, Any]):\n        \"\"\"Write equipment status to InfluxDB\"\"\"\n        \n        point = {\n            'measurement': 'equipment',\n            'tags': {\n                'equipment_id': equipment_id\n            },\n            'fields': status,\n            'time': datetime.now()\n        }\n        \n        self.write_api.write(self.bucket, self.org, [point])\n        print(f\"Written equipment status for {equipment_id}\")\n    \n    def get_recent_data(self, measurement: str, hours: int = 24):\n        \"\"\"Get recent data from InfluxDB\"\"\"\n        \n        flux_query = f'''\n        from(bucket: \"{self.bucket}\")\n          |&gt; range(start: -{hours}h)\n          |&gt; filter(fn: (r) =&gt; r._measurement == \"{measurement}\")\n          |&gt; aggregateWindow(every: 5m, fn: mean, createEmpty: false)\n          |&gt; yield(name: \"mean\")\n        '''\n        \n        result = self.query_api.query(flux_query, self.org)\n        return result\n    \n    def get_device_summary(self, device_id: str):\n        \"\"\"Get summary statistics for a device\"\"\"\n        \n        flux_query = f'''\n        from(bucket: \"{self.bucket}\")\n          |&gt; range(start: -24h)\n          |&gt; filter(fn: (r) =&gt; r.device_id == \"{device_id}\")\n          |&gt; group(columns: [\"_field\"])\n          |&gt; aggregateWindow(every: 24h, fn: mean, createEmpty: false)\n          |&gt; yield(name: \"daily_average\")\n        '''\n        \n        result = self.query_api.query(flux_query, self.org)\n        \n        # Process results into summary\n        summary = {\n            'device_id': device_id,\n            'period': '24 hours',\n            'measurements': {}\n        }\n        \n        # Simulate summary data\n        summary['measurements'] = {\n            'temperature': {'avg': 23.5, 'min': 20.1, 'max': 26.8},\n            'humidity': {'avg': 62.3, 'min': 55.0, 'max': 70.5},\n            'pressure': {'avg': 1013.2, 'min': 1010.5, 'max': 1015.8}\n        }\n        \n        return summary\n\n# Demonstrate IoT data management\ndata_manager = IoTDataManager(\n    url=\"http://localhost:8086\",\n    token=\"your-influxdb-token\",\n    org=\"your-organization\",\n    bucket=\"iot-sensors\"\n)\n\n# Write sensor data\nsensor_data = {\n    'temperature': 23.5,\n    'humidity': 62.3,\n    'pressure': 1013.2,\n    'light_level': 340\n}\n\ndata_manager.write_sensor_data(\n    device_id=\"sensor_001\",\n    location=\"factory_floor\",\n    measurements=sensor_data\n)\n\n# Write equipment status\nequipment_status = {\n    'running': True,\n    'rpm': 1450,\n    'temperature': 78.5,\n    'vibration': 0.02\n}\n\ndata_manager.write_equipment_status(\n    equipment_id=\"pump_001\",\n    status=equipment_status\n)\n\n# Query recent data\nrecent_data = data_manager.get_recent_data(\"sensors\", hours=24)\nprint(f\"\\\\nRecent sensor data: {len(recent_data)} points\")\n\n# Get device summary\nsummary = data_manager.get_device_summary(\"sensor_001\")\nprint(f\"\\\\nDevice summary:\")\nprint(json.dumps(summary, indent=2))",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>IoT Connectivity and Industrial Protocols</span>"
    ]
  },
  {
    "objectID": "book/14-iot-connectivity.html#complete-iot-system-example",
    "href": "book/14-iot-connectivity.html#complete-iot-system-example",
    "title": "15  IoT Connectivity and Industrial Protocols",
    "section": "15.4 Complete IoT System Example",
    "text": "15.4 Complete IoT System Example\nLet’s build a complete IoT monitoring system that combines all the technologies:\n\nimport time\nimport json\nfrom datetime import datetime\nfrom typing import Dict, List, Optional\nimport threading\nimport queue\n\nclass IoTMonitoringSystem:\n    \"\"\"Complete IoT monitoring system with multiple protocols\"\"\"\n    \n    def __init__(self):\n        self.devices = {}\n        self.data_queue = queue.Queue()\n        self.running = False\n        self.influx_client = IoTDataManager()\n        \n        # Device configurations\n        self.device_configs = {\n            'arduino_001': {\n                'type': 'serial',\n                'port': '/dev/ttyACM0',\n                'baudrate': 9600,\n                'location': 'greenhouse'\n            },\n            'plc_001': {\n                'type': 'modbus',\n                'host': '192.168.1.100',\n                'port': 502,\n                'location': 'production_line'\n            }\n        }\n    \n    def initialize_devices(self):\n        \"\"\"Initialize all configured devices\"\"\"\n        for device_id, config in self.device_configs.items():\n            try:\n                if config['type'] == 'serial':\n                    device = ArduinoInterface(config['port'], config['baudrate'])\n                    device.connect()\n                elif config['type'] == 'modbus':\n                    device = IndustrialController(config['host'], config['port'])\n                    device.connect()\n                \n                self.devices[device_id] = {\n                    'interface': device,\n                    'config': config,\n                    'last_reading': None,\n                    'error_count': 0\n                }\n                \n                print(f\"Initialized device: {device_id}\")\n                \n            except Exception as e:\n                print(f\"Failed to initialize {device_id}: {e}\")\n    \n    def read_device_data(self, device_id: str) -&gt; Optional[Dict]:\n        \"\"\"Read data from a specific device\"\"\"\n        if device_id not in self.devices:\n            return None\n        \n        device_info = self.devices[device_id]\n        interface = device_info['interface']\n        config = device_info['config']\n        \n        try:\n            if config['type'] == 'serial':\n                data = interface.read_sensor_data()\n            elif config['type'] == 'modbus':\n                data = interface.read_sensors()\n            \n            if data:\n                data['device_id'] = device_id\n                data['location'] = config['location']\n                data['timestamp'] = datetime.now().isoformat()\n                device_info['last_reading'] = datetime.now()\n                device_info['error_count'] = 0\n                \n            return data\n            \n        except Exception as e:\n            device_info['error_count'] += 1\n            print(f\"Error reading from {device_id}: {e}\")\n            return None\n    \n    def data_collection_worker(self):\n        \"\"\"Background worker for continuous data collection\"\"\"\n        while self.running:\n            for device_id in self.devices:\n                data = self.read_device_data(device_id)\n                if data:\n                    self.data_queue.put(data)\n            \n            time.sleep(5)  # Read every 5 seconds\n    \n    def data_storage_worker(self):\n        \"\"\"Background worker for storing data to InfluxDB\"\"\"\n        while self.running:\n            try:\n                # Get data from queue with timeout\n                data = self.data_queue.get(timeout=1)\n                \n                # Extract device info\n                device_id = data.pop('device_id')\n                location = data.pop('location')\n                timestamp = data.pop('timestamp')\n                \n                # Store sensor measurements\n                measurements = {k: v for k, v in data.items() \n                              if isinstance(v, (int, float))}\n                \n                if measurements:\n                    self.influx_client.write_sensor_data(\n                        device_id, location, measurements\n                    )\n                \n                self.data_queue.task_done()\n                \n            except queue.Empty:\n                continue\n            except Exception as e:\n                print(f\"Error storing data: {e}\")\n    \n    def start_monitoring(self):\n        \"\"\"Start the monitoring system\"\"\"\n        print(\"Starting IoT monitoring system...\")\n        \n        # Initialize devices\n        self.initialize_devices()\n        \n        if not self.devices:\n            print(\"No devices initialized. Exiting.\")\n            return\n        \n        # Start background workers\n        self.running = True\n        \n        collection_thread = threading.Thread(\n            target=self.data_collection_worker,\n            name=\"DataCollection\"\n        )\n        \n        storage_thread = threading.Thread(\n            target=self.data_storage_worker,\n            name=\"DataStorage\"\n        )\n        \n        collection_thread.start()\n        storage_thread.start()\n        \n        print(\"Monitoring system started successfully\")\n        \n        # Main monitoring loop\n        try:\n            while True:\n                self.print_system_status()\n                time.sleep(30)  # Print status every 30 seconds\n                \n        except KeyboardInterrupt:\n            print(\"\\\\nShutting down monitoring system...\")\n            self.stop_monitoring()\n            \n            collection_thread.join()\n            storage_thread.join()\n    \n    def stop_monitoring(self):\n        \"\"\"Stop the monitoring system\"\"\"\n        self.running = False\n        \n        # Disconnect all devices\n        for device_id, device_info in self.devices.items():\n            try:\n                device_info['interface'].disconnect()\n                print(f\"Disconnected from {device_id}\")\n            except:\n                pass\n    \n    def print_system_status(self):\n        \"\"\"Print current system status\"\"\"\n        print(f\"\\\\n=== IoT System Status - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\")\n        print(f\"Active devices: {len(self.devices)}\")\n        print(f\"Queue size: {self.data_queue.qsize()}\")\n        \n        for device_id, device_info in self.devices.items():\n            last_reading = device_info['last_reading']\n            error_count = device_info['error_count']\n            \n            if last_reading:\n                age = (datetime.now() - last_reading).seconds\n                status = \"OK\" if age &lt; 30 and error_count == 0 else \"WARNING\"\n            else:\n                status = \"NO DATA\"\n            \n            print(f\"  {device_id}: {status} (errors: {error_count})\")\n    \n    def get_system_health(self) -&gt; Dict:\n        \"\"\"Get system health metrics\"\"\"\n        health = {\n            'timestamp': datetime.now().isoformat(),\n            'devices_count': len(self.devices),\n            'queue_size': self.data_queue.qsize(),\n            'devices': {}\n        }\n        \n        for device_id, device_info in self.devices.items():\n            last_reading = device_info['last_reading']\n            \n            device_health = {\n                'error_count': device_info['error_count'],\n                'last_reading': last_reading.isoformat() if last_reading else None,\n                'status': 'healthy' if device_info['error_count'] == 0 else 'degraded'\n            }\n            \n            health['devices'][device_id] = device_health\n        \n        return health\n\n# Demonstrate the complete IoT system\nprint(\"IoT Monitoring System Demo\")\nprint(\"=\" * 40)\n\n# Create and configure the system\niot_system = IoTMonitoringSystem()\n\n# Simulate running the system for a short time\nprint(\"\\\\nSimulating system initialization...\")\niot_system.initialize_devices()\n\n# Get system health\nhealth = iot_system.get_system_health()\nprint(f\"\\\\nSystem Health Report:\")\nprint(json.dumps(health, indent=2))\n\nprint(\"\\\\n✅ IoT system demonstration complete!\")\nprint(\"\\\\nIn a real implementation, you would:\")\nprint(\"1. Install required packages: uv add pyserial pymodbus influxdb-client\")\nprint(\"2. Configure actual device connections\")\nprint(\"3. Set up InfluxDB with proper authentication\")\nprint(\"4. Add error handling and recovery mechanisms\")\nprint(\"5. Implement data visualization dashboards\")",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>IoT Connectivity and Industrial Protocols</span>"
    ]
  },
  {
    "objectID": "book/14-iot-connectivity.html#best-practices-for-iot-development",
    "href": "book/14-iot-connectivity.html#best-practices-for-iot-development",
    "title": "15  IoT Connectivity and Industrial Protocols",
    "section": "15.5 Best Practices for IoT Development",
    "text": "15.5 Best Practices for IoT Development\n\n15.5.1 Error Handling and Resilience\n\nimport logging\nfrom typing import Optional, Callable\nimport functools\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\nlogger = logging.getLogger(__name__)\n\ndef retry_on_failure(max_retries: int = 3, delay: float = 1.0):\n    \"\"\"Decorator for retrying failed operations\"\"\"\n    def decorator(func: Callable):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            last_exception = None\n            \n            for attempt in range(max_retries):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    last_exception = e\n                    logger.warning(f\"Attempt {attempt + 1} failed: {e}\")\n                    \n                    if attempt &lt; max_retries - 1:\n                        time.sleep(delay)\n                    \n            logger.error(f\"All {max_retries} attempts failed\")\n            raise last_exception\n        \n        return wrapper\n    return decorator\n\nclass ResilientDeviceConnection:\n    \"\"\"Resilient device connection with automatic reconnection\"\"\"\n    \n    def __init__(self, device_config: Dict):\n        self.config = device_config\n        self.connection = None\n        self.connected = False\n        self.reconnect_attempts = 0\n        self.max_reconnect_attempts = 5\n    \n    @retry_on_failure(max_retries=3, delay=2.0)\n    def connect(self):\n        \"\"\"Connect to device with retry logic\"\"\"\n        logger.info(f\"Connecting to device: {self.config['device_id']}\")\n        \n        if self.config['type'] == 'serial':\n            # In real implementation: self.connection = serial.Serial(...)\n            self.connection = MockSerial(\n                self.config['port'], \n                self.config['baudrate']\n            )\n        elif self.config['type'] == 'modbus':\n            self.connection = MockModbusClient(\n                self.config['host'], \n                self.config['port']\n            )\n        \n        self.connection.connect() if hasattr(self.connection, 'connect') else None\n        self.connected = True\n        self.reconnect_attempts = 0\n        \n        logger.info(f\"Successfully connected to {self.config['device_id']}\")\n    \n    def disconnect(self):\n        \"\"\"Disconnect from device\"\"\"\n        if self.connection:\n            try:\n                if hasattr(self.connection, 'close'):\n                    self.connection.close()\n                elif hasattr(self.connection, 'disconnect'):\n                    self.connection.disconnect()\n            except Exception as e:\n                logger.warning(f\"Error during disconnect: {e}\")\n            \n            self.connected = False\n            logger.info(f\"Disconnected from {self.config['device_id']}\")\n    \n    def read_data(self) -&gt; Optional[Dict]:\n        \"\"\"Read data with automatic reconnection\"\"\"\n        if not self.connected:\n            self._attempt_reconnect()\n        \n        try:\n            # Simulate reading data based on device type\n            if self.config['type'] == 'serial':\n                data = {'temperature': 23.5, 'humidity': 65.0}\n            elif self.config['type'] == 'modbus':\n                data = {'pressure': 2.5, 'flow_rate': 150}\n            else:\n                data = {}\n            \n            data['device_id'] = self.config['device_id']\n            data['timestamp'] = datetime.now().isoformat()\n            \n            return data\n            \n        except Exception as e:\n            logger.error(f\"Error reading data: {e}\")\n            self.connected = False\n            return None\n    \n    def _attempt_reconnect(self):\n        \"\"\"Attempt to reconnect to device\"\"\"\n        if self.reconnect_attempts &gt;= self.max_reconnect_attempts:\n            logger.error(f\"Max reconnection attempts reached for {self.config['device_id']}\")\n            return\n        \n        try:\n            self.reconnect_attempts += 1\n            logger.info(f\"Reconnection attempt {self.reconnect_attempts}\")\n            self.connect()\n            \n        except Exception as e:\n            logger.error(f\"Reconnection failed: {e}\")\n\n# Demonstrate resilient connection\ndevice_config = {\n    'device_id': 'resilient_sensor_001',\n    'type': 'serial',\n    'port': '/dev/ttyUSB0',\n    'baudrate': 9600\n}\n\nresilient_device = ResilientDeviceConnection(device_config)\n\ntry:\n    resilient_device.connect()\n    \n    # Simulate multiple readings\n    for i in range(5):\n        data = resilient_device.read_data()\n        if data:\n            print(f\"Reading {i+1}: {data}\")\n        time.sleep(1)\n        \nfinally:\n    resilient_device.disconnect()",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>IoT Connectivity and Industrial Protocols</span>"
    ]
  },
  {
    "objectID": "book/14-iot-connectivity.html#summary",
    "href": "book/14-iot-connectivity.html#summary",
    "title": "15  IoT Connectivity and Industrial Protocols",
    "section": "15.6 Summary",
    "text": "15.6 Summary\nThis chapter covered essential IoT connectivity technologies:\n\nSerial Communication: Direct hardware communication with PySerial\nModbus Protocol: Industrial device communication (TCP/RTU)\nInfluxDB Integration: Time-series data storage and analysis\nSystem Integration: Complete IoT monitoring solutions\nBest Practices: Error handling, resilience, and reliability\n\n\n15.6.1 Key Takeaways\n\nChoose the right protocol for your application requirements\nImplement proper error handling and reconnection logic\nUse time-series databases for sensor data storage\nDesign for resilience in industrial environments\nMonitor system health and device connectivity\n\n\n\n15.6.2 Next Steps\n\nSet up real hardware connections with actual devices\nImplement data visualization dashboards (Grafana, custom web apps)\nAdd alerting and notification systems\nExplore additional protocols (MQTT, OPC-UA, CAN bus)\nImplement edge computing and local data processing\n\nIoT development with Python opens up endless possibilities for automation, monitoring, and data-driven decision making in industrial and consumer applications!",
    "crumbs": [
      "Applications",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>IoT Connectivity and Industrial Protocols</span>"
    ]
  }
]