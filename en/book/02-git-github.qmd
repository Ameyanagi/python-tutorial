# Git and GitHub

Git is essential for tracking code changes and collaborating with others. We'll use Git throughout this tutorial.

## What is Git?

Git is a **distributed version control system** that:
- Tracks changes in your code
- Allows you to revert to previous versions
- Enables collaboration with other developers
- Keeps a complete history of your project

## Installing Git

### Windows
```bash
# Using winget
winget install Git.Git

# Using chocolatey
choco install git
```

### macOS
```bash
# Using Homebrew
brew install git

# Using Xcode Command Line Tools
xcode-select --install
```

### Linux
```bash
# Ubuntu/Debian
sudo apt install git

# Fedora
sudo dnf install git

# Arch Linux
sudo pacman -S git
```

## Basic Git Configuration

Set up your identity:

```bash
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
git config --global init.defaultBranch main
```

## Essential Git Commands

### Repository Initialization
```bash
# Create new repository
git init

# Clone existing repository
git clone https://github.com/user/repo.git
```

### Basic Workflow
```bash
# Check status
git status

# Add files to staging
git add filename.py
git add .  # Add all files

# Commit changes
git commit -m "Add new feature"

# View history
git log --oneline
```

### Branching
```bash
# Create new branch
git branch feature-name
git checkout feature-name
# Or in one command:
git checkout -b feature-name

# Switch branches
git checkout main

# Merge branch
git checkout main
git merge feature-name

# Delete branch
git branch -d feature-name
```

## GitHub Essentials

GitHub hosts Git repositories in the cloud and adds collaboration features.

### Creating a Repository

1. Go to [github.com](https://github.com)
2. Click "New repository"
3. Choose repository name
4. Add description
5. Choose public/private
6. Add README, .gitignore, license

### Connecting Local to Remote

```bash
# Add remote origin
git remote add origin https://github.com/username/repo.git

# Push to GitHub
git push -u origin main

# Pull changes
git pull origin main
```

### GitHub Workflow

```bash
# 1. Create feature branch
git checkout -b feature/new-functionality

# 2. Make changes and commit
git add .
git commit -m "feat: add new functionality"

# 3. Push branch
git push origin feature/new-functionality

# 4. Create Pull Request on GitHub
# 5. Review and merge
# 6. Delete feature branch
git checkout main
git pull origin main
git branch -d feature/new-functionality
```

## Python-Specific Git Practices

### .gitignore for Python

Create `.gitignore` file:
```gitignore
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.venv/
.ENV/

# IDEs
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Project specific
docs/
.pytest_cache/
```

### Commit Message Conventions

Use clear, descriptive commit messages:

```bash
# Good
git commit -m "feat: add user authentication system"
git commit -m "fix: resolve login validation bug"
git commit -m "docs: update API documentation"

# Bad
git commit -m "update stuff"
git commit -m "fix bug"
git commit -m "changes"
```

### Common Prefixes:
- `feat:` - New feature
- `fix:` - Bug fix
- `docs:` - Documentation
- `style:` - Code formatting
- `refactor:` - Code restructuring
- `test:` - Adding tests
- `chore:` - Maintenance tasks

## Practical Exercise

Let's practice with a real Python project:

```python
# Create a simple calculator
# File: calculator.py

def add(a: float, b: float) -> float:
    """Add two numbers."""
    return a + b

def subtract(a: float, b: float) -> float:
    """Subtract b from a."""
    return a - b

def multiply(a: float, b: float) -> float:
    """Multiply two numbers."""
    return a * b

def divide(a: float, b: float) -> float:
    """Divide a by b."""
    if b == 0:
        raise ValueError("Cannot divide by zero")
    return a / b

if __name__ == "__main__":
    print("Calculator Demo")
    print(f"5 + 3 = {add(5, 3)}")
    print(f"5 - 3 = {subtract(5, 3)}")
    print(f"5 * 3 = {multiply(5, 3)}")
    print(f"5 / 3 = {divide(5, 3):.2f}")
```

### Exercise Steps

1. **Initialize repository**:
   ```bash
   mkdir python-calculator
   cd python-calculator
   git init
   ```

2. **Create calculator.py** with the code above

3. **Add and commit**:
   ```bash
   git add calculator.py
   git commit -m "feat: add basic calculator functions"
   ```

4. **Create GitHub repository** and push:
   ```bash
   git remote add origin https://github.com/yourusername/python-calculator.git
   git push -u origin main
   ```

5. **Add a feature** (create new branch):
   ```bash
   git checkout -b feature/power-function
   ```

6. **Add power function** to calculator.py:
   ```python
   def power(a: float, b: float) -> float:
       """Raise a to the power of b."""
       return a ** b
   ```

7. **Commit and push**:
   ```bash
   git add calculator.py
   git commit -m "feat: add power function"
   git push origin feature/power-function
   ```

8. **Create Pull Request** on GitHub

## Git Best Practices

1. **Commit often** - Small, logical commits
2. **Write clear messages** - Explain what and why
3. **Use branches** - Keep main branch stable
4. **Review before merging** - Use pull requests
5. **Keep history clean** - Avoid unnecessary merge commits
6. **Backup regularly** - Push to remote frequently

## Troubleshooting Common Issues

### Undoing Changes
```bash
# Undo unstaged changes
git checkout -- filename.py

# Undo staged changes
git reset HEAD filename.py

# Undo last commit (keep changes)
git reset --soft HEAD~1

# Undo last commit (discard changes)
git reset --hard HEAD~1
```

### Resolving Conflicts
When Git can't automatically merge:

1. Open conflicted files
2. Look for conflict markers: `<<<<<<<`, `=======`, `>>>>>>>`
3. Edit to resolve conflicts
4. Remove conflict markers
5. Add and commit resolved files

## Next Steps

Now that you understand Git and GitHub, let's dive into [Python Syntax](03-syntax.qmd) and start coding!

## Resources

- [Git Documentation](https://git-scm.com/doc)
- [GitHub Guides](https://guides.github.com/)
- [Interactive Git Tutorial](https://learngitbranching.js.org/)