# 環境構築

この章では、モダンなツールを使用して Python 開発環境をセットアップします。

## Python のインストール

最高の型ヒントサポートのために Python 3.12 以降を推奨します。

### Windows
```bash
# winget を使用
winget install Python.Python.3.12

# Microsoft Store を使用
# Microsoft Store で "Python 3.12" を検索
```

### macOS
```bash
# Homebrew を使用
brew install python@3.12

# pyenv を使用
pyenv install 3.12.8
pyenv global 3.12.8
```

### Linux
```bash
# Ubuntu/Debian
sudo apt update
sudo apt install python3.12 python3.12-venv

# Fedora
sudo dnf install python3.12

# Arch Linux
sudo pacman -S python
```

## 環境管理ツール

### uv (推奨)

uv は最も高速な Python パッケージマネージャー兼環境ツールです。

#### インストール
```bash
# Linux/macOS
curl -LsSf https://astral.sh/uv/install.sh | sh

# Windows
powershell -c "irm https://astral.sh/uv/install.ps1 | iex"
```

#### 使用方法
```bash
# プロジェクト作成
uv init my-project
cd my-project

# 仮想環境作成
uv venv

# パッケージ追加
uv add requests pandas

# コマンド実行
uv run python script.py
uv run pytest
```

### Poetry (代替案)

Poetry は依存関係管理とパッケージングを提供します。

#### インストール
```bash
curl -sSL https://install.python-poetry.org | python3 -
```

#### 使用方法
```bash
# プロジェクト作成
poetry new my-project
cd my-project

# 依存関係追加
poetry add requests pandas

# 依存関係インストール
poetry install

# コマンド実行
poetry run python script.py
```

### Miniforge (データサイエンス用)

Miniforge は conda-forge をデフォルトチャネルとする conda を提供します。

#### インストール
```bash
# https://github.com/conda-forge/miniforge からダウンロード
# インストールスクリプト実行
bash Miniforge3-Linux-x86_64.sh
```

#### 使用方法
```bash
# 環境作成
conda create -n myenv python=3.12
conda activate myenv

# パッケージインストール
conda install pandas numpy matplotlib
```

## 演習

1. **Python 3.12 をインストール**してください
2. **uv をインストール**してテストプロジェクトを作成してください
3. **仮想環境を作成**して pandas を追加してください
4. **uv run を使用**して簡単な Python スクリプトを実行してください

## 次のステップ

環境の準備ができたので、バージョン管理のための [Git と GitHub](02-git-github.qmd) について学びましょう。